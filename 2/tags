!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	/usr/include/FL/Fl_Valuator.H	/^  double A; int B; \/\/ rounds to multiples of A\/B, or no rounding if A is zero$/;"	m	class:Fl_Valuator
ALWAYS_ON	/usr/include/FL/Fl_Browser_.H	/^    ALWAYS_ON = 4,$/;"	e	enum:Fl_Browser_::__anon11
ALWAYS_ON	/usr/include/FL/Fl_Scroll.H	/^    ALWAYS_ON = 4,$/;"	e	enum:Fl_Scroll::__anon17
ANY	/usr/include/FL/Fl_File_Icon.H	/^    ANY,			\/\/ Any kind of file$/;"	e	enum:Fl_File_Icon::__anon7
APIENTRY	/usr/include/FL/gl.h	44;"	d
APIENTRY	/usr/include/FL/gl.h	46;"	d
APIENTRY	/usr/include/FL/glu.h	44;"	d
APIENTRY	/usr/include/FL/glu.h	46;"	d
ATTR_HIDDEN	/usr/include/FL/Fl_Text_Display.H	/^      ATTR_HIDDEN = 2$/;"	e	enum:Fl_Text_Display::__anon23
ATTR_NONE	/usr/include/FL/Fl_Text_Display.H	/^      ATTR_NONE = 0,$/;"	e	enum:Fl_Text_Display::__anon23
ATTR_UNDERLINE	/usr/include/FL/Fl_Text_Display.H	/^      ATTR_UNDERLINE = 1,$/;"	e	enum:Fl_Text_Display::__anon23
ApplyViewport	camera.cpp	/^void Camera::ApplyViewport() const$/;"	f	class:Camera
ArcBallRotation	camera.cpp	/^void Camera::ArcBallRotation(int x, int y)$/;"	f	class:Camera
B	/usr/include/FL/Fl_Valuator.H	/^  double A; int B; \/\/ rounds to multiples of A\/B, or no rounding if A is zero$/;"	m	class:Fl_Valuator
BITMAP_H	bitmap.h	9;"	d
BLOCK_CURSOR	/usr/include/FL/Fl_Text_Display.H	/^      BLOCK_CURSOR, HEAVY_CURSOR$/;"	e	enum:Fl_Text_Display::__anon20
BMP_BITMAPFILEHEADER	bitmap.h	/^} BMP_BITMAPFILEHEADER;$/;"	t	typeref:struct:__anon1
BMP_BITMAPINFOHEADER	bitmap.h	/^} BMP_BITMAPINFOHEADER;$/;"	t	typeref:struct:__anon2
BMP_BI_RGB	bitmap.h	14;"	d
BMP_DWORD	bitmap.h	/^typedef unsigned int BMP_DWORD;$/;"	t
BMP_LONG	bitmap.h	/^typedef int BMP_LONG;$/;"	t
BMP_WORD	bitmap.h	/^typedef unsigned short BMP_WORD;$/;"	t
BOTH	/usr/include/FL/Fl_Browser_.H	/^    BOTH = 3,$/;"	e	enum:Fl_Browser_::__anon11
BOTH	/usr/include/FL/Fl_Scroll.H	/^    BOTH = 3,$/;"	e	enum:Fl_Scroll::__anon17
BOTH_ALWAYS	/usr/include/FL/Fl_Browser_.H	/^    BOTH_ALWAYS = 7$/;"	e	enum:Fl_Browser_::__anon11
BOTH_ALWAYS	/usr/include/FL/Fl_Scroll.H	/^    BOTH_ALWAYS = 7$/;"	e	enum:Fl_Scroll::__anon17
BOTTOM	/usr/include/FL/Fl_Browser.H	/^  enum Fl_Line_Position { TOP, BOTTOM, MIDDLE };$/;"	e	enum:Fl_Browser::Fl_Line_Position
Button	camera.h	/^    typedef enum { NONE, LEFT, MIDDLE, RIGHT } Button;$/;"	t	class:Camera	typeref:enum:Camera::__anon3
CAMERA_H	camera.h	7;"	d
CARET_CURSOR	/usr/include/FL/Fl_Text_Display.H	/^      NORMAL_CURSOR, CARET_CURSOR, DIM_CURSOR,$/;"	e	enum:Fl_Text_Display::__anon20
CENTER	/usr/include/FL/Fl_Help_View.H	/^  enum { RIGHT = -1, CENTER, LEFT };	\/\/ Alignments$/;"	e	enum:Fl_Help_View::__anon4
CHANGED	/usr/include/FL/Fl_Widget.H	/^        CHANGED=128, VISIBLE_FOCUS=512, COPIED_LABEL = 1024};$/;"	e	enum:Fl_Widget::__anon12
CHARACTER_POS	/usr/include/FL/Fl_Text_Display.H	/^      CURSOR_POS, CHARACTER_POS$/;"	e	enum:Fl_Text_Display::__anon21
CLIP_CHILDREN	/usr/include/FL/Fl_Group.H	/^  enum { CLIP_CHILDREN = 2048 };$/;"	e	enum:Fl_Group::__anon14
CLOSEDLINE	/usr/include/FL/Fl_File_Icon.H	/^    CLOSEDLINE,			\/\/ Start of closed line$/;"	e	enum:Fl_File_Icon::__anon8
COLOR	/usr/include/FL/Fl_File_Icon.H	/^    COLOR,			\/\/ Followed by color value (2 shorts)$/;"	e	enum:Fl_File_Icon::__anon8
COPIED_LABEL	/usr/include/FL/Fl_Widget.H	/^        CHANGED=128, VISIBLE_FOCUS=512, COPIED_LABEL = 1024};$/;"	e	enum:Fl_Widget::__anon12
CREATE	/usr/include/FL/Fl_File_Chooser.H	/^  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 }; $/;"	e	enum:Fl_File_Chooser::__anon33
CREATE	/usr/include/FL/fl_file_chooser.H	/^  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 }; $/;"	e	enum:Fl_File_Chooser::__anon13
CURSOR_POS	/usr/include/FL/Fl_Text_Display.H	/^      CURSOR_POS, CHARACTER_POS$/;"	e	enum:Fl_Text_Display::__anon21
Camera	camera.cpp	/^Camera::Camera()$/;"	f	class:Camera
Camera	camera.h	/^class Camera$/;"	c
Characters	/usr/include/FL/glut.H	/^  const Fl_Glut_StrokeChar** Characters;\/\/ The characters mapping$/;"	m	struct:Fl_Glut_StrokeFont
DEVICE	/usr/include/FL/Fl_File_Icon.H	/^    DEVICE,			\/\/ Only character and block devices$/;"	e	enum:Fl_File_Icon::__anon7
DIM_CURSOR	/usr/include/FL/Fl_Text_Display.H	/^      NORMAL_CURSOR, CARET_CURSOR, DIM_CURSOR,$/;"	e	enum:Fl_Text_Display::__anon20
DIRECTORIES	/usr/include/FL/Fl_File_Browser.H	/^  enum { FILES, DIRECTORIES };$/;"	e	enum:Fl_File_Browser::__anon25
DIRECTORY	/usr/include/FL/Fl_File_Chooser.H	/^  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 }; $/;"	e	enum:Fl_File_Chooser::__anon33
DIRECTORY	/usr/include/FL/Fl_File_Icon.H	/^    DIRECTORY			\/\/ Only directories$/;"	e	enum:Fl_File_Icon::__anon7
DIRECTORY	/usr/include/FL/fl_file_chooser.H	/^  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 }; $/;"	e	enum:Fl_File_Chooser::__anon13
DRAG_CHAR	/usr/include/FL/Fl_Text_Display.H	/^      DRAG_CHAR = 0, DRAG_WORD = 1, DRAG_LINE = 2$/;"	e	enum:Fl_Text_Display::__anon22
DRAG_LINE	/usr/include/FL/Fl_Text_Display.H	/^      DRAG_CHAR = 0, DRAG_WORD = 1, DRAG_LINE = 2$/;"	e	enum:Fl_Text_Display::__anon22
DRAG_WORD	/usr/include/FL/Fl_Text_Display.H	/^      DRAG_CHAR = 0, DRAG_WORD = 1, DRAG_LINE = 2$/;"	e	enum:Fl_Text_Display::__anon22
DistanceZoom	camera.cpp	/^void Camera::DistanceZoom(int x, int y)$/;"	f	class:Camera
END	/usr/include/FL/Fl_File_Icon.H	/^    END,			\/\/ End of primitive\/icon$/;"	e	enum:Fl_File_Icon::__anon8
Entry	/usr/include/FL/Fl_Preferences.H	/^  struct Entry$/;"	s	class:Fl_Preferences
FALSE	/usr/include/FL/forms.H	46;"	d
FIFO	/usr/include/FL/Fl_File_Icon.H	/^    FIFO,			\/\/ Only named pipes$/;"	e	enum:Fl_File_Icon::__anon7
FILES	/usr/include/FL/Fl_File_Browser.H	/^  enum { FILES, DIRECTORIES };$/;"	e	enum:Fl_File_Browser::__anon25
FL_ACCUM	/usr/include/FL/Enumerations.H	/^  FL_ACCUM	= 4,$/;"	e	enum:Fl_Mode
FL_ACTIVATE	/usr/include/FL/Enumerations.H	/^  FL_ACTIVATE		= 14,$/;"	e	enum:Fl_Event
FL_ALIGN_BESIDE	/usr/include/FL/forms.H	98;"	d
FL_ALIGN_BOTTOM	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_BOTTOM		= 2,$/;"	e	enum:Fl_Align
FL_ALIGN_BOTTOM_LEFT	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_BOTTOM_LEFT		= FL_ALIGN_BOTTOM | FL_ALIGN_LEFT,$/;"	e	enum:Fl_Align
FL_ALIGN_BOTTOM_RIGHT	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_BOTTOM_RIGHT		= FL_ALIGN_BOTTOM | FL_ALIGN_RIGHT,$/;"	e	enum:Fl_Align
FL_ALIGN_CENTER	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_CENTER		= 0,$/;"	e	enum:Fl_Align
FL_ALIGN_CLIP	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_CLIP			= 64,$/;"	e	enum:Fl_Align
FL_ALIGN_IMAGE_OVER_TEXT	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_IMAGE_OVER_TEXT	= 0,$/;"	e	enum:Fl_Align
FL_ALIGN_INSIDE	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_INSIDE		= 16,$/;"	e	enum:Fl_Align
FL_ALIGN_LEFT	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_LEFT			= 4,$/;"	e	enum:Fl_Align
FL_ALIGN_LEFT_BOTTOM	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_LEFT_BOTTOM		= FL_ALIGN_BOTTOM_LEFT,$/;"	e	enum:Fl_Align
FL_ALIGN_LEFT_TOP	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_LEFT_TOP		= FL_ALIGN_TOP_LEFT,$/;"	e	enum:Fl_Align
FL_ALIGN_NOWRAP	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_NOWRAP		= 0 \/\/ for back compatability$/;"	e	enum:Fl_Align
FL_ALIGN_RIGHT	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_RIGHT		= 8,$/;"	e	enum:Fl_Align
FL_ALIGN_RIGHT_BOTTOM	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_RIGHT_BOTTOM		= FL_ALIGN_BOTTOM_RIGHT,$/;"	e	enum:Fl_Align
FL_ALIGN_RIGHT_TOP	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_RIGHT_TOP		= FL_ALIGN_TOP_RIGHT,$/;"	e	enum:Fl_Align
FL_ALIGN_TEXT_OVER_IMAGE	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_TEXT_OVER_IMAGE	= 32,$/;"	e	enum:Fl_Align
FL_ALIGN_TOP	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_TOP			= 1,$/;"	e	enum:Fl_Align
FL_ALIGN_TOP_LEFT	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_TOP_LEFT		= FL_ALIGN_TOP | FL_ALIGN_LEFT,$/;"	e	enum:Fl_Align
FL_ALIGN_TOP_RIGHT	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_TOP_RIGHT		= FL_ALIGN_TOP | FL_ALIGN_RIGHT,$/;"	e	enum:Fl_Align
FL_ALIGN_WRAP	/usr/include/FL/Enumerations.H	/^  FL_ALIGN_WRAP			= 128,$/;"	e	enum:Fl_Align
FL_ALL_FREE	/usr/include/FL/Fl_Free.H	39;"	d
FL_ALPHA	/usr/include/FL/Enumerations.H	/^  FL_ALPHA	= 8,$/;"	e	enum:Fl_Mode
FL_ALT	/usr/include/FL/Enumerations.H	143;"	d
FL_ANALOG_CLOCK	/usr/include/FL/Fl_Clock.H	38;"	d
FL_AUTO	/usr/include/FL/forms.H	54;"	d
FL_Alt_L	/usr/include/FL/Enumerations.H	130;"	d
FL_Alt_R	/usr/include/FL/Enumerations.H	131;"	d
FL_BACKGROUND2_COLOR	/usr/include/FL/Enumerations.H	/^  FL_BACKGROUND2_COLOR  = 7,$/;"	e	enum:Fl_Color
FL_BACKGROUND_COLOR	/usr/include/FL/Enumerations.H	/^  FL_BACKGROUND_COLOR	= 49,	\/\/ 'R' default background color$/;"	e	enum:Fl_Color
FL_BAR_CHART	/usr/include/FL/Fl_Chart.H	36;"	d
FL_BEEP_DEFAULT	/usr/include/FL/fl_ask.H	/^  FL_BEEP_DEFAULT = 0,$/;"	e	enum:__anon18
FL_BEEP_ERROR	/usr/include/FL/fl_ask.H	/^  FL_BEEP_ERROR,$/;"	e	enum:__anon18
FL_BEEP_MESSAGE	/usr/include/FL/fl_ask.H	/^  FL_BEEP_MESSAGE,$/;"	e	enum:__anon18
FL_BEEP_NOTIFICATION	/usr/include/FL/fl_ask.H	/^  FL_BEEP_NOTIFICATION$/;"	e	enum:__anon18
FL_BEEP_PASSWORD	/usr/include/FL/fl_ask.H	/^  FL_BEEP_PASSWORD,$/;"	e	enum:__anon18
FL_BEEP_QUESTION	/usr/include/FL/fl_ask.H	/^  FL_BEEP_QUESTION,$/;"	e	enum:__anon18
FL_BLACK	/usr/include/FL/Enumerations.H	/^  FL_BLACK		= 56,$/;"	e	enum:Fl_Color
FL_BLUE	/usr/include/FL/Enumerations.H	/^  FL_BLUE		= 216,$/;"	e	enum:Fl_Color
FL_BOLD	/usr/include/FL/Enumerations.H	/^  FL_BOLD		= 1,	\/\/ add this to helvetica, courier, or times$/;"	e	enum:Fl_Font
FL_BOLDITALIC_STYLE	/usr/include/FL/forms.H	121;"	d
FL_BOLD_STYLE	/usr/include/FL/forms.H	119;"	d
FL_BORDER_BOX	/usr/include/FL/Enumerations.H	/^  FL_BORDER_BOX,	_FL_SHADOW_BOX,$/;"	e	enum:Fl_Boxtype
FL_BORDER_FRAME	/usr/include/FL/Enumerations.H	/^  FL_BORDER_FRAME,	_FL_SHADOW_FRAME,$/;"	e	enum:Fl_Boxtype
FL_BOTTOM_BCOL	/usr/include/FL/forms.H	68;"	d
FL_BOUND_WIDTH	/usr/include/FL/forms.H	159;"	d
FL_BUTTON	/usr/include/FL/Enumerations.H	151;"	d
FL_BUTTON1	/usr/include/FL/Enumerations.H	147;"	d
FL_BUTTON2	/usr/include/FL/Enumerations.H	148;"	d
FL_BUTTON3	/usr/include/FL/Enumerations.H	149;"	d
FL_BUTTONS	/usr/include/FL/Enumerations.H	150;"	d
FL_BackSpace	/usr/include/FL/Enumerations.H	99;"	d
FL_Button	/usr/include/FL/Enumerations.H	98;"	d
FL_CANCEL	/usr/include/FL/forms.H	58;"	d
FL_CAPS_LOCK	/usr/include/FL/Enumerations.H	141;"	d
FL_CAP_FLAT	/usr/include/FL/fl_draw.H	/^  FL_CAP_FLAT	= 0x100,$/;"	e	enum:__anon34
FL_CAP_ROUND	/usr/include/FL/fl_draw.H	/^  FL_CAP_ROUND	= 0x200,$/;"	e	enum:__anon34
FL_CAP_SQUARE	/usr/include/FL/fl_draw.H	/^  FL_CAP_SQUARE	= 0x300,$/;"	e	enum:__anon34
FL_CHART_ENTRY	/usr/include/FL/Fl_Chart.H	/^struct FL_CHART_ENTRY {$/;"	s
FL_CHART_LABEL_MAX	/usr/include/FL/Fl_Chart.H	47;"	d
FL_CHART_MAX	/usr/include/FL/Fl_Chart.H	46;"	d
FL_CIRCLE_BOX	/usr/include/FL/Enumerations.H	245;"	d
FL_CLOSE	/usr/include/FL/Enumerations.H	/^  FL_CLOSE		= 10,$/;"	e	enum:Fl_Event
FL_CLOSE	/usr/include/FL/forms.H	61;"	d
FL_CMD_OPT	/usr/include/FL/forms.H	167;"	d
FL_COL1	/usr/include/FL/forms.H	64;"	d
FL_COLOR	/usr/include/FL/forms.H	/^typedef int FL_COLOR;$/;"	t
FL_COLOR_CUBE	/usr/include/FL/Enumerations.H	357;"	d
FL_COMMAND	/usr/include/FL/Enumerations.H	154;"	d
FL_COMMAND	/usr/include/FL/Enumerations.H	156;"	d
FL_CONTINUOUS_FREE	/usr/include/FL/Fl_Free.H	38;"	d
FL_COURIER	/usr/include/FL/Enumerations.H	/^  FL_COURIER,$/;"	e	enum:Fl_Font
FL_COURIER_BOLD	/usr/include/FL/Enumerations.H	/^  FL_COURIER_BOLD,$/;"	e	enum:Fl_Font
FL_COURIER_BOLD_ITALIC	/usr/include/FL/Enumerations.H	/^  FL_COURIER_BOLD_ITALIC,$/;"	e	enum:Fl_Font
FL_COURIER_ITALIC	/usr/include/FL/Enumerations.H	/^  FL_COURIER_ITALIC,$/;"	e	enum:Fl_Font
FL_CTRL	/usr/include/FL/Enumerations.H	142;"	d
FL_CURSOR_ARROW	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_ARROW	= 35,$/;"	e	enum:Fl_Cursor
FL_CURSOR_CROSS	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_CROSS	= 66,$/;"	e	enum:Fl_Cursor
FL_CURSOR_DEFAULT	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_DEFAULT	= 0,$/;"	e	enum:Fl_Cursor
FL_CURSOR_E	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_E		= 49,$/;"	e	enum:Fl_Cursor
FL_CURSOR_HAND	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_HAND	= 31,$/;"	e	enum:Fl_Cursor
FL_CURSOR_HELP	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_HELP	= 47,$/;"	e	enum:Fl_Cursor
FL_CURSOR_INSERT	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_INSERT	= 77,$/;"	e	enum:Fl_Cursor
FL_CURSOR_MOVE	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_MOVE	= 27,$/;"	e	enum:Fl_Cursor
FL_CURSOR_N	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_N		= 70,$/;"	e	enum:Fl_Cursor
FL_CURSOR_NE	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_NE		= 69,$/;"	e	enum:Fl_Cursor
FL_CURSOR_NESW	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_NESW	= 81,$/;"	e	enum:Fl_Cursor
FL_CURSOR_NONE	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_NONE	= 255,$/;"	e	enum:Fl_Cursor
FL_CURSOR_NS	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_NS		= 78,$/;"	e	enum:Fl_Cursor
FL_CURSOR_NW	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_NW		= 68$/;"	e	enum:Fl_Cursor
FL_CURSOR_NWSE	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_NWSE	= 80,$/;"	e	enum:Fl_Cursor
FL_CURSOR_S	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_S		= 9,$/;"	e	enum:Fl_Cursor
FL_CURSOR_SE	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_SE		= 8,$/;"	e	enum:Fl_Cursor
FL_CURSOR_SW	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_SW		= 7,$/;"	e	enum:Fl_Cursor
FL_CURSOR_W	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_W		= 36,$/;"	e	enum:Fl_Cursor
FL_CURSOR_WAIT	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_WAIT	= 76,$/;"	e	enum:Fl_Cursor
FL_CURSOR_WE	/usr/include/FL/Enumerations.H	/^  FL_CURSOR_WE		= 79,$/;"	e	enum:Fl_Cursor
FL_CYAN	/usr/include/FL/Enumerations.H	/^  FL_CYAN		= 223,$/;"	e	enum:Fl_Color
FL_Caps_Lock	/usr/include/FL/Enumerations.H	127;"	d
FL_Control_L	/usr/include/FL/Enumerations.H	125;"	d
FL_Control_R	/usr/include/FL/Enumerations.H	126;"	d
FL_Coord	/usr/include/FL/forms.H	/^typedef int FL_Coord;$/;"	t
FL_DAMAGE_ALL	/usr/include/FL/Enumerations.H	/^  FL_DAMAGE_ALL      = 0x80$/;"	e	enum:Fl_Damage
FL_DAMAGE_CHILD	/usr/include/FL/Enumerations.H	/^  FL_DAMAGE_CHILD    = 0x01,$/;"	e	enum:Fl_Damage
FL_DAMAGE_EXPOSE	/usr/include/FL/Enumerations.H	/^  FL_DAMAGE_EXPOSE   = 0x02,$/;"	e	enum:Fl_Damage
FL_DAMAGE_OVERLAY	/usr/include/FL/Enumerations.H	/^  FL_DAMAGE_OVERLAY  = 0x08,$/;"	e	enum:Fl_Damage
FL_DAMAGE_SCROLL	/usr/include/FL/Enumerations.H	/^  FL_DAMAGE_SCROLL   = 0x04,$/;"	e	enum:Fl_Damage
FL_DAMAGE_USER1	/usr/include/FL/Enumerations.H	/^  FL_DAMAGE_USER1    = 0x10,$/;"	e	enum:Fl_Damage
FL_DAMAGE_USER2	/usr/include/FL/Enumerations.H	/^  FL_DAMAGE_USER2    = 0x20,$/;"	e	enum:Fl_Damage
FL_DARK1	/usr/include/FL/Enumerations.H	/^  FL_DARK1		= 47,	\/\/ 'P'$/;"	e	enum:Fl_Color
FL_DARK2	/usr/include/FL/Enumerations.H	/^  FL_DARK2		= 45,   \/\/ 'N'$/;"	e	enum:Fl_Color
FL_DARK3	/usr/include/FL/Enumerations.H	/^  FL_DARK3		= 39,	\/\/ 'H'$/;"	e	enum:Fl_Color
FL_DARKCYAN	/usr/include/FL/forms.H	94;"	d
FL_DARKGOLD	/usr/include/FL/forms.H	91;"	d
FL_DARKTOMATO	/usr/include/FL/forms.H	95;"	d
FL_DARK_BLUE	/usr/include/FL/Enumerations.H	/^  FL_DARK_BLUE		= 136,$/;"	e	enum:Fl_Color
FL_DARK_CYAN	/usr/include/FL/Enumerations.H	/^  FL_DARK_CYAN		= 140,$/;"	e	enum:Fl_Color
FL_DARK_GREEN	/usr/include/FL/Enumerations.H	/^  FL_DARK_GREEN		= 60,$/;"	e	enum:Fl_Color
FL_DARK_MAGENTA	/usr/include/FL/Enumerations.H	/^  FL_DARK_MAGENTA	= 152,$/;"	e	enum:Fl_Color
FL_DARK_RED	/usr/include/FL/Enumerations.H	/^  FL_DARK_RED		= 72,$/;"	e	enum:Fl_Color
FL_DARK_YELLOW	/usr/include/FL/Enumerations.H	/^  FL_DARK_YELLOW	= 76,$/;"	e	enum:Fl_Color
FL_DASH	/usr/include/FL/fl_draw.H	/^  FL_DASH	= 1,$/;"	e	enum:__anon34
FL_DASHDOT	/usr/include/FL/fl_draw.H	/^  FL_DASHDOT	= 3,$/;"	e	enum:__anon34
FL_DASHDOTDOT	/usr/include/FL/fl_draw.H	/^  FL_DASHDOTDOT	= 4,$/;"	e	enum:__anon34
FL_DEACTIVATE	/usr/include/FL/Enumerations.H	/^  FL_DEACTIVATE		= 13,$/;"	e	enum:Fl_Event
FL_DEFAULT_CURSOR	/usr/include/FL/forms.H	599;"	d
FL_DEFAULT_FONT	/usr/include/FL/forms.H	152;"	d
FL_DEFAULT_SIZE	/usr/include/FL/forms.H	143;"	d
FL_DEPTH	/usr/include/FL/Enumerations.H	/^  FL_DEPTH	= 16,$/;"	e	enum:Fl_Mode
FL_DIAL_COL1	/usr/include/FL/forms.H	603;"	d
FL_DIAL_COL2	/usr/include/FL/forms.H	604;"	d
FL_DIAMOND_BOX	/usr/include/FL/Enumerations.H	246;"	d
FL_DIAMOND_DOWN_BOX	/usr/include/FL/Enumerations.H	202;"	d
FL_DIAMOND_UP_BOX	/usr/include/FL/Enumerations.H	201;"	d
FL_DIGITAL_CLOCK	/usr/include/FL/Fl_Clock.H	39;"	d
FL_DND_DRAG	/usr/include/FL/Enumerations.H	/^  FL_DND_DRAG		= 21,$/;"	e	enum:Fl_Event
FL_DND_ENTER	/usr/include/FL/Enumerations.H	/^  FL_DND_ENTER		= 20,$/;"	e	enum:Fl_Event
FL_DND_LEAVE	/usr/include/FL/Enumerations.H	/^  FL_DND_LEAVE		= 22,$/;"	e	enum:Fl_Event
FL_DND_RELEASE	/usr/include/FL/Enumerations.H	/^  FL_DND_RELEASE	= 23$/;"	e	enum:Fl_Event
FL_DOT	/usr/include/FL/fl_draw.H	/^  FL_DOT	= 2,$/;"	e	enum:__anon34
FL_DOUBLE	/usr/include/FL/Enumerations.H	/^  FL_DOUBLE	= 2,$/;"	e	enum:Fl_Mode
FL_DOUBLE_WINDOW	/usr/include/FL/Fl_Window.H	34;"	d
FL_DOWN_BOX	/usr/include/FL/Enumerations.H	/^  FL_UP_BOX,		FL_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
FL_DOWN_FRAME	/usr/include/FL/Enumerations.H	/^  FL_UP_FRAME,		FL_DOWN_FRAME,$/;"	e	enum:Fl_Boxtype
FL_DRAG	/usr/include/FL/Enumerations.H	/^  FL_DRAG		= 5,$/;"	e	enum:Fl_Event
FL_DRAW	/usr/include/FL/Fl_Free.H	56;"	d
FL_DROPLIST_CHOICE	/usr/include/FL/forms.H	541;"	d
FL_Delete	/usr/include/FL/Enumerations.H	132;"	d
FL_Down	/usr/include/FL/Enumerations.H	109;"	d
FL_EMBOSSED_BOX	/usr/include/FL/Enumerations.H	/^  FL_ENGRAVED_BOX,	FL_EMBOSSED_BOX,$/;"	e	enum:Fl_Boxtype
FL_EMBOSSED_FRAME	/usr/include/FL/Enumerations.H	/^  FL_ENGRAVED_FRAME,	FL_EMBOSSED_FRAME,$/;"	e	enum:Fl_Boxtype
FL_EMBOSSED_LABEL	/usr/include/FL/Enumerations.H	266;"	d
FL_EMBOSSED_STYLE	/usr/include/FL/forms.H	134;"	d
FL_ENGRAVED_BOX	/usr/include/FL/Enumerations.H	/^  FL_ENGRAVED_BOX,	FL_EMBOSSED_BOX,$/;"	e	enum:Fl_Boxtype
FL_ENGRAVED_FRAME	/usr/include/FL/Enumerations.H	/^  FL_ENGRAVED_FRAME,	FL_EMBOSSED_FRAME,$/;"	e	enum:Fl_Boxtype
FL_ENGRAVED_LABEL	/usr/include/FL/Enumerations.H	264;"	d
FL_ENGRAVED_STYLE	/usr/include/FL/forms.H	133;"	d
FL_ENTER	/usr/include/FL/Enumerations.H	/^  FL_ENTER		= 3,$/;"	e	enum:Fl_Event
FL_EXCEPT	/usr/include/FL/Enumerations.H	/^  FL_EXCEPT = 8$/;"	e	enum:__anon26
FL_EXPORT	/usr/include/FL/Fl_Export.H	37;"	d
FL_EXPORT	/usr/include/FL/Fl_Export.H	39;"	d
FL_EXPORT	/usr/include/FL/Fl_Export.H	42;"	d
FL_End	/usr/include/FL/Enumerations.H	112;"	d
FL_Enter	/usr/include/FL/Enumerations.H	101;"	d
FL_Escape	/usr/include/FL/Enumerations.H	104;"	d
FL_F	/usr/include/FL/Enumerations.H	121;"	d
FL_FAKE_SINGLE	/usr/include/FL/Enumerations.H	/^  FL_FAKE_SINGLE = 512	\/\/ Fake single buffered windows using double-buffer$/;"	e	enum:Fl_Mode
FL_FILENAME_H	/usr/include/FL/filename.H	29;"	d
FL_FILLED_CHART	/usr/include/FL/Fl_Chart.H	44;"	d
FL_FILL_CHART	/usr/include/FL/Fl_Chart.H	39;"	d
FL_FILL_DIAL	/usr/include/FL/Fl_Dial.H	38;"	d
FL_FIXEDBOLDITALIC_STYLE	/usr/include/FL/forms.H	125;"	d
FL_FIXEDBOLD_STYLE	/usr/include/FL/forms.H	123;"	d
FL_FIXEDITALIC_STYLE	/usr/include/FL/forms.H	124;"	d
FL_FIXED_STYLE	/usr/include/FL/forms.H	122;"	d
FL_FIX_SIZE	/usr/include/FL/forms.H	/^  FL_FIX_SIZE =(1<<15)	\/\/ force off resizable$/;"	e	enum:__anon15
FL_FLAT_BOX	/usr/include/FL/Enumerations.H	/^  FL_NO_BOX = 0,	FL_FLAT_BOX,$/;"	e	enum:Fl_Boxtype
FL_FLOAT_INPUT	/usr/include/FL/Fl_Input_.H	36;"	d
FL_FOCUS	/usr/include/FL/Enumerations.H	/^  FL_FOCUS		= 6,$/;"	e	enum:Fl_Event
FL_FORCE_POSITION	/usr/include/FL/Fl_Window.H	/^    FL_FORCE_POSITION = 16,$/;"	e	enum:Fl_Window::__anon5
FL_FOREGROUND_COLOR	/usr/include/FL/Enumerations.H	/^  FL_FOREGROUND_COLOR   = 0,$/;"	e	enum:Fl_Color
FL_FORM	/usr/include/FL/forms.H	/^typedef Fl_Window FL_FORM;$/;"	t
FL_FRAME	/usr/include/FL/Enumerations.H	243;"	d
FL_FRAME_BOX	/usr/include/FL/Enumerations.H	244;"	d
FL_FREEMEM	/usr/include/FL/Fl_Free.H	58;"	d
FL_FREEZE	/usr/include/FL/Fl_Free.H	59;"	d
FL_FREE_BOXTYPE	/usr/include/FL/Enumerations.H	/^  FL_FREE_BOXTYPE$/;"	e	enum:Fl_Boxtype
FL_FREE_COL1	/usr/include/FL/forms.H	72;"	d
FL_FREE_COL10	/usr/include/FL/forms.H	81;"	d
FL_FREE_COL11	/usr/include/FL/forms.H	82;"	d
FL_FREE_COL12	/usr/include/FL/forms.H	83;"	d
FL_FREE_COL13	/usr/include/FL/forms.H	84;"	d
FL_FREE_COL14	/usr/include/FL/forms.H	85;"	d
FL_FREE_COL15	/usr/include/FL/forms.H	86;"	d
FL_FREE_COL16	/usr/include/FL/forms.H	87;"	d
FL_FREE_COL2	/usr/include/FL/forms.H	73;"	d
FL_FREE_COL3	/usr/include/FL/forms.H	74;"	d
FL_FREE_COL4	/usr/include/FL/forms.H	75;"	d
FL_FREE_COL5	/usr/include/FL/forms.H	76;"	d
FL_FREE_COL6	/usr/include/FL/forms.H	77;"	d
FL_FREE_COL7	/usr/include/FL/forms.H	78;"	d
FL_FREE_COL8	/usr/include/FL/forms.H	79;"	d
FL_FREE_COL9	/usr/include/FL/forms.H	80;"	d
FL_FREE_COLOR	/usr/include/FL/Enumerations.H	352;"	d
FL_FREE_FONT	/usr/include/FL/Enumerations.H	/^  FL_FREE_FONT		= 16,	\/\/ first one to allocate$/;"	e	enum:Fl_Font
FL_FREE_LABELTYPE	/usr/include/FL/Enumerations.H	/^  FL_FREE_LABELTYPE$/;"	e	enum:Fl_Labeltype
FL_FREE_SIZE	/usr/include/FL/forms.H	/^  FL_FREE_SIZE=(1<<14),	\/\/ force resizable$/;"	e	enum:__anon15
FL_FULLBORDER	/usr/include/FL/forms.H	/^  FL_FULLBORDER,$/;"	e	enum:__anon16
FL_F_Last	/usr/include/FL/Enumerations.H	122;"	d
FL_GRAY	/usr/include/FL/Enumerations.H	356;"	d
FL_GRAY0	/usr/include/FL/Enumerations.H	/^  FL_GRAY0		= 32,	\/\/ 'A'$/;"	e	enum:Fl_Color
FL_GRAY_RAMP	/usr/include/FL/Enumerations.H	354;"	d
FL_GREEN	/usr/include/FL/Enumerations.H	/^  FL_GREEN		= 63,$/;"	e	enum:Fl_Color
FL_GTK_DOWN_BOX	/usr/include/FL/Enumerations.H	221;"	d
FL_GTK_DOWN_FRAME	/usr/include/FL/Enumerations.H	223;"	d
FL_GTK_ROUND_DOWN_BOX	/usr/include/FL/Enumerations.H	229;"	d
FL_GTK_ROUND_UP_BOX	/usr/include/FL/Enumerations.H	228;"	d
FL_GTK_THIN_DOWN_BOX	/usr/include/FL/Enumerations.H	225;"	d
FL_GTK_THIN_DOWN_FRAME	/usr/include/FL/Enumerations.H	227;"	d
FL_GTK_THIN_UP_BOX	/usr/include/FL/Enumerations.H	224;"	d
FL_GTK_THIN_UP_FRAME	/usr/include/FL/Enumerations.H	226;"	d
FL_GTK_UP_BOX	/usr/include/FL/Enumerations.H	220;"	d
FL_GTK_UP_FRAME	/usr/include/FL/Enumerations.H	222;"	d
FL_HANDLEPTR	/usr/include/FL/Fl_Free.H	/^typedef int (*FL_HANDLEPTR)(Fl_Widget *, int , float, float, char);$/;"	t
FL_HELVETICA	/usr/include/FL/Enumerations.H	/^  FL_HELVETICA		= 0,$/;"	e	enum:Fl_Font
FL_HELVETICA_BOLD	/usr/include/FL/Enumerations.H	/^  FL_HELVETICA_BOLD,$/;"	e	enum:Fl_Font
FL_HELVETICA_BOLD_ITALIC	/usr/include/FL/Enumerations.H	/^  FL_HELVETICA_BOLD_ITALIC,$/;"	e	enum:Fl_Font
FL_HELVETICA_ITALIC	/usr/include/FL/Enumerations.H	/^  FL_HELVETICA_ITALIC,$/;"	e	enum:Fl_Font
FL_HIDDEN_BUTTON	/usr/include/FL/Fl_Button.H	39;"	d
FL_HIDDEN_INPUT	/usr/include/FL/Fl_Input_.H	38;"	d
FL_HIDDEN_RET_BUTTON	/usr/include/FL/forms.H	480;"	d
FL_HIDDEN_TIMER	/usr/include/FL/Fl_Timer.H	38;"	d
FL_HIDE	/usr/include/FL/Enumerations.H	/^  FL_HIDE		= 15,$/;"	e	enum:Fl_Event
FL_HOLD_BROWSER	/usr/include/FL/Fl_Browser_.H	45;"	d
FL_HORBAR_CHART	/usr/include/FL/Fl_Chart.H	37;"	d
FL_HORIZONTAL	/usr/include/FL/Fl_Valuator.H	37;"	d
FL_HOR_BROWSER_SLIDER	/usr/include/FL/forms.H	781;"	d
FL_HOR_FILL_SLIDER	/usr/include/FL/Fl_Slider.H	39;"	d
FL_HOR_NICE_SLIDER	/usr/include/FL/Fl_Slider.H	41;"	d
FL_HOR_SLIDER	/usr/include/FL/Fl_Slider.H	37;"	d
FL_HUGE_FONT	/usr/include/FL/forms.H	149;"	d
FL_HUGE_SIZE	/usr/include/FL/forms.H	142;"	d
FL_Help	/usr/include/FL/Enumerations.H	116;"	d
FL_Home	/usr/include/FL/Enumerations.H	105;"	d
FL_ICON_COLOR	/usr/include/FL/Fl_File_Icon.H	42;"	d
FL_IGNORE	/usr/include/FL/forms.H	60;"	d
FL_IMAGE_WITH_ALPHA	/usr/include/FL/Enumerations.H	430;"	d
FL_INACTIVE	/usr/include/FL/forms.H	70;"	d
FL_INACTIVE_COL	/usr/include/FL/forms.H	71;"	d
FL_INACTIVE_COLOR	/usr/include/FL/Enumerations.H	/^  FL_INACTIVE_COLOR	= 8,$/;"	e	enum:Fl_Color
FL_INDEX	/usr/include/FL/Enumerations.H	/^  FL_INDEX	= 1,$/;"	e	enum:Fl_Mode
FL_INDIANRED	/usr/include/FL/forms.H	89;"	d
FL_INOUT_BUTTON	/usr/include/FL/forms.H	478;"	d
FL_INPUT_FREE	/usr/include/FL/Fl_Free.H	37;"	d
FL_INPUT_READONLY	/usr/include/FL/Fl_Input_.H	42;"	d
FL_INPUT_TYPE	/usr/include/FL/Fl_Input_.H	41;"	d
FL_INPUT_WRAP	/usr/include/FL/Fl_Input_.H	45;"	d
FL_INT_INPUT	/usr/include/FL/Fl_Input_.H	37;"	d
FL_INVALID	/usr/include/FL/forms.H	59;"	d
FL_INVALID_STYLE	/usr/include/FL/forms.H	117;"	d
FL_INVISIBLE_CURSOR	/usr/include/FL/forms.H	598;"	d
FL_IO_CALLBACK	/usr/include/FL/forms.H	/^typedef void (*FL_IO_CALLBACK) (int, void*);$/;"	t
FL_ITALIC	/usr/include/FL/Enumerations.H	/^  FL_ITALIC		= 2	\/\/ add this to helvetica, courier, or times$/;"	e	enum:Fl_Font
FL_ITALIC_STYLE	/usr/include/FL/forms.H	120;"	d
FL_Insert	/usr/include/FL/Enumerations.H	114;"	d
FL_JOIN_BEVEL	/usr/include/FL/fl_draw.H	/^  FL_JOIN_BEVEL	= 0x3000$/;"	e	enum:__anon34
FL_JOIN_MITER	/usr/include/FL/fl_draw.H	/^  FL_JOIN_MITER	= 0x1000,$/;"	e	enum:__anon34
FL_JOIN_ROUND	/usr/include/FL/fl_draw.H	/^  FL_JOIN_ROUND	= 0x2000,$/;"	e	enum:__anon34
FL_KEYBOARD	/usr/include/FL/Enumerations.H	84;"	d
FL_KEYDOWN	/usr/include/FL/Enumerations.H	/^  FL_KEYDOWN		= 8,$/;"	e	enum:Fl_Event
FL_KEYUP	/usr/include/FL/Enumerations.H	/^  FL_KEYUP		= 9,$/;"	e	enum:Fl_Event
FL_KP	/usr/include/FL/Enumerations.H	118;"	d
FL_KP_Enter	/usr/include/FL/Enumerations.H	119;"	d
FL_KP_Last	/usr/include/FL/Enumerations.H	120;"	d
FL_LARGE_FONT	/usr/include/FL/forms.H	148;"	d
FL_LARGE_SIZE	/usr/include/FL/forms.H	141;"	d
FL_LCOL	/usr/include/FL/forms.H	63;"	d
FL_LEAVE	/usr/include/FL/Enumerations.H	/^  FL_LEAVE		= 4,$/;"	e	enum:Fl_Event
FL_LEFTMOUSE	/usr/include/FL/forms.H	109;"	d
FL_LEFT_BCOL	/usr/include/FL/forms.H	66;"	d
FL_LEFT_MOUSE	/usr/include/FL/Enumerations.H	135;"	d
FL_LIGHT1	/usr/include/FL/Enumerations.H	/^  FL_LIGHT1		= 50,	\/\/ 'S'$/;"	e	enum:Fl_Color
FL_LIGHT2	/usr/include/FL/Enumerations.H	/^  FL_LIGHT2		= 52,	\/\/ 'U'$/;"	e	enum:Fl_Color
FL_LIGHT3	/usr/include/FL/Enumerations.H	/^  FL_LIGHT3		= 54,	\/\/ 'W'$/;"	e	enum:Fl_Color
FL_LINE_CHART	/usr/include/FL/Fl_Chart.H	38;"	d
FL_LINE_DIAL	/usr/include/FL/Fl_Dial.H	37;"	d
FL_Left	/usr/include/FL/Enumerations.H	106;"	d
FL_MAGENTA	/usr/include/FL/Enumerations.H	/^  FL_MAGENTA		= 248,$/;"	e	enum:Fl_Color
FL_MAJOR_VERSION	/usr/include/FL/Enumerations.H	48;"	d
FL_MBUTTON1	/usr/include/FL/forms.H	108;"	d
FL_MBUTTON2	/usr/include/FL/forms.H	110;"	d
FL_MBUTTON3	/usr/include/FL/forms.H	112;"	d
FL_MBUTTON4	/usr/include/FL/forms.H	114;"	d
FL_MBUTTON5	/usr/include/FL/forms.H	115;"	d
FL_MCOL	/usr/include/FL/forms.H	65;"	d
FL_MEDIUM_FONT	/usr/include/FL/forms.H	147;"	d
FL_MEDIUM_SIZE	/usr/include/FL/forms.H	140;"	d
FL_MENU_BOX	/usr/include/FL/Fl_Menu_Item.H	/^  FL_MENU_BOX	= FL_MENU_TOGGLE,$/;"	e	enum:__anon10
FL_MENU_BUTTON	/usr/include/FL/forms.H	482;"	d
FL_MENU_CHECK	/usr/include/FL/Fl_Menu_Item.H	/^  FL_MENU_CHECK	= FL_MENU_VALUE,$/;"	e	enum:__anon10
FL_MENU_DIVIDER	/usr/include/FL/Fl_Menu_Item.H	/^  FL_MENU_DIVIDER = 0x80,$/;"	e	enum:__anon9
FL_MENU_HORIZONTAL	/usr/include/FL/Fl_Menu_Item.H	/^  FL_MENU_HORIZONTAL = 0x100$/;"	e	enum:__anon9
FL_MENU_INACTIVE	/usr/include/FL/Fl_Menu_Item.H	/^  FL_MENU_INACTIVE = 1,$/;"	e	enum:__anon9
FL_MENU_INVISIBLE	/usr/include/FL/Fl_Menu_Item.H	/^  FL_MENU_INVISIBLE = 0x10,$/;"	e	enum:__anon9
FL_MENU_RADIO	/usr/include/FL/Fl_Menu_Item.H	/^  FL_MENU_RADIO = 8,$/;"	e	enum:__anon9
FL_MENU_TOGGLE	/usr/include/FL/Fl_Menu_Item.H	/^  FL_MENU_TOGGLE= 2,$/;"	e	enum:__anon9
FL_MENU_VALUE	/usr/include/FL/Fl_Menu_Item.H	/^  FL_MENU_VALUE = 4,$/;"	e	enum:__anon9
FL_META	/usr/include/FL/Enumerations.H	145;"	d
FL_MIDDLEMOUSE	/usr/include/FL/forms.H	111;"	d
FL_MIDDLE_MOUSE	/usr/include/FL/Enumerations.H	136;"	d
FL_MINOR_VERSION	/usr/include/FL/Enumerations.H	49;"	d
FL_MODAL	/usr/include/FL/Fl_Window.H	/^    FL_MODAL = 64,$/;"	e	enum:Fl_Window::__anon5
FL_MOUSE	/usr/include/FL/Fl_Free.H	55;"	d
FL_MOUSEWHEEL	/usr/include/FL/Enumerations.H	/^  FL_MOUSEWHEEL		= 19,$/;"	e	enum:Fl_Event
FL_MOVE	/usr/include/FL/Enumerations.H	/^  FL_MOVE		= 11,$/;"	e	enum:Fl_Event
FL_MULTILINE_INPUT	/usr/include/FL/Fl_Input_.H	39;"	d
FL_MULTILINE_INPUT_WRAP	/usr/include/FL/Fl_Input_.H	46;"	d
FL_MULTILINE_OUTPUT	/usr/include/FL/Fl_Input_.H	44;"	d
FL_MULTILINE_OUTPUT_WRAP	/usr/include/FL/Fl_Input_.H	47;"	d
FL_MULTISAMPLE	/usr/include/FL/Enumerations.H	/^  FL_MULTISAMPLE= 128,$/;"	e	enum:Fl_Mode
FL_MULTI_BROWSER	/usr/include/FL/Fl_Browser_.H	46;"	d
FL_Menu	/usr/include/FL/Enumerations.H	115;"	d
FL_Meta_L	/usr/include/FL/Enumerations.H	128;"	d
FL_Meta_R	/usr/include/FL/Enumerations.H	129;"	d
FL_NAMES_H	/usr/include/FL/names.h	31;"	d
FL_NOBORDER	/usr/include/FL/Fl_Window.H	/^    FL_NOBORDER = 8,$/;"	e	enum:Fl_Window::__anon5
FL_NOBORDER	/usr/include/FL/forms.H	/^  FL_NOBORDER = 0,$/;"	e	enum:__anon16
FL_NONE	/usr/include/FL/forms.H	57;"	d
FL_NON_MODAL	/usr/include/FL/Fl_Window.H	/^    FL_NON_MODAL = 32,$/;"	e	enum:Fl_Window::__anon5
FL_NORMAL_BITMAP	/usr/include/FL/forms.H	397;"	d
FL_NORMAL_BROWSER	/usr/include/FL/Fl_Browser_.H	43;"	d
FL_NORMAL_BUTTON	/usr/include/FL/Fl_Button.H	36;"	d
FL_NORMAL_BUTTON	/usr/include/FL/forms.H	476;"	d
FL_NORMAL_CHOICE	/usr/include/FL/forms.H	539;"	d
FL_NORMAL_CHOICE2	/usr/include/FL/forms.H	540;"	d
FL_NORMAL_COUNTER	/usr/include/FL/Fl_Counter.H	38;"	d
FL_NORMAL_DIAL	/usr/include/FL/Fl_Dial.H	36;"	d
FL_NORMAL_FONT	/usr/include/FL/forms.H	146;"	d
FL_NORMAL_FONT1	/usr/include/FL/forms.H	150;"	d
FL_NORMAL_FONT2	/usr/include/FL/forms.H	151;"	d
FL_NORMAL_FREE	/usr/include/FL/Fl_Free.H	35;"	d
FL_NORMAL_INPUT	/usr/include/FL/Fl_Input_.H	35;"	d
FL_NORMAL_LABEL	/usr/include/FL/Enumerations.H	/^  FL_NORMAL_LABEL	= 0,$/;"	e	enum:Fl_Labeltype
FL_NORMAL_OUTPUT	/usr/include/FL/Fl_Input_.H	43;"	d
FL_NORMAL_PIXMAP	/usr/include/FL/forms.H	404;"	d
FL_NORMAL_POSITIONER	/usr/include/FL/forms.H	750;"	d
FL_NORMAL_STYLE	/usr/include/FL/forms.H	118;"	d
FL_NORMAL_TEXT	/usr/include/FL/forms.H	820;"	d
FL_NORMAL_TIMER	/usr/include/FL/Fl_Timer.H	36;"	d
FL_NO_BOX	/usr/include/FL/Enumerations.H	/^  FL_NO_BOX = 0,	FL_FLAT_BOX,$/;"	e	enum:Fl_Boxtype
FL_NO_EVENT	/usr/include/FL/Enumerations.H	/^  FL_NO_EVENT		= 0,$/;"	e	enum:Fl_Event
FL_NO_FRAME	/usr/include/FL/forms.H	102;"	d
FL_NO_LABEL	/usr/include/FL/Enumerations.H	/^  FL_NO_LABEL,$/;"	e	enum:Fl_Labeltype
FL_NUM_BLUE	/usr/include/FL/Enumerations.H	360;"	d
FL_NUM_FREE_COLOR	/usr/include/FL/Enumerations.H	353;"	d
FL_NUM_GRAY	/usr/include/FL/Enumerations.H	355;"	d
FL_NUM_GREEN	/usr/include/FL/Enumerations.H	359;"	d
FL_NUM_LOCK	/usr/include/FL/Enumerations.H	144;"	d
FL_NUM_RED	/usr/include/FL/Enumerations.H	358;"	d
FL_Num_Lock	/usr/include/FL/Enumerations.H	117;"	d
FL_OBJECT	/usr/include/FL/forms.H	/^typedef Fl_Widget FL_OBJECT;$/;"	t
FL_OFF	/usr/include/FL/forms.H	56;"	d
FL_OFLAT_BOX	/usr/include/FL/Enumerations.H	207;"	d
FL_OK	/usr/include/FL/forms.H	51;"	d
FL_ON	/usr/include/FL/forms.H	50;"	d
FL_ORCHID	/usr/include/FL/forms.H	93;"	d
FL_OSHADOW_BOX	/usr/include/FL/Enumerations.H	205;"	d
FL_OVAL3D_DOWNBOX	/usr/include/FL/forms.H	106;"	d
FL_OVAL3D_UPBOX	/usr/include/FL/forms.H	105;"	d
FL_OVAL_BOX	/usr/include/FL/Enumerations.H	204;"	d
FL_OVAL_FRAME	/usr/include/FL/Enumerations.H	206;"	d
FL_OVERRIDE	/usr/include/FL/Fl_Window.H	/^    FL_OVERRIDE = 256$/;"	e	enum:Fl_Window::__anon5
FL_ObjWin	/usr/include/FL/forms.H	/^inline Fl_Window* FL_ObjWin(Fl_Widget* o) {return o->window();}$/;"	f
FL_PALEGREEN	/usr/include/FL/forms.H	92;"	d
FL_PASTE	/usr/include/FL/Enumerations.H	/^  FL_PASTE		= 17,$/;"	e	enum:Fl_Event
FL_PATCH_VERSION	/usr/include/FL/Enumerations.H	50;"	d
FL_PATH_MAX	/usr/include/FL/filename.H	33;"	d
FL_PIE_CHART	/usr/include/FL/Fl_Chart.H	41;"	d
FL_PLACE_ASPECT	/usr/include/FL/forms.H	/^  FL_PLACE_ASPECT = 32,	\/\/ keep aspect ratio (ignored)$/;"	e	enum:__anon15
FL_PLACE_CENTER	/usr/include/FL/forms.H	/^  FL_PLACE_CENTER = 2,	\/\/ center of the screen$/;"	e	enum:__anon15
FL_PLACE_CENTERFREE	/usr/include/FL/forms.H	302;"	d
FL_PLACE_FREE	/usr/include/FL/forms.H	/^  FL_PLACE_FREE = 0,	\/\/ make resizable$/;"	e	enum:__anon15
FL_PLACE_FREE_CENTER	/usr/include/FL/forms.H	301;"	d
FL_PLACE_FULLSCREEN	/usr/include/FL/forms.H	/^  FL_PLACE_FULLSCREEN=64,\/\/ fill screen$/;"	e	enum:__anon15
FL_PLACE_GEOMETRY	/usr/include/FL/forms.H	/^  FL_PLACE_GEOMETRY =16,\/\/ fixed size and position$/;"	e	enum:__anon15
FL_PLACE_HOTSPOT	/usr/include/FL/forms.H	/^  FL_PLACE_HOTSPOT = 128,\/\/ enables hotspot$/;"	e	enum:__anon15
FL_PLACE_ICONIC	/usr/include/FL/forms.H	/^  FL_PLACE_ICONIC = 256,\/\/ iconic (ignored)$/;"	e	enum:__anon15
FL_PLACE_MOUSE	/usr/include/FL/forms.H	/^  FL_PLACE_MOUSE = 1,	\/\/ mouse centered on form$/;"	e	enum:__anon15
FL_PLACE_POSITION	/usr/include/FL/forms.H	/^  FL_PLACE_POSITION = 4,\/\/ fixed position, resizable$/;"	e	enum:__anon15
FL_PLACE_SIZE	/usr/include/FL/forms.H	/^  FL_PLACE_SIZE = 8,	\/\/ fixed size, normal fltk behavior$/;"	e	enum:__anon15
FL_PLASTIC_DOWN_BOX	/usr/include/FL/Enumerations.H	211;"	d
FL_PLASTIC_DOWN_FRAME	/usr/include/FL/Enumerations.H	213;"	d
FL_PLASTIC_ROUND_DOWN_BOX	/usr/include/FL/Enumerations.H	217;"	d
FL_PLASTIC_ROUND_UP_BOX	/usr/include/FL/Enumerations.H	216;"	d
FL_PLASTIC_THIN_DOWN_BOX	/usr/include/FL/Enumerations.H	215;"	d
FL_PLASTIC_THIN_UP_BOX	/usr/include/FL/Enumerations.H	214;"	d
FL_PLASTIC_UP_BOX	/usr/include/FL/Enumerations.H	210;"	d
FL_PLASTIC_UP_FRAME	/usr/include/FL/Enumerations.H	212;"	d
FL_PREEMPT	/usr/include/FL/forms.H	53;"	d
FL_PULLDOWN_MENU	/usr/include/FL/forms.H	718;"	d
FL_PUP_BOX	/usr/include/FL/Fl_Menu_Item.H	/^  FL_PUP_BOX	= FL_MENU_TOGGLE,$/;"	e	enum:__anon10
FL_PUP_CHECK	/usr/include/FL/Fl_Menu_Item.H	/^  FL_PUP_CHECK	= FL_MENU_VALUE,$/;"	e	enum:__anon10
FL_PUP_GRAY	/usr/include/FL/Fl_Menu_Item.H	/^  FL_PUP_GRAY	= FL_MENU_INACTIVE,$/;"	e	enum:__anon10
FL_PUP_GREY	/usr/include/FL/Fl_Menu_Item.H	/^  FL_PUP_GREY	= FL_MENU_INACTIVE,$/;"	e	enum:__anon10
FL_PUP_INACTIVE	/usr/include/FL/forms.H	101;"	d
FL_PUP_INVISIBLE	/usr/include/FL/Fl_Menu_Item.H	/^  FL_PUP_INVISIBLE = FL_MENU_INVISIBLE,$/;"	e	enum:__anon10
FL_PUP_NONE	/usr/include/FL/Fl_Menu_Item.H	/^  FL_PUP_NONE	= 0,$/;"	e	enum:__anon10
FL_PUP_RADIO	/usr/include/FL/Fl_Menu_Item.H	/^  FL_PUP_RADIO	= FL_MENU_RADIO,$/;"	e	enum:__anon10
FL_PUP_SUBMENU	/usr/include/FL/Fl_Menu_Item.H	/^  FL_PUP_SUBMENU = FL_SUBMENU_POINTER$/;"	e	enum:__anon10
FL_PUP_TOGGLE	/usr/include/FL/forms.H	100;"	d
FL_PUSH	/usr/include/FL/Enumerations.H	/^  FL_PUSH		= 1,$/;"	e	enum:Fl_Event
FL_PUSH_BUTTON	/usr/include/FL/forms.H	481;"	d
FL_PUSH_MENU	/usr/include/FL/forms.H	717;"	d
FL_Page_Down	/usr/include/FL/Enumerations.H	111;"	d
FL_Page_Up	/usr/include/FL/Enumerations.H	110;"	d
FL_Pause	/usr/include/FL/Enumerations.H	102;"	d
FL_Print	/usr/include/FL/Enumerations.H	113;"	d
FL_RADIO_BUTTON	/usr/include/FL/Fl_Button.H	38;"	d
FL_READ	/usr/include/FL/Enumerations.H	/^  FL_READ = 1,$/;"	e	enum:__anon26
FL_RED	/usr/include/FL/Enumerations.H	/^  FL_RED		= 88,$/;"	e	enum:Fl_Color
FL_RELEASE	/usr/include/FL/Enumerations.H	/^  FL_RELEASE		= 2,$/;"	e	enum:Fl_Event
FL_RESERVED_TYPE	/usr/include/FL/Fl_Widget.H	215;"	d
FL_RETURN_ALWAYS	/usr/include/FL/forms.H	157;"	d
FL_RETURN_BUTTON	/usr/include/FL/forms.H	479;"	d
FL_RETURN_CHANGED	/usr/include/FL/forms.H	155;"	d
FL_RETURN_END	/usr/include/FL/forms.H	156;"	d
FL_RETURN_END_CHANGED	/usr/include/FL/forms.H	154;"	d
FL_RFLAT_BOX	/usr/include/FL/Enumerations.H	197;"	d
FL_RGB	/usr/include/FL/Enumerations.H	/^  FL_RGB	= 0,$/;"	e	enum:Fl_Mode
FL_RGB8	/usr/include/FL/Enumerations.H	/^  FL_RGB8	= 64,$/;"	e	enum:Fl_Mode
FL_RIGHTMOUSE	/usr/include/FL/forms.H	113;"	d
FL_RIGHT_BCOL	/usr/include/FL/forms.H	69;"	d
FL_RIGHT_MOUSE	/usr/include/FL/Enumerations.H	137;"	d
FL_ROUNDED3D_DOWNBOX	/usr/include/FL/forms.H	104;"	d
FL_ROUNDED3D_UPBOX	/usr/include/FL/forms.H	103;"	d
FL_ROUNDED_BOX	/usr/include/FL/Enumerations.H	194;"	d
FL_ROUNDED_FRAME	/usr/include/FL/Enumerations.H	195;"	d
FL_ROUND_CLOCK	/usr/include/FL/Fl_Clock.H	37;"	d
FL_ROUND_DOWN_BOX	/usr/include/FL/Enumerations.H	189;"	d
FL_ROUND_UP_BOX	/usr/include/FL/Enumerations.H	188;"	d
FL_RSHADOW_BOX	/usr/include/FL/Enumerations.H	199;"	d
FL_Right	/usr/include/FL/Enumerations.H	108;"	d
FL_SCREEN	/usr/include/FL/Enumerations.H	/^  FL_SCREEN,$/;"	e	enum:Fl_Font
FL_SCREEN_BOLD	/usr/include/FL/Enumerations.H	/^  FL_SCREEN_BOLD,$/;"	e	enum:Fl_Font
FL_SCROLL_LOCK	/usr/include/FL/Enumerations.H	146;"	d
FL_SECRET_INPUT	/usr/include/FL/Fl_Input_.H	40;"	d
FL_SELECTIONCLEAR	/usr/include/FL/Enumerations.H	/^  FL_SELECTIONCLEAR	= 18,$/;"	e	enum:Fl_Event
FL_SELECTION_COLOR	/usr/include/FL/Enumerations.H	/^  FL_SELECTION_COLOR	= 15,$/;"	e	enum:Fl_Color
FL_SELECT_BROWSER	/usr/include/FL/Fl_Browser_.H	44;"	d
FL_SHADOW_BOX	/usr/include/FL/Enumerations.H	191;"	d
FL_SHADOW_FRAME	/usr/include/FL/Enumerations.H	192;"	d
FL_SHADOW_LABEL	/usr/include/FL/Enumerations.H	262;"	d
FL_SHADOW_STYLE	/usr/include/FL/forms.H	132;"	d
FL_SHIFT	/usr/include/FL/Enumerations.H	140;"	d
FL_SHORTCUT	/usr/include/FL/Enumerations.H	/^  FL_SHORTCUT		= 12,$/;"	e	enum:Fl_Event
FL_SHOW	/usr/include/FL/Enumerations.H	/^  FL_SHOW		= 16,$/;"	e	enum:Fl_Event
FL_SIMPLE_COUNTER	/usr/include/FL/Fl_Counter.H	39;"	d
FL_SINGLE	/usr/include/FL/Enumerations.H	/^  FL_SINGLE	= 0,$/;"	e	enum:Fl_Mode
FL_SLATEBLUE	/usr/include/FL/forms.H	90;"	d
FL_SLEEPING_FREE	/usr/include/FL/Fl_Free.H	36;"	d
FL_SLIDER_COL1	/usr/include/FL/forms.H	785;"	d
FL_SMALL_FONT	/usr/include/FL/forms.H	145;"	d
FL_SMALL_SIZE	/usr/include/FL/forms.H	138;"	d
FL_SOLID	/usr/include/FL/fl_draw.H	/^  FL_SOLID	= 0,$/;"	e	enum:__anon34
FL_SPECIALPIE_CHART	/usr/include/FL/Fl_Chart.H	42;"	d
FL_SPIKE_CHART	/usr/include/FL/Fl_Chart.H	40;"	d
FL_SQUARE_CLOCK	/usr/include/FL/Fl_Clock.H	36;"	d
FL_STENCIL	/usr/include/FL/Enumerations.H	/^  FL_STENCIL	= 32,$/;"	e	enum:Fl_Mode
FL_STEP	/usr/include/FL/Fl_Free.H	57;"	d
FL_STEREO	/usr/include/FL/Enumerations.H	/^  FL_STEREO     = 256,$/;"	e	enum:Fl_Mode
FL_SUBMENU	/usr/include/FL/Fl_Menu_Item.H	/^  FL_SUBMENU = 0x40,$/;"	e	enum:__anon9
FL_SUBMENU_POINTER	/usr/include/FL/Fl_Menu_Item.H	/^  FL_SUBMENU_POINTER = 0x20,$/;"	e	enum:__anon9
FL_SYMBOL	/usr/include/FL/Enumerations.H	/^  FL_SYMBOL,$/;"	e	enum:Fl_Font
FL_SYMBOL_LABEL	/usr/include/FL/Enumerations.H	260;"	d
FL_Scroll_Lock	/usr/include/FL/Enumerations.H	103;"	d
FL_Shift_L	/usr/include/FL/Enumerations.H	123;"	d
FL_Shift_R	/usr/include/FL/Enumerations.H	124;"	d
FL_TEXT_BUFFER_H	/usr/include/FL/Fl_Text_Buffer.H	31;"	d
FL_TEXT_DISPLAY_H	/usr/include/FL/Fl_Text_Display.H	31;"	d
FL_TEXT_EDITOR_ANY_STATE	/usr/include/FL/Fl_Text_Editor.H	37;"	d
FL_TEXT_EDITOR_H	/usr/include/FL/Fl_Text_Editor.H	32;"	d
FL_TEXT_MAX_EXP_CHAR_LEN	/usr/include/FL/Fl_Text_Buffer.H	35;"	d
FL_THAW	/usr/include/FL/Fl_Free.H	60;"	d
FL_THIN_DOWN_BOX	/usr/include/FL/Enumerations.H	/^  FL_THIN_UP_BOX,	FL_THIN_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
FL_THIN_DOWN_FRAME	/usr/include/FL/Enumerations.H	/^  FL_THIN_UP_FRAME,	FL_THIN_DOWN_FRAME,$/;"	e	enum:Fl_Boxtype
FL_THIN_UP_BOX	/usr/include/FL/Enumerations.H	/^  FL_THIN_UP_BOX,	FL_THIN_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
FL_THIN_UP_FRAME	/usr/include/FL/Enumerations.H	/^  FL_THIN_UP_FRAME,	FL_THIN_DOWN_FRAME,$/;"	e	enum:Fl_Boxtype
FL_TIMES	/usr/include/FL/Enumerations.H	/^  FL_TIMES,$/;"	e	enum:Fl_Font
FL_TIMESBOLDITALIC_STYLE	/usr/include/FL/forms.H	129;"	d
FL_TIMESBOLD_STYLE	/usr/include/FL/forms.H	127;"	d
FL_TIMESITALIC_STYLE	/usr/include/FL/forms.H	128;"	d
FL_TIMES_BOLD	/usr/include/FL/Enumerations.H	/^  FL_TIMES_BOLD,$/;"	e	enum:Fl_Font
FL_TIMES_BOLD_ITALIC	/usr/include/FL/Enumerations.H	/^  FL_TIMES_BOLD_ITALIC,$/;"	e	enum:Fl_Font
FL_TIMES_ITALIC	/usr/include/FL/Enumerations.H	/^  FL_TIMES_ITALIC,$/;"	e	enum:Fl_Font
FL_TIMES_STYLE	/usr/include/FL/forms.H	126;"	d
FL_TINY_FONT	/usr/include/FL/forms.H	144;"	d
FL_TINY_SIZE	/usr/include/FL/forms.H	137;"	d
FL_TOGGLE_BUTTON	/usr/include/FL/Fl_Button.H	37;"	d
FL_TOMATO	/usr/include/FL/forms.H	88;"	d
FL_TOP_BCOL	/usr/include/FL/forms.H	67;"	d
FL_TOUCH_BUTTON	/usr/include/FL/forms.H	477;"	d
FL_TOUCH_MENU	/usr/include/FL/forms.H	716;"	d
FL_TRANSIENT	/usr/include/FL/forms.H	/^  FL_TRANSIENT$/;"	e	enum:__anon16
FL_Tab	/usr/include/FL/Enumerations.H	100;"	d
FL_UNFOCUS	/usr/include/FL/Enumerations.H	/^  FL_UNFOCUS		= 7,$/;"	e	enum:Fl_Event
FL_UP_BOX	/usr/include/FL/Enumerations.H	/^  FL_UP_BOX,		FL_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
FL_UP_FRAME	/usr/include/FL/Enumerations.H	/^  FL_UP_FRAME,		FL_DOWN_FRAME,$/;"	e	enum:Fl_Boxtype
FL_Up	/usr/include/FL/Enumerations.H	107;"	d
FL_VALID	/usr/include/FL/forms.H	52;"	d
FL_VALUE_TIMER	/usr/include/FL/Fl_Timer.H	37;"	d
FL_VERSION	/usr/include/FL/Enumerations.H	51;"	d
FL_VERTICAL	/usr/include/FL/Fl_Valuator.H	36;"	d
FL_VERT_BROWSER_SLIDER	/usr/include/FL/forms.H	782;"	d
FL_VERT_FILL_SLIDER	/usr/include/FL/Fl_Slider.H	38;"	d
FL_VERT_NICE_SLIDER	/usr/include/FL/Fl_Slider.H	40;"	d
FL_VERT_SLIDER	/usr/include/FL/Fl_Slider.H	36;"	d
FL_WHEAT	/usr/include/FL/forms.H	96;"	d
FL_WHEN_CHANGED	/usr/include/FL/Enumerations.H	/^  FL_WHEN_CHANGED	= 1,$/;"	e	enum:Fl_When
FL_WHEN_ENTER_KEY	/usr/include/FL/Enumerations.H	/^  FL_WHEN_ENTER_KEY	= 8,$/;"	e	enum:Fl_When
FL_WHEN_ENTER_KEY_ALWAYS	/usr/include/FL/Enumerations.H	/^  FL_WHEN_ENTER_KEY_ALWAYS=10,$/;"	e	enum:Fl_When
FL_WHEN_ENTER_KEY_CHANGED	/usr/include/FL/Enumerations.H	/^  FL_WHEN_ENTER_KEY_CHANGED=11,$/;"	e	enum:Fl_When
FL_WHEN_NEEDED	/usr/include/FL/forms.H	55;"	d
FL_WHEN_NEVER	/usr/include/FL/Enumerations.H	/^  FL_WHEN_NEVER		= 0,$/;"	e	enum:Fl_When
FL_WHEN_NOT_CHANGED	/usr/include/FL/Enumerations.H	/^  FL_WHEN_NOT_CHANGED	= 2 \/\/ modifier bit to disable changed() test$/;"	e	enum:Fl_When
FL_WHEN_RELEASE	/usr/include/FL/Enumerations.H	/^  FL_WHEN_RELEASE	= 4,$/;"	e	enum:Fl_When
FL_WHEN_RELEASE_ALWAYS	/usr/include/FL/Enumerations.H	/^  FL_WHEN_RELEASE_ALWAYS= 6,$/;"	e	enum:Fl_When
FL_WHITE	/usr/include/FL/Enumerations.H	/^  FL_WHITE		= 255$/;"	e	enum:Fl_Color
FL_WINDOW	/usr/include/FL/Fl_Window.H	33;"	d
FL_WRITE	/usr/include/FL/Enumerations.H	/^  FL_WRITE = 4,$/;"	e	enum:__anon26
FL_YELLOW	/usr/include/FL/Enumerations.H	/^  FL_YELLOW		= 95,$/;"	e	enum:Fl_Color
FL_ZAPF_DINGBATS	/usr/include/FL/Enumerations.H	/^  FL_ZAPF_DINGBATS,$/;"	e	enum:Fl_Font
FL_gl_H	/usr/include/FL/gl.h	36;"	d
FL_glu_H	/usr/include/FL/glu.h	36;"	d
FORWARD	./vecmath/include/Vector3f.h	/^	static const Vector3f FORWARD;$/;"	m	class:Vector3f
FORWARD	./vecmath/src/Vector3f.cpp	/^const Vector3f Vector3f::FORWARD = Vector3f( 0, 0, -1 );$/;"	m	class:Vector3f	file:
Fl	/usr/include/FL/Fl.H	/^  Fl() {}; \/\/ no constructor!$/;"	f	class:Fl
Fl	/usr/include/FL/Fl.H	/^class FL_EXPORT Fl {$/;"	c
Fl_Adjuster	/usr/include/FL/Fl_Adjuster.H	/^class FL_EXPORT Fl_Adjuster : public Fl_Valuator {$/;"	c
Fl_Adjuster_H	/usr/include/FL/Fl_Adjuster.H	31;"	d
Fl_Align	/usr/include/FL/Enumerations.H	/^enum Fl_Align {	\/\/ align() values$/;"	g
Fl_Awake_Handler	/usr/include/FL/Fl.H	/^typedef void (*Fl_Awake_Handler)(void*);$/;"	t
Fl_BMP_Image	/usr/include/FL/Fl_BMP_Image.H	/^class FL_EXPORT Fl_BMP_Image : public Fl_RGB_Image {$/;"	c
Fl_BMP_Image_H	/usr/include/FL/Fl_BMP_Image.H	29;"	d
Fl_Bitmap	/usr/include/FL/Fl_Bitmap.H	/^  Fl_Bitmap(const char *bits, int W, int H) :$/;"	f	class:Fl_Bitmap
Fl_Bitmap	/usr/include/FL/Fl_Bitmap.H	/^  Fl_Bitmap(const uchar *bits, int W, int H) :$/;"	f	class:Fl_Bitmap
Fl_Bitmap	/usr/include/FL/Fl_Bitmap.H	/^class FL_EXPORT Fl_Bitmap : public Fl_Image {$/;"	c
Fl_Bitmap_H	/usr/include/FL/Fl_Bitmap.H	29;"	d
Fl_Bitmask	/usr/include/FL/mac.H	/^typedef GWorldPtr Fl_Bitmask; \/\/ Carbon requires a 1-bit GWorld instead of a BitMap$/;"	t
Fl_Bitmask	/usr/include/FL/win32.H	/^typedef HBITMAP Fl_Bitmask;$/;"	t
Fl_Bitmask	/usr/include/FL/x.H	/^typedef ulong Fl_Bitmask;$/;"	t
Fl_Box	/usr/include/FL/Fl_Box.H	/^  Fl_Box(Fl_Boxtype b, int X, int Y, int W, int H, const char *l)$/;"	f	class:Fl_Box
Fl_Box	/usr/include/FL/Fl_Box.H	/^  Fl_Box(int X, int Y, int W, int H, const char *l=0)$/;"	f	class:Fl_Box
Fl_Box	/usr/include/FL/Fl_Box.H	/^class FL_EXPORT Fl_Box : public Fl_Widget {$/;"	c
Fl_Box_Draw_F	/usr/include/FL/Fl.H	/^typedef void (Fl_Box_Draw_F)(int,int,int,int, Fl_Color);$/;"	t
Fl_Box_H	/usr/include/FL/Fl_Box.H	29;"	d
Fl_Boxtype	/usr/include/FL/Enumerations.H	/^enum Fl_Boxtype { \/\/ boxtypes (if you change these you must fix fl_boxtype.C):$/;"	g
Fl_Browser	/usr/include/FL/Fl_Browser.H	/^class FL_EXPORT Fl_Browser : public Fl_Browser_ {$/;"	c
Fl_Browser_	/usr/include/FL/Fl_Browser_.H	/^class FL_EXPORT Fl_Browser_ : public Fl_Group {$/;"	c
Fl_Browser_H	/usr/include/FL/Fl_Browser.H	33;"	d
Fl_Browser__H	/usr/include/FL/Fl_Browser_.H	36;"	d
Fl_Button	/usr/include/FL/Fl_Button.H	/^class FL_EXPORT Fl_Button : public Fl_Widget {$/;"	c
Fl_Button_H	/usr/include/FL/Fl_Button.H	29;"	d
Fl_Callback	/usr/include/FL/Fl_Widget.H	/^typedef void (Fl_Callback )(Fl_Widget*, void*);$/;"	t
Fl_Callback0	/usr/include/FL/Fl_Widget.H	/^typedef void (Fl_Callback0)(Fl_Widget*);$/;"	t
Fl_Callback1	/usr/include/FL/Fl_Widget.H	/^typedef void (Fl_Callback1)(Fl_Widget*, long);$/;"	t
Fl_Callback_p	/usr/include/FL/Fl_Widget.H	/^typedef Fl_Callback* Fl_Callback_p; \/\/ needed for BORLAND$/;"	t
Fl_Chart	/usr/include/FL/Fl_Chart.H	/^class FL_EXPORT Fl_Chart : public Fl_Widget {$/;"	c
Fl_Chart_H	/usr/include/FL/Fl_Chart.H	29;"	d
Fl_Check_Browser	/usr/include/FL/Fl_Check_Browser.H	/^class FL_EXPORT Fl_Check_Browser : public Fl_Browser_ {$/;"	c
Fl_Check_Browser_H	/usr/include/FL/Fl_Check_Browser.H	29;"	d
Fl_Check_Button	/usr/include/FL/Fl_Check_Button.H	/^class FL_EXPORT Fl_Check_Button : public Fl_Light_Button {$/;"	c
Fl_Check_Button_H	/usr/include/FL/Fl_Check_Button.H	29;"	d
Fl_Choice	/usr/include/FL/Fl_Choice.H	/^class FL_EXPORT Fl_Choice : public Fl_Menu_ {$/;"	c
Fl_Choice_H	/usr/include/FL/Fl_Choice.H	29;"	d
Fl_Clock	/usr/include/FL/Fl_Clock.H	/^class FL_EXPORT Fl_Clock : public Fl_Clock_Output {$/;"	c
Fl_Clock_H	/usr/include/FL/Fl_Clock.H	29;"	d
Fl_Clock_Output	/usr/include/FL/Fl_Clock.H	/^class FL_EXPORT Fl_Clock_Output : public Fl_Widget {$/;"	c
Fl_Color	/usr/include/FL/Enumerations.H	/^enum Fl_Color {	\/\/ standard colors$/;"	g
Fl_Color_Chooser	/usr/include/FL/Fl_Color_Chooser.H	/^class FL_EXPORT Fl_Color_Chooser : public Fl_Group {$/;"	c
Fl_Color_Chooser_H	/usr/include/FL/Fl_Color_Chooser.H	33;"	d
Fl_Counter	/usr/include/FL/Fl_Counter.H	/^class FL_EXPORT Fl_Counter : public Fl_Valuator {$/;"	c
Fl_Counter_H	/usr/include/FL/Fl_Counter.H	31;"	d
Fl_Cursor	/usr/include/FL/Enumerations.H	/^enum Fl_Cursor {	\/\/ standard cursors$/;"	g
Fl_Damage	/usr/include/FL/Enumerations.H	/^enum Fl_Damage {$/;"	g
Fl_Dial	/usr/include/FL/Fl_Dial.H	/^class FL_EXPORT Fl_Dial : public Fl_Valuator {$/;"	c
Fl_Dial_H	/usr/include/FL/Fl_Dial.H	29;"	d
Fl_Double_Window	/usr/include/FL/Fl_Double_Window.H	/^  Fl_Double_Window(int W, int H, const char *l = 0) $/;"	f	class:Fl_Double_Window
Fl_Double_Window	/usr/include/FL/Fl_Double_Window.H	/^  Fl_Double_Window(int X, int Y, int W, int H, const char *l = 0)$/;"	f	class:Fl_Double_Window
Fl_Double_Window	/usr/include/FL/Fl_Double_Window.H	/^class FL_EXPORT Fl_Double_Window : public Fl_Window {$/;"	c
Fl_Double_Window_H	/usr/include/FL/Fl_Double_Window.H	29;"	d
Fl_Draw_Image_Cb	/usr/include/FL/fl_draw.H	/^typedef void (*Fl_Draw_Image_Cb)(void*,int,int,int,uchar*);$/;"	t
Fl_End	/usr/include/FL/Fl_Group.H	/^  Fl_End() {Fl_Group::current()->end();}$/;"	f	class:Fl_End
Fl_End	/usr/include/FL/Fl_Group.H	/^class FL_EXPORT Fl_End {$/;"	c
Fl_Enumerations_H	/usr/include/FL/Enumerations.H	29;"	d
Fl_Event	/usr/include/FL/Enumerations.H	/^enum Fl_Event {	\/\/ events$/;"	g
Fl_Export_H	/usr/include/FL/Fl_Export.H	29;"	d
Fl_File_Browser	/usr/include/FL/Fl_File_Browser.H	/^class FL_EXPORT Fl_File_Browser : public Fl_Browser$/;"	c
Fl_File_Chooser	/usr/include/FL/Fl_File_Chooser.H	/^class FL_EXPORT Fl_File_Chooser {$/;"	c
Fl_File_Chooser	/usr/include/FL/fl_file_chooser.H	/^class FL_EXPORT Fl_File_Chooser {$/;"	c
Fl_File_Chooser_H	/usr/include/FL/Fl_File_Chooser.H	31;"	d
Fl_File_Chooser_H	/usr/include/FL/fl_file_chooser.H	31;"	d
Fl_File_Icon	/usr/include/FL/Fl_File_Icon.H	/^class FL_EXPORT Fl_File_Icon			\/\/\/\/ Icon data$/;"	c
Fl_File_Input	/usr/include/FL/Fl_File_Input.H	/^class FL_EXPORT Fl_File_Input : public Fl_Input$/;"	c
Fl_File_Input_H	/usr/include/FL/Fl_File_Input.H	30;"	d
Fl_File_Sort_F	/usr/include/FL/filename.H	/^typedef int (Fl_File_Sort_F)(struct dirent **, struct dirent **);$/;"	t
Fl_Fill_Dial	/usr/include/FL/Fl_Fill_Dial.H	/^    Fl_Fill_Dial(int x,int y,int w,int h, const char *l = 0)$/;"	f	class:Fl_Fill_Dial
Fl_Fill_Dial	/usr/include/FL/Fl_Fill_Dial.H	/^class Fl_Fill_Dial : public Fl_Dial {$/;"	c
Fl_Fill_Dial_H	/usr/include/FL/Fl_Fill_Dial.H	29;"	d
Fl_Fill_Slider	/usr/include/FL/Fl_Fill_Slider.H	/^    Fl_Fill_Slider(int x,int y,int w,int h,const char *l=0)$/;"	f	class:Fl_Fill_Slider
Fl_Fill_Slider	/usr/include/FL/Fl_Fill_Slider.H	/^class Fl_Fill_Slider : public Fl_Slider {$/;"	c
Fl_Fill_Slider_H	/usr/include/FL/Fl_Fill_Slider.H	29;"	d
Fl_Float_Input	/usr/include/FL/Fl_Float_Input.H	/^    Fl_Float_Input(int X,int Y,int W,int H,const char *l = 0)$/;"	f	class:Fl_Float_Input
Fl_Float_Input	/usr/include/FL/Fl_Float_Input.H	/^class Fl_Float_Input : public Fl_Input {$/;"	c
Fl_Float_Input_H	/usr/include/FL/Fl_Float_Input.H	29;"	d
Fl_Font	/usr/include/FL/Enumerations.H	/^enum Fl_Font {	\/\/ standard fonts$/;"	g
Fl_FormsBitmap	/usr/include/FL/Fl_FormsBitmap.H	/^class FL_EXPORT Fl_FormsBitmap : public Fl_Widget {$/;"	c
Fl_FormsBitmap_H	/usr/include/FL/Fl_FormsBitmap.H	29;"	d
Fl_FormsPixmap	/usr/include/FL/Fl_FormsPixmap.H	/^class FL_EXPORT Fl_FormsPixmap : public Fl_Widget {$/;"	c
Fl_FormsPixmap_H	/usr/include/FL/Fl_FormsPixmap.H	29;"	d
Fl_FormsText	/usr/include/FL/forms.H	/^    Fl_FormsText(Fl_Boxtype b, int X, int Y, int W, int H, const char* l=0)$/;"	f	class:Fl_FormsText
Fl_FormsText	/usr/include/FL/forms.H	/^class FL_EXPORT Fl_FormsText : public Fl_Widget {$/;"	c
Fl_Free	/usr/include/FL/Fl_Free.H	/^class FL_EXPORT Fl_Free : public Fl_Widget {$/;"	c
Fl_Free_H	/usr/include/FL/Fl_Free.H	29;"	d
Fl_GIF_Image	/usr/include/FL/Fl_GIF_Image.H	/^class FL_EXPORT Fl_GIF_Image : public Fl_Pixmap {$/;"	c
Fl_GIF_Image_H	/usr/include/FL/Fl_GIF_Image.H	29;"	d
Fl_Gl_Window	/usr/include/FL/Fl_Gl_Window.H	/^  Fl_Gl_Window(int W, int H, const char *l=0) : Fl_Window(W,H,l) {init();}$/;"	f	class:Fl_Gl_Window
Fl_Gl_Window	/usr/include/FL/Fl_Gl_Window.H	/^  Fl_Gl_Window(int X, int Y, int W, int H, const char *l=0)$/;"	f	class:Fl_Gl_Window
Fl_Gl_Window	/usr/include/FL/Fl_Gl_Window.H	/^class FL_EXPORT Fl_Gl_Window : public Fl_Window {$/;"	c
Fl_Gl_Window_H	/usr/include/FL/Fl_Gl_Window.H	28;"	d
Fl_Glut_Bitmap_Font	/usr/include/FL/glut.H	/^extern FL_EXPORT struct Fl_Glut_Bitmap_Font {uchar font; int size;}$/;"	s
Fl_Glut_StrokeChar	/usr/include/FL/glut.H	/^struct Fl_Glut_StrokeChar {$/;"	s
Fl_Glut_StrokeFont	/usr/include/FL/glut.H	/^struct Fl_Glut_StrokeFont {$/;"	s
Fl_Glut_StrokeStrip	/usr/include/FL/glut.H	/^struct Fl_Glut_StrokeStrip {$/;"	s
Fl_Glut_StrokeVertex	/usr/include/FL/glut.H	/^struct Fl_Glut_StrokeVertex {$/;"	s
Fl_Glut_Window	/usr/include/FL/glut.H	/^class FL_EXPORT Fl_Glut_Window : public Fl_Gl_Window {$/;"	c
Fl_Group	/usr/include/FL/Fl_Group.H	/^class FL_EXPORT Fl_Group : public Fl_Widget {$/;"	c
Fl_Group_H	/usr/include/FL/Fl_Group.H	29;"	d
Fl_H	/usr/include/FL/Fl.H	29;"	d
Fl_Help_Block	/usr/include/FL/Fl_Help_View.H	/^struct Fl_Help_Block$/;"	s
Fl_Help_Dialog	/usr/include/FL/Fl_Help_Dialog.H	/^class FL_EXPORT Fl_Help_Dialog {$/;"	c
Fl_Help_Dialog_H	/usr/include/FL/Fl_Help_Dialog.H	31;"	d
Fl_Help_Func	/usr/include/FL/Fl_Help_View.H	/^typedef const char *(Fl_Help_Func)(Fl_Widget *, const char *);$/;"	t
Fl_Help_Link	/usr/include/FL/Fl_Help_View.H	/^struct Fl_Help_Link$/;"	s
Fl_Help_Target	/usr/include/FL/Fl_Help_View.H	/^struct Fl_Help_Target$/;"	s
Fl_Help_View	/usr/include/FL/Fl_Help_View.H	/^class FL_EXPORT Fl_Help_View : public Fl_Group	\/\/\/\/ Help viewer widget$/;"	c
Fl_Help_View_H	/usr/include/FL/Fl_Help_View.H	30;"	d
Fl_Hold_Browser	/usr/include/FL/Fl_Hold_Browser.H	/^    Fl_Hold_Browser(int X,int Y,int W,int H,const char *l=0)$/;"	f	class:Fl_Hold_Browser
Fl_Hold_Browser	/usr/include/FL/Fl_Hold_Browser.H	/^class Fl_Hold_Browser : public Fl_Browser {$/;"	c
Fl_Hold_Browser_H	/usr/include/FL/Fl_Hold_Browser.H	29;"	d
Fl_Hor_Fill_Slider	/usr/include/FL/Fl_Hor_Fill_Slider.H	/^    Fl_Hor_Fill_Slider(int x,int y,int w,int h,const char *l=0)$/;"	f	class:Fl_Hor_Fill_Slider
Fl_Hor_Fill_Slider	/usr/include/FL/Fl_Hor_Fill_Slider.H	/^class Fl_Hor_Fill_Slider : public Fl_Slider {$/;"	c
Fl_Hor_Fill_Slider_H	/usr/include/FL/Fl_Hor_Fill_Slider.H	28;"	d
Fl_Hor_Nice_Slider	/usr/include/FL/Fl_Hor_Nice_Slider.H	/^    Fl_Hor_Nice_Slider(int x,int y,int w,int h,const char *l=0)$/;"	f	class:Fl_Hor_Nice_Slider
Fl_Hor_Nice_Slider	/usr/include/FL/Fl_Hor_Nice_Slider.H	/^class Fl_Hor_Nice_Slider : public Fl_Slider {$/;"	c
Fl_Hor_Nice_Slider_H	/usr/include/FL/Fl_Hor_Nice_Slider.H	29;"	d
Fl_Hor_Slider	/usr/include/FL/Fl_Hor_Slider.H	/^    Fl_Hor_Slider(int X,int Y,int W,int H,const char *l=0)$/;"	f	class:Fl_Hor_Slider
Fl_Hor_Slider	/usr/include/FL/Fl_Hor_Slider.H	/^class Fl_Hor_Slider : public Fl_Slider {$/;"	c
Fl_Hor_Slider_H	/usr/include/FL/Fl_Hor_Slider.H	29;"	d
Fl_Hor_Value_Slider	/usr/include/FL/Fl_Hor_Value_Slider.H	/^    Fl_Hor_Value_Slider(int X,int Y,int W,int H,const char *l=0)$/;"	f	class:Fl_Hor_Value_Slider
Fl_Hor_Value_Slider	/usr/include/FL/Fl_Hor_Value_Slider.H	/^class Fl_Hor_Value_Slider : public Fl_Value_Slider {$/;"	c
Fl_Hor_Value_Slider_H	/usr/include/FL/Fl_Hor_Value_Slider.H	29;"	d
Fl_Image	/usr/include/FL/Fl_Image.H	/^  Fl_Image(int W, int H, int D) {w_ = W; h_ = H; d_ = D; ld_ = 0; count_ = 0; data_ = 0;}$/;"	f	class:Fl_Image
Fl_Image	/usr/include/FL/Fl_Image.H	/^class FL_EXPORT Fl_Image {$/;"	c
Fl_Image_H	/usr/include/FL/Fl_Image.H	29;"	d
Fl_Input	/usr/include/FL/Fl_Input.H	/^class FL_EXPORT Fl_Input : public Fl_Input_ {$/;"	c
Fl_Input_	/usr/include/FL/Fl_Input_.H	/^class FL_EXPORT Fl_Input_ : public Fl_Widget {$/;"	c
Fl_Input_Choice	/usr/include/FL/Fl_Input_Choice.H	/^  Fl_Input_Choice (int x,int y,int w,int h,const char*l=0) : Fl_Group(x,y,w,h,l) {$/;"	f	class:Fl_Input_Choice
Fl_Input_Choice	/usr/include/FL/Fl_Input_Choice.H	/^class Fl_Input_Choice : public Fl_Group {$/;"	c
Fl_Input_Choice_H	/usr/include/FL/Fl_Input_Choice.H	34;"	d
Fl_Input_H	/usr/include/FL/Fl_Input.H	29;"	d
Fl_Input__H	/usr/include/FL/Fl_Input_.H	29;"	d
Fl_Int_Input	/usr/include/FL/Fl_Int_Input.H	/^    Fl_Int_Input(int X,int Y,int W,int H,const char *l = 0)$/;"	f	class:Fl_Int_Input
Fl_Int_Input	/usr/include/FL/Fl_Int_Input.H	/^class Fl_Int_Input : public Fl_Input {$/;"	c
Fl_Int_Input_H	/usr/include/FL/Fl_Int_Input.H	29;"	d
Fl_JPEG_Image	/usr/include/FL/Fl_JPEG_Image.H	/^class FL_EXPORT Fl_JPEG_Image : public Fl_RGB_Image {$/;"	c
Fl_JPEG_Image_H	/usr/include/FL/Fl_JPEG_Image.H	29;"	d
Fl_Label	/usr/include/FL/Fl_Widget.H	/^struct FL_EXPORT Fl_Label {$/;"	s
Fl_Label_Draw_F	/usr/include/FL/Fl.H	/^typedef void (Fl_Label_Draw_F)(const Fl_Label*, int,int,int,int, Fl_Align);$/;"	t
Fl_Label_Measure_F	/usr/include/FL/Fl.H	/^typedef void (Fl_Label_Measure_F)(const Fl_Label*, int&, int&);$/;"	t
Fl_Labeltype	/usr/include/FL/Enumerations.H	/^enum Fl_Labeltype {	\/\/ labeltypes:$/;"	g
Fl_Light_Button	/usr/include/FL/Fl_Light_Button.H	/^class FL_EXPORT Fl_Light_Button : public Fl_Button {$/;"	c
Fl_Light_Button_H	/usr/include/FL/Fl_Light_Button.H	29;"	d
Fl_Line_Dial	/usr/include/FL/Fl_Line_Dial.H	/^    Fl_Line_Dial(int x,int y,int w,int h, const char *l = 0)$/;"	f	class:Fl_Line_Dial
Fl_Line_Dial	/usr/include/FL/Fl_Line_Dial.H	/^class Fl_Line_Dial : public Fl_Dial {$/;"	c
Fl_Line_Dial_H	/usr/include/FL/Fl_Line_Dial.H	29;"	d
Fl_Line_Position	/usr/include/FL/Fl_Browser.H	/^  enum Fl_Line_Position { TOP, BOTTOM, MIDDLE };$/;"	g	class:Fl_Browser
Fl_Menu	/usr/include/FL/Fl_Menu_Item.H	/^typedef Fl_Menu_Item Fl_Menu; \/\/ back compatability$/;"	t
Fl_Menu_	/usr/include/FL/Fl_Menu_.H	/^class FL_EXPORT Fl_Menu_ : public Fl_Widget {$/;"	c
Fl_Menu_Bar	/usr/include/FL/Fl_Menu_Bar.H	/^    Fl_Menu_Bar(int X, int Y, int W, int H,const char *l=0)$/;"	f	class:Fl_Menu_Bar
Fl_Menu_Bar	/usr/include/FL/Fl_Menu_Bar.H	/^class FL_EXPORT Fl_Menu_Bar : public Fl_Menu_ {$/;"	c
Fl_Menu_Bar_H	/usr/include/FL/Fl_Menu_Bar.H	29;"	d
Fl_Menu_Button	/usr/include/FL/Fl_Menu_Button.H	/^class FL_EXPORT Fl_Menu_Button : public Fl_Menu_ {$/;"	c
Fl_Menu_Button_H	/usr/include/FL/Fl_Menu_Button.H	29;"	d
Fl_Menu_Item	/usr/include/FL/Fl_Menu_Item.H	/^struct FL_EXPORT Fl_Menu_Item {$/;"	s
Fl_Menu_Item_H	/usr/include/FL/Fl_Menu_Item.H	29;"	d
Fl_Menu_Window	/usr/include/FL/Fl_Menu_Window.H	/^  Fl_Menu_Window(int W, int H, const char *l = 0)$/;"	f	class:Fl_Menu_Window
Fl_Menu_Window	/usr/include/FL/Fl_Menu_Window.H	/^  Fl_Menu_Window(int X, int Y, int W, int H, const char *l = 0)$/;"	f	class:Fl_Menu_Window
Fl_Menu_Window	/usr/include/FL/Fl_Menu_Window.H	/^class FL_EXPORT Fl_Menu_Window : public Fl_Single_Window {$/;"	c
Fl_Menu_Window_H	/usr/include/FL/Fl_Menu_Window.H	29;"	d
Fl_Menu__H	/usr/include/FL/Fl_Menu_.H	29;"	d
Fl_Mode	/usr/include/FL/Enumerations.H	/^enum Fl_Mode { \/\/ visual types and Fl_Gl_Window::mode() (values match Glut)$/;"	g
Fl_Multi_Browser	/usr/include/FL/Fl_Multi_Browser.H	/^    Fl_Multi_Browser(int X,int Y,int W,int H,const char *L=0)$/;"	f	class:Fl_Multi_Browser
Fl_Multi_Browser	/usr/include/FL/Fl_Multi_Browser.H	/^class Fl_Multi_Browser : public Fl_Browser {$/;"	c
Fl_Multi_Browser_H	/usr/include/FL/Fl_Multi_Browser.H	29;"	d
Fl_Multi_Label	/usr/include/FL/Fl_Multi_Label.H	/^struct FL_EXPORT Fl_Multi_Label {$/;"	s
Fl_Multi_Label_H	/usr/include/FL/Fl_Multi_Label.H	29;"	d
Fl_Multiline_Input	/usr/include/FL/Fl_Multiline_Input.H	/^    Fl_Multiline_Input(int X,int Y,int W,int H,const char *l = 0)$/;"	f	class:Fl_Multiline_Input
Fl_Multiline_Input	/usr/include/FL/Fl_Multiline_Input.H	/^class Fl_Multiline_Input : public Fl_Input {$/;"	c
Fl_Multiline_Input_H	/usr/include/FL/Fl_Multiline_Input.H	29;"	d
Fl_Multiline_Output	/usr/include/FL/Fl_Multiline_Output.H	/^    Fl_Multiline_Output(int X,int Y,int W,int H,const char *l = 0)$/;"	f	class:Fl_Multiline_Output
Fl_Multiline_Output	/usr/include/FL/Fl_Multiline_Output.H	/^class Fl_Multiline_Output : public Fl_Output {$/;"	c
Fl_Multiline_Output_H	/usr/include/FL/Fl_Multiline_Output.H	29;"	d
Fl_Nice_Slider	/usr/include/FL/Fl_Nice_Slider.H	/^    Fl_Nice_Slider(int x,int y,int w,int h,const char *l=0)$/;"	f	class:Fl_Nice_Slider
Fl_Nice_Slider	/usr/include/FL/Fl_Nice_Slider.H	/^class Fl_Nice_Slider : public Fl_Slider {$/;"	c
Fl_Nice_Slider_H	/usr/include/FL/Fl_Nice_Slider.H	28;"	d
Fl_Object	/usr/include/FL/Fl.H	33;"	d
Fl_Object	/usr/include/FL/Fl_Object.H	30;"	d
Fl_Offscreen	/usr/include/FL/mac.H	/^typedef GWorldPtr Fl_Offscreen;$/;"	t
Fl_Offscreen	/usr/include/FL/win32.H	/^typedef HBITMAP Fl_Offscreen;$/;"	t
Fl_Offscreen	/usr/include/FL/x.H	/^typedef ulong Fl_Offscreen;$/;"	t
Fl_Output	/usr/include/FL/Fl_Output.H	/^  Fl_Output(int X,int Y,int W,int H, const char *l = 0)$/;"	f	class:Fl_Output
Fl_Output	/usr/include/FL/Fl_Output.H	/^class Fl_Output : public Fl_Input {$/;"	c
Fl_Output_H	/usr/include/FL/Fl_Output.H	29;"	d
Fl_Overlay_Window	/usr/include/FL/Fl_Overlay_Window.H	/^  Fl_Overlay_Window(int W, int H, const char *l=0)$/;"	f	class:Fl_Overlay_Window
Fl_Overlay_Window	/usr/include/FL/Fl_Overlay_Window.H	/^  Fl_Overlay_Window(int X, int Y, int W, int H, const char *l=0)$/;"	f	class:Fl_Overlay_Window
Fl_Overlay_Window	/usr/include/FL/Fl_Overlay_Window.H	/^class FL_EXPORT Fl_Overlay_Window : public Fl_Double_Window {$/;"	c
Fl_Overlay_Window_H	/usr/include/FL/Fl_Overlay_Window.H	29;"	d
Fl_PNG_Image	/usr/include/FL/Fl_PNG_Image.H	/^class FL_EXPORT Fl_PNG_Image : public Fl_RGB_Image {$/;"	c
Fl_PNG_Image_H	/usr/include/FL/Fl_PNG_Image.H	29;"	d
Fl_PNM_Image	/usr/include/FL/Fl_PNM_Image.H	/^class FL_EXPORT Fl_PNM_Image : public Fl_RGB_Image {$/;"	c
Fl_PNM_Image_H	/usr/include/FL/Fl_PNM_Image.H	29;"	d
Fl_Pack	/usr/include/FL/Fl_Pack.H	/^class FL_EXPORT Fl_Pack : public Fl_Group {$/;"	c
Fl_Pack_H	/usr/include/FL/Fl_Pack.H	29;"	d
Fl_Pixmap	/usr/include/FL/Fl_Pixmap.H	/^  explicit Fl_Pixmap(char * const * D) : Fl_Image(-1,0,1), alloc_data(0), id(0), mask(0) {set_data((const char*const*)D); measure();}$/;"	f	class:Fl_Pixmap
Fl_Pixmap	/usr/include/FL/Fl_Pixmap.H	/^  explicit Fl_Pixmap(const char * const * D) : Fl_Image(-1,0,1), alloc_data(0), id(0), mask(0) {set_data((const char*const*)D); measure();}$/;"	f	class:Fl_Pixmap
Fl_Pixmap	/usr/include/FL/Fl_Pixmap.H	/^  explicit Fl_Pixmap(const uchar* const * D) : Fl_Image(-1,0,1), alloc_data(0), id(0), mask(0) {set_data((const char*const*)D); measure();}$/;"	f	class:Fl_Pixmap
Fl_Pixmap	/usr/include/FL/Fl_Pixmap.H	/^  explicit Fl_Pixmap(uchar* const * D) : Fl_Image(-1,0,1), alloc_data(0), id(0), mask(0) {set_data((const char*const*)D); measure();}$/;"	f	class:Fl_Pixmap
Fl_Pixmap	/usr/include/FL/Fl_Pixmap.H	/^class FL_EXPORT Fl_Pixmap : public Fl_Image {$/;"	c
Fl_Pixmap_H	/usr/include/FL/Fl_Pixmap.H	29;"	d
Fl_Positioner	/usr/include/FL/Fl_Positioner.H	/^class FL_EXPORT Fl_Positioner : public Fl_Widget {$/;"	c
Fl_Positioner_H	/usr/include/FL/Fl_Positioner.H	29;"	d
Fl_Preferences	/usr/include/FL/Fl_Preferences.H	/^class FL_EXPORT Fl_Preferences $/;"	c
Fl_Preferences_H	/usr/include/FL/Fl_Preferences.H	29;"	d
Fl_Progress	/usr/include/FL/Fl_Progress.H	/^class FL_EXPORT Fl_Progress : public Fl_Widget$/;"	c
Fl_RGB_Image	/usr/include/FL/Fl_Image.H	/^  Fl_RGB_Image(const uchar *bits, int W, int H, int D=3, int LD=0) :$/;"	f	class:Fl_RGB_Image
Fl_RGB_Image	/usr/include/FL/Fl_Image.H	/^class FL_EXPORT Fl_RGB_Image : public Fl_Image {$/;"	c
Fl_RGB_Image_H	/usr/include/FL/Fl_RGB_Image.H	29;"	d
Fl_Radio_Button	/usr/include/FL/Fl_Radio_Button.H	/^    Fl_Radio_Button(int x,int y,int w,int h,const char *l=0)$/;"	f	class:Fl_Radio_Button
Fl_Radio_Button	/usr/include/FL/Fl_Radio_Button.H	/^class Fl_Radio_Button : public Fl_Button {$/;"	c
Fl_Radio_Button_H	/usr/include/FL/Fl_Radio_Button.H	29;"	d
Fl_Radio_Light_Button	/usr/include/FL/Fl_Radio_Light_Button.H	/^    Fl_Radio_Light_Button(int X,int Y,int W,int H,const char *l=0)$/;"	f	class:Fl_Radio_Light_Button
Fl_Radio_Light_Button	/usr/include/FL/Fl_Radio_Light_Button.H	/^class Fl_Radio_Light_Button : public Fl_Light_Button {$/;"	c
Fl_Radio_Light_Button_H	/usr/include/FL/Fl_Radio_Light_Button.H	28;"	d
Fl_Radio_Round_Button	/usr/include/FL/Fl_Radio_Round_Button.H	/^    Fl_Radio_Round_Button(int x,int y,int w,int h,const char *l=0)$/;"	f	class:Fl_Radio_Round_Button
Fl_Radio_Round_Button	/usr/include/FL/Fl_Radio_Round_Button.H	/^class Fl_Radio_Round_Button : public Fl_Round_Button {$/;"	c
Fl_Radio_Round_Button_H	/usr/include/FL/Fl_Radio_Round_Button.H	29;"	d
Fl_Region	/usr/include/FL/mac.H	/^typedef RgnHandle Fl_Region;$/;"	t
Fl_Region	/usr/include/FL/win32.H	/^typedef HRGN Fl_Region;$/;"	t
Fl_Region	/usr/include/FL/x.H	/^typedef Region Fl_Region;$/;"	t
Fl_Repeat_Button	/usr/include/FL/Fl_Repeat_Button.H	/^  Fl_Repeat_Button(int X,int Y,int W,int H,const char *l=0)$/;"	f	class:Fl_Repeat_Button
Fl_Repeat_Button	/usr/include/FL/Fl_Repeat_Button.H	/^class FL_EXPORT Fl_Repeat_Button : public Fl_Button {$/;"	c
Fl_Repeat_Button_H	/usr/include/FL/Fl_Repeat_Button.H	29;"	d
Fl_Return_Button	/usr/include/FL/Fl_Return_Button.H	/^  Fl_Return_Button(int X, int Y, int W, int H,const char *l=0)$/;"	f	class:Fl_Return_Button
Fl_Return_Button	/usr/include/FL/Fl_Return_Button.H	/^class FL_EXPORT Fl_Return_Button : public Fl_Button {$/;"	c
Fl_Return_Button_H	/usr/include/FL/Fl_Return_Button.H	29;"	d
Fl_Roller	/usr/include/FL/Fl_Roller.H	/^class FL_EXPORT Fl_Roller : public Fl_Valuator {$/;"	c
Fl_Roller_H	/usr/include/FL/Fl_Roller.H	29;"	d
Fl_Round_Button	/usr/include/FL/Fl_Round_Button.H	/^class FL_EXPORT Fl_Round_Button : public Fl_Light_Button {$/;"	c
Fl_Round_Button_H	/usr/include/FL/Fl_Round_Button.H	29;"	d
Fl_Round_Clock	/usr/include/FL/Fl_Round_Clock.H	/^    Fl_Round_Clock(int x,int y,int w,int h, const char *l = 0)$/;"	f	class:Fl_Round_Clock
Fl_Round_Clock	/usr/include/FL/Fl_Round_Clock.H	/^class Fl_Round_Clock : public Fl_Clock {$/;"	c
Fl_Round_Clock_H	/usr/include/FL/Fl_Round_Clock.H	29;"	d
Fl_Scroll	/usr/include/FL/Fl_Scroll.H	/^class FL_EXPORT Fl_Scroll : public Fl_Group {$/;"	c
Fl_Scroll_H	/usr/include/FL/Fl_Scroll.H	29;"	d
Fl_Scrollbar	/usr/include/FL/Fl_Scrollbar.H	/^class FL_EXPORT Fl_Scrollbar : public Fl_Slider {$/;"	c
Fl_Scrollbar_H	/usr/include/FL/Fl_Scrollbar.H	29;"	d
Fl_Secret_Input	/usr/include/FL/Fl_Secret_Input.H	/^    Fl_Secret_Input(int X,int Y,int W,int H,const char *l = 0)$/;"	f	class:Fl_Secret_Input
Fl_Secret_Input	/usr/include/FL/Fl_Secret_Input.H	/^class Fl_Secret_Input : public Fl_Input {$/;"	c
Fl_Secret_Input_H	/usr/include/FL/Fl_Secret_Input.H	29;"	d
Fl_Select_Browser	/usr/include/FL/Fl_Select_Browser.H	/^    Fl_Select_Browser(int X,int Y,int W,int H,const char *l=0)$/;"	f	class:Fl_Select_Browser
Fl_Select_Browser	/usr/include/FL/Fl_Select_Browser.H	/^class Fl_Select_Browser : public Fl_Browser {$/;"	c
Fl_Select_Browser_H	/usr/include/FL/Fl_Select_Browser.H	29;"	d
Fl_Shared_Handler	/usr/include/FL/Fl_Shared_Image.H	/^typedef Fl_Image *(*Fl_Shared_Handler)(const char *name, uchar *header,$/;"	t
Fl_Shared_Image	/usr/include/FL/Fl_Shared_Image.H	/^class FL_EXPORT Fl_Shared_Image : public Fl_Image {$/;"	c
Fl_Shared_Image_H	/usr/include/FL/Fl_Shared_Image.H	29;"	d
Fl_Simple_Counter	/usr/include/FL/Fl_Simple_Counter.H	/^    Fl_Simple_Counter(int x,int y,int w,int h, const char *l = 0)$/;"	f	class:Fl_Simple_Counter
Fl_Simple_Counter	/usr/include/FL/Fl_Simple_Counter.H	/^class Fl_Simple_Counter : public Fl_Counter {$/;"	c
Fl_Simple_Counter_H	/usr/include/FL/Fl_Simple_Counter.H	29;"	d
Fl_Single_Window	/usr/include/FL/Fl_Single_Window.H	/^  Fl_Single_Window(int W, int H, const char *l=0)$/;"	f	class:Fl_Single_Window
Fl_Single_Window	/usr/include/FL/Fl_Single_Window.H	/^  Fl_Single_Window(int X, int Y, int W, int H, const char *l=0)$/;"	f	class:Fl_Single_Window
Fl_Single_Window	/usr/include/FL/Fl_Single_Window.H	/^class FL_EXPORT Fl_Single_Window : public Fl_Window {$/;"	c
Fl_Single_Window_H	/usr/include/FL/Fl_Single_Window.H	29;"	d
Fl_Slider	/usr/include/FL/Fl_Slider.H	/^class FL_EXPORT Fl_Slider : public Fl_Valuator {$/;"	c
Fl_Slider_H	/usr/include/FL/Fl_Slider.H	29;"	d
Fl_Spinner	/usr/include/FL/Fl_Spinner.H	/^		Fl_Spinner(int X, int Y, int W, int H, const char *L = 0)$/;"	f	class:Fl_Spinner
Fl_Spinner	/usr/include/FL/Fl_Spinner.H	/^class Fl_Spinner : public Fl_Group$/;"	c
Fl_Spinner_H	/usr/include/FL/Fl_Spinner.H	29;"	d
Fl_Sys_Menu_Bar	/usr/include/FL/Fl_Sys_Menu_Bar.H	/^  Fl_Sys_Menu_Bar(int x,int y,int w,int h,const char *l=0)$/;"	f	class:Fl_Sys_Menu_Bar
Fl_Sys_Menu_Bar	/usr/include/FL/Fl_Sys_Menu_Bar.H	/^class FL_EXPORT Fl_Sys_Menu_Bar : public Fl_Menu_Bar {$/;"	c
Fl_Sys_Menu_Bar	/usr/include/FL/Fl_Sys_Menu_Bar.H	/^typedef Fl_Menu_Bar Fl_Sys_Menu_Bar;$/;"	t
Fl_Sys_Menu_Bar_H	/usr/include/FL/Fl_Sys_Menu_Bar.H	29;"	d
Fl_Tabs	/usr/include/FL/Fl_Tabs.H	/^class FL_EXPORT Fl_Tabs : public Fl_Group {$/;"	c
Fl_Tabs_H	/usr/include/FL/Fl_Tabs.H	29;"	d
Fl_Text_Buffer	/usr/include/FL/Fl_Text_Buffer.H	/^class FL_EXPORT Fl_Text_Buffer {$/;"	c
Fl_Text_Display	/usr/include/FL/Fl_Text_Display.H	/^class FL_EXPORT Fl_Text_Display: public Fl_Group {$/;"	c
Fl_Text_Editor	/usr/include/FL/Fl_Text_Editor.H	/^class FL_EXPORT Fl_Text_Editor : public Fl_Text_Display {$/;"	c
Fl_Text_Modify_Cb	/usr/include/FL/Fl_Text_Buffer.H	/^typedef void (*Fl_Text_Modify_Cb)(int pos, int nInserted, int nDeleted,$/;"	t
Fl_Text_Predelete_Cb	/usr/include/FL/Fl_Text_Buffer.H	/^typedef void (*Fl_Text_Predelete_Cb)(int pos, int nDeleted, void* cbArg);$/;"	t
Fl_Text_Selection	/usr/include/FL/Fl_Text_Buffer.H	/^class FL_EXPORT Fl_Text_Selection {$/;"	c
Fl_Tile	/usr/include/FL/Fl_Tile.H	/^  Fl_Tile(int X,int Y,int W,int H,const char*l=0) : Fl_Group(X,Y,W,H,l) {}$/;"	f	class:Fl_Tile
Fl_Tile	/usr/include/FL/Fl_Tile.H	/^class FL_EXPORT Fl_Tile : public Fl_Group {$/;"	c
Fl_Tile_H	/usr/include/FL/Fl_Tile.H	29;"	d
Fl_Tiled_Image	/usr/include/FL/Fl_Tiled_Image.H	/^class FL_EXPORT Fl_Tiled_Image : public Fl_Image {$/;"	c
Fl_Tiled_Image_H	/usr/include/FL/Fl_Tiled_Image.H	29;"	d
Fl_Timeout_Handler	/usr/include/FL/Fl.H	/^typedef void (*Fl_Timeout_Handler)(void*);$/;"	t
Fl_Timer	/usr/include/FL/Fl_Timer.H	/^class FL_EXPORT Fl_Timer : public Fl_Widget {$/;"	c
Fl_Timer_H	/usr/include/FL/Fl_Timer.H	29;"	d
Fl_Toggle_Button	/usr/include/FL/Fl_Toggle_Button.H	/^    Fl_Toggle_Button(int X,int Y,int W,int H,const char *l=0)$/;"	f	class:Fl_Toggle_Button
Fl_Toggle_Button	/usr/include/FL/Fl_Toggle_Button.H	/^class Fl_Toggle_Button : public Fl_Button {$/;"	c
Fl_Toggle_Button_H	/usr/include/FL/Fl_Toggle_Button.H	29;"	d
Fl_Toggle_Light_Button	/usr/include/FL/Fl_Toggle_Light_Button.H	32;"	d
Fl_Toggle_Round_Button	/usr/include/FL/Fl_Toggle_Round_Button.H	32;"	d
Fl_Tooltip	/usr/include/FL/Fl_Tooltip.H	/^class FL_EXPORT Fl_Tooltip {$/;"	c
Fl_Tooltip_H	/usr/include/FL/Fl_Tooltip.H	29;"	d
Fl_Valuator	/usr/include/FL/Fl_Valuator.H	/^class FL_EXPORT Fl_Valuator : public Fl_Widget {$/;"	c
Fl_Valuator_H	/usr/include/FL/Fl_Valuator.H	29;"	d
Fl_Value_Input	/usr/include/FL/Fl_Value_Input.H	/^class FL_EXPORT Fl_Value_Input : public Fl_Valuator {$/;"	c
Fl_Value_Input_H	/usr/include/FL/Fl_Value_Input.H	29;"	d
Fl_Value_Output	/usr/include/FL/Fl_Value_Output.H	/^class FL_EXPORT Fl_Value_Output : public Fl_Valuator {$/;"	c
Fl_Value_Output_H	/usr/include/FL/Fl_Value_Output.H	29;"	d
Fl_Value_Slider	/usr/include/FL/Fl_Value_Slider.H	/^class FL_EXPORT Fl_Value_Slider : public Fl_Slider {$/;"	c
Fl_Value_Slider_H	/usr/include/FL/Fl_Value_Slider.H	29;"	d
Fl_When	/usr/include/FL/Enumerations.H	/^enum Fl_When { \/\/ Fl_Widget::when():$/;"	g
Fl_Widget	/usr/include/FL/Fl_Widget.H	/^class FL_EXPORT Fl_Widget {$/;"	c
Fl_Widget_H	/usr/include/FL/Fl_Widget.H	29;"	d
Fl_Window	/usr/include/FL/Fl_Window.H	/^class FL_EXPORT Fl_Window : public Fl_Group {$/;"	c
Fl_Window_H	/usr/include/FL/Fl_Window.H	29;"	d
Fl_Wizard	/usr/include/FL/Fl_Wizard.H	/^class FL_EXPORT Fl_Wizard : public Fl_Group$/;"	c
Fl_X	/usr/include/FL/mac.H	/^class Fl_X $/;"	c
Fl_X	/usr/include/FL/win32.H	/^class FL_EXPORT Fl_X {$/;"	c
Fl_X	/usr/include/FL/x.H	/^class FL_EXPORT Fl_X {$/;"	c
Fl_XBM_Image	/usr/include/FL/Fl_XBM_Image.H	/^class FL_EXPORT Fl_XBM_Image : public Fl_Bitmap {$/;"	c
Fl_XBM_Image_H	/usr/include/FL/Fl_XBM_Image.H	29;"	d
Fl_XFont_On_Demand	/usr/include/FL/x.H	/^  Fl_XFont_On_Demand(XFontStruct* p = NULL) : ptr(p) { }$/;"	f	class:Fl_XFont_On_Demand
Fl_XFont_On_Demand	/usr/include/FL/x.H	/^class Fl_XFont_On_Demand$/;"	c
Fl_XMap	/usr/include/FL/mac.H	/^extern struct Fl_XMap {$/;"	s
Fl_XMap	/usr/include/FL/win32.H	/^extern FL_EXPORT struct Fl_XMap {$/;"	s
Fl_XPM_Image	/usr/include/FL/Fl_XPM_Image.H	/^class FL_EXPORT Fl_XPM_Image : public Fl_Pixmap {$/;"	c
Fl_XPM_Image_H	/usr/include/FL/Fl_XPM_Image.H	29;"	d
Fl_X_H	/usr/include/FL/x.H	34;"	d
Fl_glut_H	/usr/include/FL/glut.H	41;"	d
Flcc_HueBox	/usr/include/FL/Fl_Color_Chooser.H	/^  Flcc_HueBox(int X, int Y, int W, int H) : Fl_Widget(X,Y,W,H) {$/;"	f	class:Flcc_HueBox
Flcc_HueBox	/usr/include/FL/Fl_Color_Chooser.H	/^class FL_EXPORT Flcc_HueBox : public Fl_Widget {$/;"	c
Flcc_ValueBox	/usr/include/FL/Fl_Color_Chooser.H	/^  Flcc_ValueBox(int X, int Y, int W, int H) : Fl_Widget(X,Y,W,H) {$/;"	f	class:Flcc_ValueBox
Flcc_ValueBox	/usr/include/FL/Fl_Color_Chooser.H	/^class FL_EXPORT Flcc_ValueBox : public Fl_Widget {$/;"	c
Flcc_Value_Input	/usr/include/FL/Fl_Color_Chooser.H	/^  Flcc_Value_Input(int X, int Y, int W, int H) : Fl_Value_Input(X,Y,W,H) {}$/;"	f	class:Flcc_Value_Input
Flcc_Value_Input	/usr/include/FL/Fl_Color_Chooser.H	/^class FL_EXPORT Flcc_Value_Input : public Fl_Value_Input {$/;"	c
Forms_CB	/usr/include/FL/forms.H	/^typedef void (*Forms_CB)(Fl_Widget*, long);$/;"	t
Forms_FormCB	/usr/include/FL/forms.H	/^typedef void (*Forms_FormCB)(Fl_Widget*);$/;"	t
GLContext	/usr/include/FL/Fl_Gl_Window.H	/^typedef void* GLContext; \/\/ actually a GLXContext or HGLDC$/;"	t
GLUT_ACCUM	/usr/include/FL/glut.H	99;"	d
GLUT_ACTIVE_ALT	/usr/include/FL/glut.H	372;"	d
GLUT_ACTIVE_CTRL	/usr/include/FL/glut.H	371;"	d
GLUT_ACTIVE_SHIFT	/usr/include/FL/glut.H	370;"	d
GLUT_ALPHA	/usr/include/FL/glut.H	100;"	d
GLUT_BITMAP_8_BY_13	/usr/include/FL/glut.H	415;"	d
GLUT_BITMAP_9_BY_15	/usr/include/FL/glut.H	414;"	d
GLUT_BITMAP_HELVETICA_10	/usr/include/FL/glut.H	418;"	d
GLUT_BITMAP_HELVETICA_12	/usr/include/FL/glut.H	419;"	d
GLUT_BITMAP_HELVETICA_18	/usr/include/FL/glut.H	420;"	d
GLUT_BITMAP_TIMES_ROMAN_10	/usr/include/FL/glut.H	416;"	d
GLUT_BITMAP_TIMES_ROMAN_24	/usr/include/FL/glut.H	417;"	d
GLUT_CURSOR_BOTTOM_LEFT_CORNER	/usr/include/FL/glut.H	171;"	d
GLUT_CURSOR_BOTTOM_RIGHT_CORNER	/usr/include/FL/glut.H	170;"	d
GLUT_CURSOR_BOTTOM_SIDE	/usr/include/FL/glut.H	165;"	d
GLUT_CURSOR_CROSSHAIR	/usr/include/FL/glut.H	161;"	d
GLUT_CURSOR_CYCLE	/usr/include/FL/glut.H	157;"	d
GLUT_CURSOR_DESTROY	/usr/include/FL/glut.H	155;"	d
GLUT_CURSOR_FULL_CROSSHAIR	/usr/include/FL/glut.H	174;"	d
GLUT_CURSOR_HELP	/usr/include/FL/glut.H	156;"	d
GLUT_CURSOR_INFO	/usr/include/FL/glut.H	154;"	d
GLUT_CURSOR_INHERIT	/usr/include/FL/glut.H	172;"	d
GLUT_CURSOR_LEFT_ARROW	/usr/include/FL/glut.H	153;"	d
GLUT_CURSOR_LEFT_RIGHT	/usr/include/FL/glut.H	163;"	d
GLUT_CURSOR_LEFT_SIDE	/usr/include/FL/glut.H	166;"	d
GLUT_CURSOR_NONE	/usr/include/FL/glut.H	173;"	d
GLUT_CURSOR_RIGHT_ARROW	/usr/include/FL/glut.H	152;"	d
GLUT_CURSOR_RIGHT_SIDE	/usr/include/FL/glut.H	167;"	d
GLUT_CURSOR_SPRAY	/usr/include/FL/glut.H	158;"	d
GLUT_CURSOR_TEXT	/usr/include/FL/glut.H	160;"	d
GLUT_CURSOR_TOP_LEFT_CORNER	/usr/include/FL/glut.H	168;"	d
GLUT_CURSOR_TOP_RIGHT_CORNER	/usr/include/FL/glut.H	169;"	d
GLUT_CURSOR_TOP_SIDE	/usr/include/FL/glut.H	164;"	d
GLUT_CURSOR_UP_DOWN	/usr/include/FL/glut.H	162;"	d
GLUT_CURSOR_WAIT	/usr/include/FL/glut.H	159;"	d
GLUT_DEPTH	/usr/include/FL/glut.H	101;"	d
GLUT_DISPLAY_MODE_POSSIBLE	/usr/include/FL/glut.H	/^  GLUT_DISPLAY_MODE_POSSIBLE,$/;"	e	enum:__anon31
GLUT_DOUBLE	/usr/include/FL/glut.H	98;"	d
GLUT_DOWN	/usr/include/FL/glut.H	226;"	d
GLUT_ENTERED	/usr/include/FL/glut.H	/^enum {GLUT_LEFT, GLUT_ENTERED};$/;"	e	enum:__anon28
GLUT_HAS_DIAL_AND_BUTTON_BOX	/usr/include/FL/glut.H	360;"	d
GLUT_HAS_KEYBOARD	/usr/include/FL/glut.H	357;"	d
GLUT_HAS_MOUSE	/usr/include/FL/glut.H	358;"	d
GLUT_HAS_SPACEBALL	/usr/include/FL/glut.H	359;"	d
GLUT_HAS_TABLET	/usr/include/FL/glut.H	361;"	d
GLUT_INDEX	/usr/include/FL/glut.H	96;"	d
GLUT_INIT_DISPLAY_MODE	/usr/include/FL/glut.H	/^  GLUT_INIT_DISPLAY_MODE,$/;"	e	enum:__anon31
GLUT_INIT_WINDOW_HEIGHT	/usr/include/FL/glut.H	/^  GLUT_INIT_WINDOW_HEIGHT,$/;"	e	enum:__anon31
GLUT_INIT_WINDOW_WIDTH	/usr/include/FL/glut.H	/^  GLUT_INIT_WINDOW_WIDTH,$/;"	e	enum:__anon31
GLUT_INIT_WINDOW_X	/usr/include/FL/glut.H	/^  GLUT_INIT_WINDOW_X,$/;"	e	enum:__anon31
GLUT_INIT_WINDOW_Y	/usr/include/FL/glut.H	/^  GLUT_INIT_WINDOW_Y,$/;"	e	enum:__anon31
GLUT_KEY_DOWN	/usr/include/FL/glut.H	272;"	d
GLUT_KEY_END	/usr/include/FL/glut.H	276;"	d
GLUT_KEY_F1	/usr/include/FL/glut.H	256;"	d
GLUT_KEY_F10	/usr/include/FL/glut.H	265;"	d
GLUT_KEY_F11	/usr/include/FL/glut.H	266;"	d
GLUT_KEY_F12	/usr/include/FL/glut.H	267;"	d
GLUT_KEY_F2	/usr/include/FL/glut.H	257;"	d
GLUT_KEY_F3	/usr/include/FL/glut.H	258;"	d
GLUT_KEY_F4	/usr/include/FL/glut.H	259;"	d
GLUT_KEY_F5	/usr/include/FL/glut.H	260;"	d
GLUT_KEY_F6	/usr/include/FL/glut.H	261;"	d
GLUT_KEY_F7	/usr/include/FL/glut.H	262;"	d
GLUT_KEY_F8	/usr/include/FL/glut.H	263;"	d
GLUT_KEY_F9	/usr/include/FL/glut.H	264;"	d
GLUT_KEY_HOME	/usr/include/FL/glut.H	275;"	d
GLUT_KEY_INSERT	/usr/include/FL/glut.H	277;"	d
GLUT_KEY_LEFT	/usr/include/FL/glut.H	269;"	d
GLUT_KEY_PAGE_DOWN	/usr/include/FL/glut.H	274;"	d
GLUT_KEY_PAGE_UP	/usr/include/FL/glut.H	273;"	d
GLUT_KEY_RIGHT	/usr/include/FL/glut.H	271;"	d
GLUT_KEY_UP	/usr/include/FL/glut.H	270;"	d
GLUT_LEFT	/usr/include/FL/glut.H	/^enum {GLUT_LEFT, GLUT_ENTERED};$/;"	e	enum:__anon28
GLUT_LEFT_BUTTON	/usr/include/FL/glut.H	223;"	d
GLUT_MENU_IN_USE	/usr/include/FL/glut.H	/^enum {GLUT_MENU_NOT_IN_USE, GLUT_MENU_IN_USE};$/;"	e	enum:__anon30
GLUT_MENU_NOT_IN_USE	/usr/include/FL/glut.H	/^enum {GLUT_MENU_NOT_IN_USE, GLUT_MENU_IN_USE};$/;"	e	enum:__anon30
GLUT_MENU_NUM_ITEMS	/usr/include/FL/glut.H	/^  GLUT_MENU_NUM_ITEMS,$/;"	e	enum:__anon31
GLUT_MIDDLE_BUTTON	/usr/include/FL/glut.H	224;"	d
GLUT_MULTISAMPLE	/usr/include/FL/glut.H	103;"	d
GLUT_NORMAL	/usr/include/FL/glut.H	/^enum {GLUT_NORMAL, GLUT_OVERLAY};$/;"	e	enum:__anon27
GLUT_NORMAL_DAMAGED	/usr/include/FL/glut.H	380;"	d
GLUT_NOT_VISIBLE	/usr/include/FL/glut.H	/^enum {GLUT_NOT_VISIBLE, GLUT_VISIBLE};$/;"	e	enum:__anon29
GLUT_NUM_BUTTON_BOX_BUTTONS	/usr/include/FL/glut.H	364;"	d
GLUT_NUM_DIALS	/usr/include/FL/glut.H	365;"	d
GLUT_NUM_MOUSE_BUTTONS	/usr/include/FL/glut.H	362;"	d
GLUT_NUM_SPACEBALL_BUTTONS	/usr/include/FL/glut.H	363;"	d
GLUT_NUM_TABLET_BUTTONS	/usr/include/FL/glut.H	366;"	d
GLUT_OVERLAY	/usr/include/FL/glut.H	/^enum {GLUT_NORMAL, GLUT_OVERLAY};$/;"	e	enum:__anon27
GLUT_OVERLAY_DAMAGED	/usr/include/FL/glut.H	381;"	d
GLUT_OVERLAY_POSSIBLE	/usr/include/FL/glut.H	376;"	d
GLUT_RETURN_ZERO	/usr/include/FL/glut.H	/^  GLUT_RETURN_ZERO = 0,$/;"	e	enum:__anon31
GLUT_RGB	/usr/include/FL/glut.H	94;"	d
GLUT_RGBA	/usr/include/FL/glut.H	95;"	d
GLUT_RIGHT_BUTTON	/usr/include/FL/glut.H	225;"	d
GLUT_SCREEN_HEIGHT	/usr/include/FL/glut.H	/^  GLUT_SCREEN_HEIGHT,$/;"	e	enum:__anon31
GLUT_SCREEN_WIDTH	/usr/include/FL/glut.H	/^  GLUT_SCREEN_WIDTH,$/;"	e	enum:__anon31
GLUT_SINGLE	/usr/include/FL/glut.H	97;"	d
GLUT_STENCIL	/usr/include/FL/glut.H	102;"	d
GLUT_STEREO	/usr/include/FL/glut.H	104;"	d
GLUT_STROKE_MONO_ROMAN	/usr/include/FL/glut.H	455;"	d
GLUT_STROKE_ROMAN	/usr/include/FL/glut.H	454;"	d
GLUT_TRANSPARENT_INDEX	/usr/include/FL/glut.H	379;"	d
GLUT_UP	/usr/include/FL/glut.H	227;"	d
GLUT_VERSION	/usr/include/FL/glut.H	/^  GLUT_VERSION$/;"	e	enum:__anon31
GLUT_VISIBLE	/usr/include/FL/glut.H	/^enum {GLUT_NOT_VISIBLE, GLUT_VISIBLE};$/;"	e	enum:__anon29
GLUT_WINDOW_ACCUM_ALPHA_SIZE	/usr/include/FL/glut.H	346;"	d
GLUT_WINDOW_ACCUM_BLUE_SIZE	/usr/include/FL/glut.H	345;"	d
GLUT_WINDOW_ACCUM_GREEN_SIZE	/usr/include/FL/glut.H	344;"	d
GLUT_WINDOW_ACCUM_RED_SIZE	/usr/include/FL/glut.H	343;"	d
GLUT_WINDOW_ALPHA_SIZE	/usr/include/FL/glut.H	342;"	d
GLUT_WINDOW_BLUE_SIZE	/usr/include/FL/glut.H	341;"	d
GLUT_WINDOW_BUFFER_SIZE	/usr/include/FL/glut.H	/^  GLUT_WINDOW_BUFFER_SIZE,$/;"	e	enum:__anon31
GLUT_WINDOW_COLORMAP_SIZE	/usr/include/FL/glut.H	349;"	d
GLUT_WINDOW_DEPTH_SIZE	/usr/include/FL/glut.H	338;"	d
GLUT_WINDOW_DOUBLEBUFFER	/usr/include/FL/glut.H	347;"	d
GLUT_WINDOW_GREEN_SIZE	/usr/include/FL/glut.H	340;"	d
GLUT_WINDOW_HEIGHT	/usr/include/FL/glut.H	/^  GLUT_WINDOW_HEIGHT,$/;"	e	enum:__anon31
GLUT_WINDOW_NUM_SAMPLES	/usr/include/FL/glut.H	351;"	d
GLUT_WINDOW_NUM_SAMPLES	/usr/include/FL/glut.H	353;"	d
GLUT_WINDOW_PARENT	/usr/include/FL/glut.H	/^  GLUT_WINDOW_PARENT,$/;"	e	enum:__anon31
GLUT_WINDOW_RED_SIZE	/usr/include/FL/glut.H	339;"	d
GLUT_WINDOW_RGBA	/usr/include/FL/glut.H	348;"	d
GLUT_WINDOW_STENCIL_SIZE	/usr/include/FL/glut.H	337;"	d
GLUT_WINDOW_STEREO	/usr/include/FL/glut.H	355;"	d
GLUT_WINDOW_WIDTH	/usr/include/FL/glut.H	/^  GLUT_WINDOW_WIDTH,$/;"	e	enum:__anon31
GLUT_WINDOW_X	/usr/include/FL/glut.H	/^  GLUT_WINDOW_X,$/;"	e	enum:__anon31
GLUT_WINDOW_Y	/usr/include/FL/glut.H	/^  GLUT_WINDOW_Y,$/;"	e	enum:__anon31
GLUTproc	/usr/include/FL/glut.H	/^typedef void (*GLUTproc)();$/;"	t
GetAnimating	modelerapp.cpp	/^bool ModelerApplication::GetAnimating()$/;"	f	class:ModelerApplication
GetCenter	camera.h	/^    Vector3f GetCenter() const { return mCurrentCenter; }$/;"	f	class:Camera
GetControlValue	modelerapp.cpp	/^double ModelerApplication::GetControlValue(int controlNumber)$/;"	f	class:ModelerApplication
GetDistance	camera.h	/^    float GetDistance() const { return mCurrentDistance; }$/;"	f	class:Camera
GetNumControls	modelerapp.cpp	/^unsigned ModelerApplication::GetNumControls()$/;"	f	class:ModelerApplication
GetRotation	camera.h	/^    Matrix4f GetRotation() const { return mCurrentRot; }$/;"	f	class:Camera
HEAVY_CURSOR	/usr/include/FL/Fl_Text_Display.H	/^      BLOCK_CURSOR, HEAVY_CURSOR$/;"	e	enum:Fl_Text_Display::__anon20
HORIZONTAL	/usr/include/FL/Fl_Browser_.H	/^    HORIZONTAL = 1,$/;"	e	enum:Fl_Browser_::__anon11
HORIZONTAL	/usr/include/FL/Fl_Pack.H	/^    HORIZONTAL = 1$/;"	e	enum:Fl_Pack::__anon6
HORIZONTAL	/usr/include/FL/Fl_Scroll.H	/^    HORIZONTAL = 1,$/;"	e	enum:Fl_Scroll::__anon17
HORIZONTAL_ALWAYS	/usr/include/FL/Fl_Browser_.H	/^    HORIZONTAL_ALWAYS = 5,$/;"	e	enum:Fl_Browser_::__anon11
HORIZONTAL_ALWAYS	/usr/include/FL/Fl_Scroll.H	/^    HORIZONTAL_ALWAYS = 5,$/;"	e	enum:Fl_Scroll::__anon17
Height	/usr/include/FL/glut.H	/^  GLfloat Height;			\/\/ Height of the characters$/;"	m	struct:Fl_Glut_StrokeFont
HideControl	modelerapp.cpp	/^void ModelerApplication::HideControl(int controlNumber)$/;"	f	class:ModelerApplication
IDENTITY	./vecmath/include/Quat4f.h	/^	static const Quat4f IDENTITY;$/;"	m	class:Quat4f
IDENTITY	./vecmath/src/Quat4f.cpp	/^const Quat4f Quat4f::IDENTITY = Quat4f( 1, 0, 0, 0 );$/;"	m	class:Quat4f	file:
INACTIVE	/usr/include/FL/Fl_Widget.H	/^  enum {INACTIVE=1, INVISIBLE=2, OUTPUT=4, SHORTCUT_LABEL=64,$/;"	e	enum:Fl_Widget::__anon12
INVISIBLE	/usr/include/FL/Fl_Widget.H	/^  enum {INACTIVE=1, INVISIBLE=2, OUTPUT=4, SHORTCUT_LABEL=64,$/;"	e	enum:Fl_Widget::__anon12
Init	modelerapp.cpp	/^void ModelerApplication::Init( int argc, char* argv[],$/;"	f	class:ModelerApplication
InputMenuButton	/usr/include/FL/Fl_Input_Choice.H	/^    InputMenuButton(int x,int y,int w,int h,const char*l=0) : $/;"	f	class:Fl_Input_Choice::InputMenuButton
InputMenuButton	/usr/include/FL/Fl_Input_Choice.H	/^  class InputMenuButton : public Fl_Menu_Button {$/;"	c	class:Fl_Input_Choice
Instance	modelerapp.cpp	/^ModelerApplication *ModelerApplication::Instance()$/;"	f	class:ModelerApplication
JOINT_H	Joint.h	2;"	d
Joint	Joint.h	/^struct Joint$/;"	s
Key_Binding	/usr/include/FL/Fl_Text_Editor.H	/^    struct Key_Binding {$/;"	s	class:Fl_Text_Editor
Key_Func	/usr/include/FL/Fl_Text_Editor.H	/^    typedef int (*Key_Func)(int key, Fl_Text_Editor* editor);$/;"	t	class:Fl_Text_Editor
LEFT	/usr/include/FL/Fl_Help_View.H	/^  enum { RIGHT = -1, CENTER, LEFT };	\/\/ Alignments$/;"	e	enum:Fl_Help_View::__anon4
LEFT	camera.h	/^    typedef enum { NONE, LEFT, MIDDLE, RIGHT } Button;$/;"	e	enum:Camera::__anon3
LINE	/usr/include/FL/Fl_File_Icon.H	/^    LINE,			\/\/ Start of line$/;"	e	enum:Fl_File_Icon::__anon8
LINK	/usr/include/FL/Fl_File_Icon.H	/^    LINK,			\/\/ Only symbolic links$/;"	e	enum:Fl_File_Icon::__anon7
LPMINMAXINFO	/usr/include/FL/win32.H	39;"	d
MATRIX2F_H	./vecmath/include/Matrix2f.h	2;"	d
MATRIX3F_H	./vecmath/include/Matrix3f.h	2;"	d
MATRIX4F_H	./vecmath/include/Matrix4f.h	2;"	d
MATRIX_STACK_H	MatrixStack.h	2;"	d
MESH_H	Mesh.h	2;"	d
MIDDLE	/usr/include/FL/Fl_Browser.H	/^  enum Fl_Line_Position { TOP, BOTTOM, MIDDLE };$/;"	e	enum:Fl_Browser::Fl_Line_Position
MIDDLE	camera.h	/^    typedef enum { NONE, LEFT, MIDDLE, RIGHT } Button;$/;"	e	enum:Camera::__anon3
MODELERAPP_H	modelerapp.h	6;"	d
MODELERVIEW_H	ModelerView.h	8;"	d
MULTI	/usr/include/FL/Fl_File_Chooser.H	/^  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 }; $/;"	e	enum:Fl_File_Chooser::__anon33
MULTI	/usr/include/FL/fl_file_chooser.H	/^  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 }; $/;"	e	enum:Fl_File_Chooser::__anon13
M_1_PI	/usr/include/FL/math.h	51;"	d
M_2_PI	/usr/include/FL/math.h	52;"	d
M_PI	/usr/include/FL/math.h	48;"	d
M_PI	SkeletalModel.h	9;"	d
M_PI	camera.cpp	7;"	d	file:
M_PI_2	/usr/include/FL/math.h	49;"	d
M_PI_4	/usr/include/FL/math.h	50;"	d
M_SQRT1_2	/usr/include/FL/math.h	57;"	d
M_SQRT2	/usr/include/FL/math.h	56;"	d
Matrix	/usr/include/FL/gl2opengl.h	/^typedef float Matrix[4][4];$/;"	t
Matrix2f	./vecmath/include/Matrix2f.h	/^class Matrix2f$/;"	c
Matrix2f	./vecmath/src/Matrix2f.cpp	/^Matrix2f::Matrix2f( const Matrix2f& rm )$/;"	f	class:Matrix2f
Matrix2f	./vecmath/src/Matrix2f.cpp	/^Matrix2f::Matrix2f( const Vector2f& v0, const Vector2f& v1, bool setColumns )$/;"	f	class:Matrix2f
Matrix2f	./vecmath/src/Matrix2f.cpp	/^Matrix2f::Matrix2f( float fill )$/;"	f	class:Matrix2f
Matrix2f	./vecmath/src/Matrix2f.cpp	/^Matrix2f::Matrix2f( float m00, float m01,$/;"	f	class:Matrix2f
Matrix3f	./vecmath/include/Matrix3f.h	/^class Matrix3f$/;"	c
Matrix3f	./vecmath/src/Matrix3f.cpp	/^Matrix3f::Matrix3f( const Matrix3f& rm )$/;"	f	class:Matrix3f
Matrix3f	./vecmath/src/Matrix3f.cpp	/^Matrix3f::Matrix3f( const Vector3f& v0, const Vector3f& v1, const Vector3f& v2, bool setColumns )$/;"	f	class:Matrix3f
Matrix3f	./vecmath/src/Matrix3f.cpp	/^Matrix3f::Matrix3f( float fill )$/;"	f	class:Matrix3f
Matrix3f	./vecmath/src/Matrix3f.cpp	/^Matrix3f::Matrix3f( float m00, float m01, float m02,$/;"	f	class:Matrix3f
Matrix4f	./vecmath/include/Matrix4f.h	/^class Matrix4f$/;"	c
Matrix4f	./vecmath/src/Matrix4f.cpp	/^Matrix4f::Matrix4f( const Matrix4f& rm )$/;"	f	class:Matrix4f
Matrix4f	./vecmath/src/Matrix4f.cpp	/^Matrix4f::Matrix4f( const Vector4f& v0, const Vector4f& v1, const Vector4f& v2, const Vector4f& v3, bool setColumns )$/;"	f	class:Matrix4f
Matrix4f	./vecmath/src/Matrix4f.cpp	/^Matrix4f::Matrix4f( float fill )$/;"	f	class:Matrix4f
Matrix4f	./vecmath/src/Matrix4f.cpp	/^Matrix4f::Matrix4f( float m00, float m01, float m02, float m03,$/;"	f	class:Matrix4f
MatrixStack	MatrixStack.cpp	/^MatrixStack::MatrixStack()$/;"	f	class:MatrixStack
MatrixStack	MatrixStack.h	/^class MatrixStack$/;"	c
Mesh	Mesh.h	/^struct Mesh$/;"	s
ModelerApplication	modelerapp.h	/^    ModelerApplication() : m_numControls(-1) { }$/;"	f	class:ModelerApplication
ModelerApplication	modelerapp.h	/^    ModelerApplication(const ModelerApplication &) { }$/;"	f	class:ModelerApplication
ModelerApplication	modelerapp.h	/^class ModelerApplication$/;"	c
ModelerControl	modelerapp.cpp	/^ModelerControl::ModelerControl():m_minimum(0.0f), m_maximum(1.0f), m_stepsize(0.1f),$/;"	f	class:ModelerControl
ModelerControl	modelerapp.cpp	/^ModelerControl::ModelerControl(const ModelerControl & o)$/;"	f	class:ModelerControl
ModelerControl	modelerapp.cpp	/^ModelerControl::ModelerControl(const char *name, float minimum,$/;"	f	class:ModelerControl
ModelerControl	modelerapp.h	/^struct ModelerControl$/;"	s
ModelerUserInterface	modelerui.cpp	/^ModelerUserInterface::ModelerUserInterface() {$/;"	f	class:ModelerUserInterface
ModelerUserInterface	modelerui.h	/^class ModelerUserInterface {$/;"	c
ModelerView	ModelerView.cpp	/^ModelerView::ModelerView(int x, int y, int w, int h,$/;"	f	class:ModelerView
ModelerView	ModelerView.h	/^class ModelerView : public Fl_Gl_Window $/;"	c
MouseClick	camera.cpp	/^void Camera::MouseClick(Button button, int x, int y)$/;"	f	class:Camera
MouseDrag	camera.cpp	/^void Camera::MouseDrag(int x, int y)$/;"	f	class:Camera
MouseRelease	camera.cpp	/^void Camera::MouseRelease(int x, int y)$/;"	f	class:Camera
NEntry	/usr/include/FL/Fl_Preferences.H	/^    int nEntry, NEntry;$/;"	m	class:Fl_Preferences::Node
NONE	camera.h	/^    typedef enum { NONE, LEFT, MIDDLE, RIGHT } Button;$/;"	e	enum:Camera::__anon3
NORMAL_CURSOR	/usr/include/FL/Fl_Text_Display.H	/^      NORMAL_CURSOR, CARET_CURSOR, DIM_CURSOR,$/;"	e	enum:Fl_Text_Display::__anon20
NO_OVERLAY	/usr/include/FL/Fl_Menu_Window.H	/^  enum {NO_OVERLAY = 128};$/;"	e	enum:Fl_Menu_Window::__anon19
NULL	/usr/include/FL/forms.H	43;"	d
Name	/usr/include/FL/Fl_Preferences.H	/^  class FL_EXPORT Name {$/;"	c	class:Fl_Preferences
Name	/usr/include/FL/glut.H	/^  char* Name;				\/\/ The source font name$/;"	m	struct:Fl_Glut_StrokeFont
Node	/usr/include/FL/Fl_Preferences.H	/^  class FL_EXPORT Node \/\/ a node contains a list to all its entries $/;"	c	class:Fl_Preferences
Number	/usr/include/FL/glut.H	/^  int Number;$/;"	m	struct:Fl_Glut_StrokeChar
Number	/usr/include/FL/glut.H	/^  int Number;$/;"	m	struct:Fl_Glut_StrokeStrip
OUTLINEPOLYGON	/usr/include/FL/Fl_File_Icon.H	/^    OUTLINEPOLYGON,		\/\/ Followed by outline color (2 shorts)$/;"	e	enum:Fl_File_Icon::__anon8
OUTPUT	/usr/include/FL/Fl_Widget.H	/^  enum {INACTIVE=1, INVISIBLE=2, OUTPUT=4, SHORTCUT_LABEL=64,$/;"	e	enum:Fl_Widget::__anon12
PLAIN	/usr/include/FL/Fl_File_Icon.H	/^    PLAIN,			\/\/ Only plain files$/;"	e	enum:Fl_File_Icon::__anon7
POLYGON	/usr/include/FL/Fl_File_Icon.H	/^    POLYGON,			\/\/ Start of polygon$/;"	e	enum:Fl_File_Icon::__anon8
POPUP1	/usr/include/FL/Fl_Menu_Button.H	/^  enum {POPUP1 = 1, POPUP2, POPUP12, POPUP3, POPUP13, POPUP23, POPUP123};$/;"	e	enum:Fl_Menu_Button::__anon32
POPUP12	/usr/include/FL/Fl_Menu_Button.H	/^  enum {POPUP1 = 1, POPUP2, POPUP12, POPUP3, POPUP13, POPUP23, POPUP123};$/;"	e	enum:Fl_Menu_Button::__anon32
POPUP123	/usr/include/FL/Fl_Menu_Button.H	/^  enum {POPUP1 = 1, POPUP2, POPUP12, POPUP3, POPUP13, POPUP23, POPUP123};$/;"	e	enum:Fl_Menu_Button::__anon32
POPUP13	/usr/include/FL/Fl_Menu_Button.H	/^  enum {POPUP1 = 1, POPUP2, POPUP12, POPUP3, POPUP13, POPUP23, POPUP123};$/;"	e	enum:Fl_Menu_Button::__anon32
POPUP2	/usr/include/FL/Fl_Menu_Button.H	/^  enum {POPUP1 = 1, POPUP2, POPUP12, POPUP3, POPUP13, POPUP23, POPUP123};$/;"	e	enum:Fl_Menu_Button::__anon32
POPUP23	/usr/include/FL/Fl_Menu_Button.H	/^  enum {POPUP1 = 1, POPUP2, POPUP12, POPUP3, POPUP13, POPUP23, POPUP123};$/;"	e	enum:Fl_Menu_Button::__anon32
POPUP3	/usr/include/FL/Fl_Menu_Button.H	/^  enum {POPUP1 = 1, POPUP2, POPUP12, POPUP3, POPUP13, POPUP23, POPUP123};$/;"	e	enum:Fl_Menu_Button::__anon32
Pixmap	/usr/include/FL/Fl_FormsPixmap.H	/^    Fl_Pixmap *Pixmap() const {return b;}$/;"	f	class:Fl_FormsPixmap
Pixmap	/usr/include/FL/Fl_FormsPixmap.H	/^    void Pixmap(Fl_Pixmap *B) {b = B;}$/;"	f	class:Fl_FormsPixmap
PlaneTranslation	camera.cpp	/^void Camera::PlaneTranslation(int x, int y)$/;"	f	class:Camera
QUAT4F_H	./vecmath/include/Quat4f.h	2;"	d
Quantity	/usr/include/FL/glut.H	/^  int Quantity;				\/\/ Number of chars in font$/;"	m	struct:Fl_Glut_StrokeFont
Quat4f	./vecmath/include/Quat4f.h	/^class Quat4f$/;"	c
Quat4f	./vecmath/src/Quat4f.cpp	/^Quat4f::Quat4f( const Quat4f& rq )$/;"	f	class:Quat4f
Quat4f	./vecmath/src/Quat4f.cpp	/^Quat4f::Quat4f( const Vector3f& v )$/;"	f	class:Quat4f
Quat4f	./vecmath/src/Quat4f.cpp	/^Quat4f::Quat4f( const Vector4f& v )$/;"	f	class:Quat4f
Quat4f	./vecmath/src/Quat4f.cpp	/^Quat4f::Quat4f( float w, float x, float y, float z )$/;"	f	class:Quat4f
Quat4f	./vecmath/src/Quat4f.cpp	/^Quat4f::Quat4f()$/;"	f	class:Quat4f
RGBcolor	/usr/include/FL/gl2opengl.h	13;"	d
RIGHT	./vecmath/include/Vector2f.h	/^	static const Vector2f RIGHT;$/;"	m	class:Vector2f
RIGHT	./vecmath/include/Vector3f.h	/^	static const Vector3f RIGHT;$/;"	m	class:Vector3f
RIGHT	./vecmath/src/Vector2f.cpp	/^const Vector2f Vector2f::RIGHT = Vector2f( 1, 0 );$/;"	m	class:Vector2f	file:
RIGHT	./vecmath/src/Vector3f.cpp	/^const Vector3f Vector3f::RIGHT = Vector3f( 1, 0, 0 );$/;"	m	class:Vector3f	file:
RIGHT	/usr/include/FL/Fl_Help_View.H	/^  enum { RIGHT = -1, CENTER, LEFT };	\/\/ Alignments$/;"	e	enum:Fl_Help_View::__anon4
RIGHT	camera.h	/^    typedef enum { NONE, LEFT, MIDDLE, RIGHT } Button;$/;"	e	enum:Camera::__anon3
Right	/usr/include/FL/glut.H	/^  GLfloat Right;$/;"	m	struct:Fl_Glut_StrokeChar
Root	/usr/include/FL/Fl_Preferences.H	/^  enum Root { SYSTEM=0, USER };$/;"	g	class:Fl_Preferences
RootNode	/usr/include/FL/Fl_Preferences.H	/^  class FL_EXPORT RootNode  \/\/ the root node manages file paths and basic reading and writing$/;"	c	class:Fl_Preferences
Run	modelerapp.cpp	/^int ModelerApplication::Run()$/;"	f	class:ModelerApplication
SHORTCUT_LABEL	/usr/include/FL/Fl_Widget.H	/^  enum {INACTIVE=1, INVISIBLE=2, OUTPUT=4, SHORTCUT_LABEL=64,$/;"	e	enum:Fl_Widget::__anon12
SINGLE	/usr/include/FL/Fl_File_Chooser.H	/^  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 }; $/;"	e	enum:Fl_File_Chooser::__anon33
SINGLE	/usr/include/FL/fl_file_chooser.H	/^  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 }; $/;"	e	enum:Fl_File_Chooser::__anon13
SKELETALMODEL_H	SkeletalModel.h	2;"	d
SYSTEM	/usr/include/FL/Fl_Preferences.H	/^  enum Root { SYSTEM=0, USER };$/;"	e	enum:Fl_Preferences::Root
SetCenter	camera.cpp	/^void Camera::SetCenter(const Vector3f& center)$/;"	f	class:Camera
SetControlValue	modelerapp.cpp	/^void ModelerApplication::SetControlValue(int controlNumber, double value)$/;"	f	class:ModelerApplication
SetDimensions	camera.cpp	/^void Camera::SetDimensions(int w, int h)$/;"	f	class:Camera
SetDistance	camera.cpp	/^void Camera::SetDistance(const float distance)$/;"	f	class:Camera
SetPerspective	camera.cpp	/^void Camera::SetPerspective(float fovy)$/;"	f	class:Camera
SetRotation	camera.cpp	/^void Camera::SetRotation(const Matrix4f& rotation)$/;"	f	class:Camera
SetVals	modelerapp.cpp	/^void ModelerControl::SetVals(const char *name, float minimum,$/;"	f	class:ModelerControl
SetViewport	camera.cpp	/^void Camera::SetViewport(int x, int y, int w, int h)$/;"	f	class:Camera
ShowControl	modelerapp.cpp	/^void ModelerApplication::ShowControl(int controlNumber)$/;"	f	class:ModelerApplication
SkeletalModel	SkeletalModel.h	/^class SkeletalModel$/;"	c
SliderCallback	modelerapp.cpp	/^void ModelerApplication::SliderCallback(Fl_Slider *, void *)$/;"	f	class:ModelerApplication
Strips	/usr/include/FL/glut.H	/^  const Fl_Glut_StrokeStrip* Strips;$/;"	m	struct:Fl_Glut_StrokeChar
Style_Table_Entry	/usr/include/FL/Fl_Text_Display.H	/^    struct Style_Table_Entry {$/;"	s	class:Fl_Text_Display
TOP	/usr/include/FL/Fl_Browser.H	/^  enum Fl_Line_Position { TOP, BOTTOM, MIDDLE };$/;"	e	enum:Fl_Browser::Fl_Line_Position
TRUE	/usr/include/FL/forms.H	47;"	d
TUPLE_H	tuple.h	2;"	d
Tuple3u	Mesh.h	/^typedef tuple< unsigned, 3 > Tuple3u;$/;"	t
UP	./vecmath/include/Vector2f.h	/^	static const Vector2f UP;$/;"	m	class:Vector2f
UP	./vecmath/include/Vector3f.h	/^	static const Vector3f UP;$/;"	m	class:Vector3f
UP	./vecmath/src/Vector2f.cpp	/^const Vector2f Vector2f::UP = Vector2f( 0, 1 );$/;"	m	class:Vector2f	file:
UP	./vecmath/src/Vector3f.cpp	/^const Vector3f Vector3f::UP = Vector3f( 0, 1, 0 );$/;"	m	class:Vector3f	file:
USER	/usr/include/FL/Fl_Preferences.H	/^  enum Root { SYSTEM=0, USER };$/;"	e	enum:Fl_Preferences::Root
Unfinished_Style_Cb	/usr/include/FL/Fl_Text_Display.H	/^    typedef void (*Unfinished_Style_Cb)(int, void *);$/;"	t	class:Fl_Text_Display
VAL	ModelerView.cpp	13;"	d	file:
VECMATH_H	./vecmath/include/vecmath.h	2;"	d
VECTOR_2F_H	./vecmath/include/Vector2f.h	2;"	d
VECTOR_3F_H	./vecmath/include/Vector3f.h	2;"	d
VECTOR_4F_H	./vecmath/include/Vector4f.h	2;"	d
VERTEX	/usr/include/FL/Fl_File_Icon.H	/^    VERTEX			\/\/ Followed by scaled X,Y$/;"	e	enum:Fl_File_Icon::__anon8
VERTICAL	/usr/include/FL/Fl_Browser_.H	/^    VERTICAL = 2,$/;"	e	enum:Fl_Browser_::__anon11
VERTICAL	/usr/include/FL/Fl_Pack.H	/^    VERTICAL = 0,$/;"	e	enum:Fl_Pack::__anon6
VERTICAL	/usr/include/FL/Fl_Scroll.H	/^    VERTICAL = 2,$/;"	e	enum:Fl_Scroll::__anon17
VERTICAL_ALWAYS	/usr/include/FL/Fl_Browser_.H	/^    VERTICAL_ALWAYS = 6,$/;"	e	enum:Fl_Browser_::__anon11
VERTICAL_ALWAYS	/usr/include/FL/Fl_Scroll.H	/^    VERTICAL_ALWAYS = 6,$/;"	e	enum:Fl_Scroll::__anon17
VISIBLE_FOCUS	/usr/include/FL/Fl_Widget.H	/^        CHANGED=128, VISIBLE_FOCUS=512, COPIED_LABEL = 1024};$/;"	e	enum:Fl_Widget::__anon12
VK_APPS	/usr/include/FL/win32.H	44;"	d
VK_LWIN	/usr/include/FL/win32.H	42;"	d
VK_RWIN	/usr/include/FL/win32.H	43;"	d
Vector2f	./vecmath/include/Vector2f.h	/^class Vector2f$/;"	c
Vector2f	./vecmath/src/Vector2f.cpp	/^Vector2f::Vector2f( const Vector2f& rv )$/;"	f	class:Vector2f
Vector2f	./vecmath/src/Vector2f.cpp	/^Vector2f::Vector2f( float f )$/;"	f	class:Vector2f
Vector2f	./vecmath/src/Vector2f.cpp	/^Vector2f::Vector2f( float x, float y )$/;"	f	class:Vector2f
Vector3f	./vecmath/include/Vector3f.h	/^class Vector3f$/;"	c
Vector3f	./vecmath/src/Vector3f.cpp	/^Vector3f::Vector3f( const Vector2f& xy, float z )$/;"	f	class:Vector3f
Vector3f	./vecmath/src/Vector3f.cpp	/^Vector3f::Vector3f( const Vector3f& rv )$/;"	f	class:Vector3f
Vector3f	./vecmath/src/Vector3f.cpp	/^Vector3f::Vector3f( float f )$/;"	f	class:Vector3f
Vector3f	./vecmath/src/Vector3f.cpp	/^Vector3f::Vector3f( float x, const Vector2f& yz )$/;"	f	class:Vector3f
Vector3f	./vecmath/src/Vector3f.cpp	/^Vector3f::Vector3f( float x, float y, float z )$/;"	f	class:Vector3f
Vector4f	./vecmath/include/Vector4f.h	/^class Vector4f$/;"	c
Vector4f	./vecmath/src/Vector4f.cpp	/^Vector4f::Vector4f( const Vector2f& xy, const Vector2f& zw )$/;"	f	class:Vector4f
Vector4f	./vecmath/src/Vector4f.cpp	/^Vector4f::Vector4f( const Vector2f& xy, float z, float w )$/;"	f	class:Vector4f
Vector4f	./vecmath/src/Vector4f.cpp	/^Vector4f::Vector4f( const Vector3f& xyz, float w )$/;"	f	class:Vector4f
Vector4f	./vecmath/src/Vector4f.cpp	/^Vector4f::Vector4f( const Vector4f& rv )$/;"	f	class:Vector4f
Vector4f	./vecmath/src/Vector4f.cpp	/^Vector4f::Vector4f( float buffer[ 4 ] )$/;"	f	class:Vector4f
Vector4f	./vecmath/src/Vector4f.cpp	/^Vector4f::Vector4f( float f )$/;"	f	class:Vector4f
Vector4f	./vecmath/src/Vector4f.cpp	/^Vector4f::Vector4f( float fx, float fy, float fz, float fw )$/;"	f	class:Vector4f
Vector4f	./vecmath/src/Vector4f.cpp	/^Vector4f::Vector4f( float x, const Vector2f& yz, float w )$/;"	f	class:Vector4f
Vector4f	./vecmath/src/Vector4f.cpp	/^Vector4f::Vector4f( float x, const Vector3f& yzw )$/;"	f	class:Vector4f
Vector4f	./vecmath/src/Vector4f.cpp	/^Vector4f::Vector4f( float x, float y, const Vector2f& zw )$/;"	f	class:Vector4f
Vertices	/usr/include/FL/glut.H	/^  const Fl_Glut_StrokeVertex* Vertices;$/;"	m	struct:Fl_Glut_StrokeStrip
Window	/usr/include/FL/mac.H	/^typedef WindowPtr Window;$/;"	t
Window	/usr/include/FL/win32.H	/^typedef HWND Window;$/;"	t
X	/usr/include/FL/glut.H	/^  GLfloat X, Y;$/;"	m	struct:Fl_Glut_StrokeVertex
XClipBox	/usr/include/FL/win32.H	/^inline void XClipBox(Fl_Region r,XRectangle* rect) {$/;"	f
XDestroyRegion	/usr/include/FL/mac.H	/^inline void XDestroyRegion(Fl_Region r) {$/;"	f
XDestroyRegion	/usr/include/FL/win32.H	/^inline void XDestroyRegion(Fl_Region r) {DeleteObject(r);}$/;"	f
XDestroyWindow	/usr/include/FL/win32.H	64;"	d
XMapWindow	/usr/include/FL/win32.H	65;"	d
XPoint	/usr/include/FL/mac.H	/^struct XPoint { int x, y; };$/;"	s
XPoint	/usr/include/FL/win32.H	/^typedef POINT XPoint;$/;"	t
XRectangle	/usr/include/FL/mac.H	/^struct XRectangle {int x, y, width, height;};$/;"	s
XRectangle	/usr/include/FL/win32.H	/^struct XRectangle {int x, y, width, height;};$/;"	s
XRectangleRegion	/usr/include/FL/mac.H	/^inline Fl_Region XRectangleRegion(int x, int y, int w, int h) {$/;"	f
XRectangleRegion	/usr/include/FL/win32.H	/^inline Fl_Region XRectangleRegion(int x, int y, int w, int h) {$/;"	f
XUnmapWindow	/usr/include/FL/win32.H	66;"	d
Y	/usr/include/FL/glut.H	/^  GLfloat X, Y;$/;"	m	struct:Fl_Glut_StrokeVertex
ZERO	./vecmath/include/Quat4f.h	/^	static const Quat4f ZERO;$/;"	m	class:Quat4f
ZERO	./vecmath/include/Vector2f.h	/^    static const Vector2f ZERO;$/;"	m	class:Vector2f
ZERO	./vecmath/include/Vector3f.h	/^	static const Vector3f ZERO;$/;"	m	class:Vector3f
ZERO	./vecmath/src/Quat4f.cpp	/^const Quat4f Quat4f::ZERO = Quat4f( 0, 0, 0, 0 );$/;"	m	class:Quat4f	file:
ZERO	./vecmath/src/Vector2f.cpp	/^const Vector2f Vector2f::ZERO = Vector2f( 0, 0 );$/;"	m	class:Vector2f	file:
ZERO	./vecmath/src/Vector3f.cpp	/^const Vector3f Vector3f::ZERO = Vector3f( 0, 0, 0 );$/;"	m	class:Vector3f	file:
_FL_DIAMOND_DOWN_BOX	/usr/include/FL/Enumerations.H	/^  _FL_DIAMOND_UP_BOX,	_FL_DIAMOND_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_DIAMOND_UP_BOX	/usr/include/FL/Enumerations.H	/^  _FL_DIAMOND_UP_BOX,	_FL_DIAMOND_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_EMBOSSED_LABEL	/usr/include/FL/Enumerations.H	/^  _FL_EMBOSSED_LABEL,$/;"	e	enum:Fl_Labeltype
_FL_ENGRAVED_LABEL	/usr/include/FL/Enumerations.H	/^  _FL_ENGRAVED_LABEL,$/;"	e	enum:Fl_Labeltype
_FL_GTK_DOWN_BOX	/usr/include/FL/Enumerations.H	/^  _FL_GTK_UP_BOX,	_FL_GTK_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_GTK_DOWN_FRAME	/usr/include/FL/Enumerations.H	/^  _FL_GTK_UP_FRAME,	_FL_GTK_DOWN_FRAME,$/;"	e	enum:Fl_Boxtype
_FL_GTK_ROUND_DOWN_BOX	/usr/include/FL/Enumerations.H	/^  _FL_GTK_ROUND_UP_BOX,	_FL_GTK_ROUND_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_GTK_ROUND_UP_BOX	/usr/include/FL/Enumerations.H	/^  _FL_GTK_ROUND_UP_BOX,	_FL_GTK_ROUND_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_GTK_THIN_DOWN_BOX	/usr/include/FL/Enumerations.H	/^  _FL_GTK_THIN_UP_BOX,	_FL_GTK_THIN_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_GTK_THIN_DOWN_FRAME	/usr/include/FL/Enumerations.H	/^  _FL_GTK_THIN_UP_FRAME,	_FL_GTK_THIN_DOWN_FRAME,$/;"	e	enum:Fl_Boxtype
_FL_GTK_THIN_UP_BOX	/usr/include/FL/Enumerations.H	/^  _FL_GTK_THIN_UP_BOX,	_FL_GTK_THIN_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_GTK_THIN_UP_FRAME	/usr/include/FL/Enumerations.H	/^  _FL_GTK_THIN_UP_FRAME,	_FL_GTK_THIN_DOWN_FRAME,$/;"	e	enum:Fl_Boxtype
_FL_GTK_UP_BOX	/usr/include/FL/Enumerations.H	/^  _FL_GTK_UP_BOX,	_FL_GTK_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_GTK_UP_FRAME	/usr/include/FL/Enumerations.H	/^  _FL_GTK_UP_FRAME,	_FL_GTK_DOWN_FRAME,$/;"	e	enum:Fl_Boxtype
_FL_ICON_LABEL	/usr/include/FL/Enumerations.H	/^  _FL_ICON_LABEL,$/;"	e	enum:Fl_Labeltype
_FL_IMAGE_LABEL	/usr/include/FL/Enumerations.H	/^  _FL_IMAGE_LABEL,$/;"	e	enum:Fl_Labeltype
_FL_MULTI_LABEL	/usr/include/FL/Enumerations.H	/^  _FL_MULTI_LABEL,$/;"	e	enum:Fl_Labeltype
_FL_OFLAT_BOX	/usr/include/FL/Enumerations.H	/^  _FL_OVAL_FRAME,	_FL_OFLAT_BOX,$/;"	e	enum:Fl_Boxtype
_FL_OSHADOW_BOX	/usr/include/FL/Enumerations.H	/^  _FL_OVAL_BOX,		_FL_OSHADOW_BOX,$/;"	e	enum:Fl_Boxtype
_FL_OVAL_BOX	/usr/include/FL/Enumerations.H	/^  _FL_OVAL_BOX,		_FL_OSHADOW_BOX,$/;"	e	enum:Fl_Boxtype
_FL_OVAL_FRAME	/usr/include/FL/Enumerations.H	/^  _FL_OVAL_FRAME,	_FL_OFLAT_BOX,$/;"	e	enum:Fl_Boxtype
_FL_PLASTIC_DOWN_BOX	/usr/include/FL/Enumerations.H	/^  _FL_PLASTIC_UP_BOX,	_FL_PLASTIC_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_PLASTIC_DOWN_FRAME	/usr/include/FL/Enumerations.H	/^  _FL_PLASTIC_UP_FRAME,	_FL_PLASTIC_DOWN_FRAME,$/;"	e	enum:Fl_Boxtype
_FL_PLASTIC_ROUND_DOWN_BOX	/usr/include/FL/Enumerations.H	/^  _FL_PLASTIC_ROUND_UP_BOX,	_FL_PLASTIC_ROUND_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_PLASTIC_ROUND_UP_BOX	/usr/include/FL/Enumerations.H	/^  _FL_PLASTIC_ROUND_UP_BOX,	_FL_PLASTIC_ROUND_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_PLASTIC_THIN_DOWN_BOX	/usr/include/FL/Enumerations.H	/^  _FL_PLASTIC_THIN_UP_BOX,	_FL_PLASTIC_THIN_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_PLASTIC_THIN_UP_BOX	/usr/include/FL/Enumerations.H	/^  _FL_PLASTIC_THIN_UP_BOX,	_FL_PLASTIC_THIN_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_PLASTIC_UP_BOX	/usr/include/FL/Enumerations.H	/^  _FL_PLASTIC_UP_BOX,	_FL_PLASTIC_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_PLASTIC_UP_FRAME	/usr/include/FL/Enumerations.H	/^  _FL_PLASTIC_UP_FRAME,	_FL_PLASTIC_DOWN_FRAME,$/;"	e	enum:Fl_Boxtype
_FL_RFLAT_BOX	/usr/include/FL/Enumerations.H	/^  _FL_ROUNDED_FRAME,	_FL_RFLAT_BOX,$/;"	e	enum:Fl_Boxtype
_FL_ROUNDED_BOX	/usr/include/FL/Enumerations.H	/^  _FL_ROUNDED_BOX,	_FL_RSHADOW_BOX,$/;"	e	enum:Fl_Boxtype
_FL_ROUNDED_FRAME	/usr/include/FL/Enumerations.H	/^  _FL_ROUNDED_FRAME,	_FL_RFLAT_BOX,$/;"	e	enum:Fl_Boxtype
_FL_ROUND_DOWN_BOX	/usr/include/FL/Enumerations.H	/^  _FL_ROUND_UP_BOX,	_FL_ROUND_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_ROUND_UP_BOX	/usr/include/FL/Enumerations.H	/^  _FL_ROUND_UP_BOX,	_FL_ROUND_DOWN_BOX,$/;"	e	enum:Fl_Boxtype
_FL_RSHADOW_BOX	/usr/include/FL/Enumerations.H	/^  _FL_ROUNDED_BOX,	_FL_RSHADOW_BOX,$/;"	e	enum:Fl_Boxtype
_FL_SHADOW_BOX	/usr/include/FL/Enumerations.H	/^  FL_BORDER_BOX,	_FL_SHADOW_BOX,$/;"	e	enum:Fl_Boxtype
_FL_SHADOW_FRAME	/usr/include/FL/Enumerations.H	/^  FL_BORDER_FRAME,	_FL_SHADOW_FRAME,$/;"	e	enum:Fl_Boxtype
_FL_SHADOW_LABEL	/usr/include/FL/Enumerations.H	/^  _FL_SHADOW_LABEL,$/;"	e	enum:Fl_Labeltype
_Fl_File_Browser_H_	/usr/include/FL/Fl_File_Browser.H	33;"	d
_Fl_Fl_File_Icon_H_	/usr/include/FL/Fl_File_Icon.H	33;"	d
_Fl_Progress_H_	/usr/include/FL/Fl_Progress.H	29;"	d
_Fl_Wizard_H_	/usr/include/FL/Fl_Wizard.H	33;"	d
_USE_MATH_DEFINES	./vecmath/src/Quat4f.cpp	1;"	d	file:
__FORMS_H__	/usr/include/FL/forms.H	29;"	d
__deprecated__	/usr/include/FL/fl_ask.H	47;"	d
__fl_attr	/usr/include/FL/fl_ask.H	45;"	d
__fl_attr	/usr/include/FL/fl_ask.H	50;"	d
_ddfdesign_kludge	/usr/include/FL/Fl_Group.H	/^  Fl_Widget* & _ddfdesign_kludge() {return resizable_;}$/;"	f	class:Fl_Group
a1	/usr/include/FL/Fl_Dial.H	/^  short a1,a2;$/;"	m	class:Fl_Dial
a2	/usr/include/FL/Fl_Dial.H	/^  short a1,a2;$/;"	m	class:Fl_Dial
ablocks_	/usr/include/FL/Fl_Help_View.H	/^		ablocks_;		\/\/ Allocated blocks$/;"	m	class:Fl_Help_View
abs	./vecmath/src/Quat4f.cpp	/^float Quat4f::abs() const$/;"	f	class:Quat4f
abs	./vecmath/src/Vector2f.cpp	/^float Vector2f::abs() const$/;"	f	class:Vector2f
abs	./vecmath/src/Vector3f.cpp	/^float Vector3f::abs() const$/;"	f	class:Vector3f
abs	./vecmath/src/Vector4f.cpp	/^float Vector4f::abs() const$/;"	f	class:Vector4f
absSquared	./vecmath/src/Quat4f.cpp	/^float Quat4f::absSquared() const$/;"	f	class:Quat4f
absSquared	./vecmath/src/Vector2f.cpp	/^float Vector2f::absSquared() const$/;"	f	class:Vector2f
absSquared	./vecmath/src/Vector3f.cpp	/^float Vector3f::absSquared() const$/;"	f	class:Vector3f
absSquared	./vecmath/src/Vector4f.cpp	/^float Vector4f::absSquared() const$/;"	f	class:Vector4f
activate	/usr/include/FL/Fl_Menu_Item.H	/^  void activate() {flags &= ~FL_MENU_INACTIVE;}$/;"	f	struct:Fl_Menu_Item
active	/usr/include/FL/Fl_Menu_Item.H	/^  int active() const {return !(flags&FL_MENU_INACTIVE);}$/;"	f	struct:Fl_Menu_Item
active	/usr/include/FL/Fl_Widget.H	/^  int active() const {return !(flags_&INACTIVE);}$/;"	f	class:Fl_Widget
activevisible	/usr/include/FL/Fl_Menu_Item.H	/^  int activevisible() const {return !(flags&0x11);}$/;"	f	struct:Fl_Menu_Item
add	/usr/include/FL/Fl_Check_Browser.H	/^  int add(const char *s) { return add((char *)s); }$/;"	f	class:Fl_Check_Browser
add	/usr/include/FL/Fl_Check_Browser.H	/^  int add(const char *s, int b) { return add((char *)s, b); }$/;"	f	class:Fl_Check_Browser
add	/usr/include/FL/Fl_Group.H	/^  void add(Fl_Widget* o) {add(*o);}$/;"	f	class:Fl_Group
add	/usr/include/FL/Fl_Input_Choice.H	/^  void add(const char *s) {$/;"	f	class:Fl_Input_Choice
add	/usr/include/FL/Fl_Menu_.H	/^  int  add(const char* a, const char* b, Fl_Callback* c,$/;"	f	class:Fl_Menu_
add	/usr/include/FL/Fl_Menu_Item.H	/^  int add(const char*a, const char* b, Fl_Callback* c,$/;"	f	struct:Fl_Menu_Item
add_color	/usr/include/FL/Fl_File_Icon.H	/^  short		*add_color(Fl_Color c)$/;"	f	class:Fl_File_Icon
add_favorites_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *add_favorites_label; $/;"	m	class:Fl_File_Chooser
add_favorites_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *add_favorites_label; $/;"	m	class:Fl_File_Chooser
add_key_binding	/usr/include/FL/Fl_Text_Editor.H	/^    void add_key_binding(int key, int state, Key_Func f)$/;"	f	class:Fl_Text_Editor
add_resizable	/usr/include/FL/Fl_Group.H	/^  void add_resizable(Fl_Widget& o) {resizable_ = &o; add(o);}$/;"	f	class:Fl_Group
add_vertex	/usr/include/FL/Fl_File_Icon.H	/^  short		*add_vertex(float x, float y)$/;"	f	class:Fl_File_Icon
add_vertex	/usr/include/FL/Fl_File_Icon.H	/^  short		*add_vertex(int x, int y)$/;"	f	class:Fl_File_Icon
align	/usr/include/FL/Fl_Widget.H	/^  Fl_Align align() const {return (Fl_Align)align_;}$/;"	f	class:Fl_Widget
align	/usr/include/FL/Fl_Widget.H	/^  void align(uchar a) {align_ = a;}$/;"	f	class:Fl_Widget
align_	/usr/include/FL/Fl_Widget.H	/^  uchar align_;$/;"	m	class:Fl_Widget
alinks_	/usr/include/FL/Fl_Help_View.H	/^		alinks_;		\/\/ Allocated links$/;"	m	class:Fl_Help_View
alist	/usr/include/FL/Fl_Gl_Window.H	/^  const int *alist;$/;"	m	class:Fl_Gl_Window
all_files_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *all_files_label; $/;"	m	class:Fl_File_Chooser
all_files_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *all_files_label; $/;"	m	class:Fl_File_Chooser
alloc	/usr/include/FL/Fl_Menu_.H	/^  uchar alloc;$/;"	m	class:Fl_Menu_
alloc_array	/usr/include/FL/Fl_Bitmap.H	/^  int alloc_array; \/\/ Non-zero if data was allocated$/;"	m	class:Fl_Bitmap
alloc_array	/usr/include/FL/Fl_Image.H	/^  int alloc_array; \/\/ Non-zero if array was allocated$/;"	m	class:Fl_RGB_Image
alloc_data	/usr/include/FL/Fl_Pixmap.H	/^  int alloc_data; \/\/ Non-zero if data was allocated$/;"	m	class:Fl_Pixmap
alloc_data_	/usr/include/FL/Fl_File_Icon.H	/^  int		alloc_data_;	\/\/ Number of allocated elements$/;"	m	class:Fl_File_Icon
alloc_handlers_	/usr/include/FL/Fl_Shared_Image.H	/^  static int	alloc_handlers_;	\/\/ Allocated format handlers$/;"	m	class:Fl_Shared_Image
alloc_image_	/usr/include/FL/Fl_Shared_Image.H	/^  int		alloc_image_;		\/\/ Was the image allocated?$/;"	m	class:Fl_Shared_Image
alloc_image_	/usr/include/FL/Fl_Tiled_Image.H	/^  int		alloc_image_;		\/\/ Did we allocate this image?$/;"	m	class:Fl_Tiled_Image
alloc_images_	/usr/include/FL/Fl_Shared_Image.H	/^  static int	alloc_images_;		\/\/ Allocated shared images$/;"	m	class:Fl_Shared_Image
angle1	/usr/include/FL/Fl_Dial.H	/^  short angle1() const {return a1;}$/;"	f	class:Fl_Dial
angle1	/usr/include/FL/Fl_Dial.H	/^  void angle1(short a) {a1 = a;}$/;"	f	class:Fl_Dial
angle2	/usr/include/FL/Fl_Dial.H	/^  short angle2() const {return a2;}$/;"	f	class:Fl_Dial
angle2	/usr/include/FL/Fl_Dial.H	/^  void angle2(short a) {a2 = a;}$/;"	f	class:Fl_Dial
angles	/usr/include/FL/Fl_Dial.H	/^  void angles(short a, short b) {a1 = a; a2 = b;}$/;"	f	class:Fl_Dial
append	/usr/include/FL/Fl_Text_Buffer.H	/^    void append(const char* t) { insert(length(), t); }$/;"	f	class:Fl_Text_Buffer
appendfile	/usr/include/FL/Fl_Text_Buffer.H	/^    int appendfile(const char *file, int buflen = 128*1024)$/;"	f	class:Fl_Text_Buffer
application_	/usr/include/FL/Fl_Preferences.H	/^    char *vendor_, *application_;$/;"	m	class:Fl_Preferences::RootNode
argument	/usr/include/FL/Fl_Menu_Item.H	/^  long argument() const {return (long)user_data_;}$/;"	f	struct:Fl_Menu_Item
argument	/usr/include/FL/Fl_Menu_Item.H	/^  void argument(long v) {user_data_ = (void*)v;}$/;"	f	struct:Fl_Menu_Item
argument	/usr/include/FL/Fl_Widget.H	/^  long argument() const {return (long)user_data_;}$/;"	f	class:Fl_Widget
argument	/usr/include/FL/Fl_Widget.H	/^  void argument(long v) {user_data_ = (void*)v;}$/;"	f	class:Fl_Widget
array	/usr/include/FL/Fl_Bitmap.H	/^  const uchar *array;$/;"	m	class:Fl_Bitmap
array	/usr/include/FL/Fl_Image.H	/^  const uchar *array;$/;"	m	class:Fl_RGB_Image
array_	/usr/include/FL/Fl_Group.H	/^  Fl_Widget** array_;$/;"	m	class:Fl_Group
aspect	/usr/include/FL/Fl_Window.H	/^  uchar dw, dh, aspect, size_range_set;$/;"	m	class:Fl_Window
atargets_	/usr/include/FL/Fl_Help_View.H	/^		atargets_;		\/\/ Allocated targets$/;"	m	class:Fl_Help_View
atclose	/usr/include/FL/Fl.H	/^  static void (*atclose)(Fl_Window*,void*);$/;"	m	class:Fl
atsu_layout	/usr/include/FL/mac.H	/^  static ATSUTextLayout atsu_layout; \/\/ windows share a global font$/;"	m	class:Fl_X
atsu_style	/usr/include/FL/mac.H	/^  static ATSUStyle      atsu_style;$/;"	m	class:Fl_X
attachments	Mesh.h	/^	std::vector< std::vector< float > > attachments;$/;"	m	struct:Mesh
attr	/usr/include/FL/Fl_Text_Display.H	/^      unsigned	attr;$/;"	m	struct:Fl_Text_Display::Style_Table_Entry
autosize	/usr/include/FL/Fl_Chart.H	/^    uchar autosize() const {return autosize_;}$/;"	f	class:Fl_Chart
autosize	/usr/include/FL/Fl_Chart.H	/^    void autosize(uchar n) {autosize_ = n;}$/;"	f	class:Fl_Chart
autosize_	/usr/include/FL/Fl_Chart.H	/^    uchar autosize_;$/;"	m	class:Fl_Chart
awake_data_	/usr/include/FL/Fl.H	/^  static void **awake_data_;$/;"	m	class:Fl
awake_ring_	/usr/include/FL/Fl.H	/^  static Fl_Awake_Handler *awake_ring_;$/;"	m	class:Fl
awake_ring_head_	/usr/include/FL/Fl.H	/^  static int awake_ring_head_;$/;"	m	class:Fl
awake_ring_size_	/usr/include/FL/Fl.H	/^  static int awake_ring_size_;$/;"	m	class:Fl
awake_ring_tail_	/usr/include/FL/Fl.H	/^  static int awake_ring_tail_;$/;"	m	class:Fl
b	/usr/include/FL/Fl_Color_Chooser.H	/^  double b() const {return b_;}$/;"	f	class:Fl_Color_Chooser
b	/usr/include/FL/Fl_FormsBitmap.H	/^    Fl_Bitmap *b;$/;"	m	class:Fl_FormsBitmap
b	/usr/include/FL/Fl_FormsPixmap.H	/^    Fl_Pixmap *b;$/;"	m	class:Fl_FormsPixmap
b_	/usr/include/FL/Fl_Color_Chooser.H	/^  double r_, g_, b_;$/;"	m	class:Fl_Color_Chooser
back_	/usr/include/FL/Fl_Help_Dialog.H	/^  Fl_Button *back_;$/;"	m	class:Fl_Help_Dialog
backbuffer_bad	/usr/include/FL/x.H	/^  char backbuffer_bad; \/\/ used for XDBE$/;"	m	class:Fl_X
belowmouse	/usr/include/FL/Fl.H	/^  static Fl_Widget* belowmouse() {return belowmouse_;}$/;"	f	class:Fl
belowmouse_	/usr/include/FL/Fl.H	/^  static Fl_Widget* belowmouse_;$/;"	m	class:Fl
bfOffBits	bitmap.h	/^    BMP_DWORD bfOffBits;$/;"	m	struct:__anon1
bfReserved1	bitmap.h	/^    BMP_WORD bfReserved1;$/;"	m	struct:__anon1
bfReserved2	bitmap.h	/^    BMP_WORD bfReserved2;$/;"	m	struct:__anon1
bfSize	bitmap.h	/^    BMP_DWORD bfSize;$/;"	m	struct:__anon1
bfType	bitmap.h	/^    BMP_WORD bfType;$/;"	m	struct:__anon1
bgcolor	/usr/include/FL/Fl_Help_View.H	/^  Fl_Color	bgcolor;	\/\/ Background color$/;"	m	struct:Fl_Help_Block
bgcolor_	/usr/include/FL/Fl_Help_View.H	/^		bgcolor_,		\/\/ Background color$/;"	m	class:Fl_Help_View
bgnclosedline	/usr/include/FL/gl2opengl.h	16;"	d
bgnline	/usr/include/FL/gl2opengl.h	14;"	d
bgnpolygon	/usr/include/FL/gl2opengl.h	15;"	d
biBitCount	bitmap.h	/^    BMP_WORD biBitCount;$/;"	m	struct:__anon2
biClrImportant	bitmap.h	/^    BMP_DWORD biClrImportant;$/;"	m	struct:__anon2
biClrUsed	bitmap.h	/^    BMP_DWORD biClrUsed;$/;"	m	struct:__anon2
biCompression	bitmap.h	/^    BMP_DWORD biCompression;$/;"	m	struct:__anon2
biHeight	bitmap.h	/^    BMP_LONG biHeight;$/;"	m	struct:__anon2
biPlanes	bitmap.h	/^    BMP_WORD biPlanes;$/;"	m	struct:__anon2
biSize	bitmap.h	/^    BMP_DWORD biSize;$/;"	m	struct:__anon2
biSizeImage	bitmap.h	/^    BMP_DWORD biSizeImage;$/;"	m	struct:__anon2
biWidth	bitmap.h	/^    BMP_LONG biWidth;$/;"	m	struct:__anon2
biXPelsPerMeter	bitmap.h	/^    BMP_LONG biXPelsPerMeter;$/;"	m	struct:__anon2
biYPelsPerMeter	bitmap.h	/^    BMP_LONG biYPelsPerMeter;$/;"	m	struct:__anon2
bindVertices	Mesh.h	/^	std::vector< Vector3f > bindVertices;$/;"	m	struct:Mesh
bindWorldToJointTransform	Joint.h	/^	Matrix4f bindWorldToJointTransform;$/;"	m	struct:Joint
bitmap	/usr/include/FL/Fl_FormsBitmap.H	/^    Fl_Bitmap *bitmap() const {return b;}$/;"	f	class:Fl_FormsBitmap
bitmap	/usr/include/FL/Fl_FormsBitmap.H	/^    void bitmap(Fl_Bitmap *B) {b = B;}$/;"	f	class:Fl_FormsBitmap
blocks_	/usr/include/FL/Fl_Help_View.H	/^  Fl_Help_Block	*blocks_;		\/\/ Blocks$/;"	m	class:Fl_Help_View
bmfh	bitmap.cpp	/^BMP_BITMAPFILEHEADER bmfh;$/;"	v
bmih	bitmap.cpp	/^BMP_BITMAPINFOHEADER bmih;$/;"	v
border	/usr/include/FL/Fl_Help_View.H	/^  uchar		border;		\/\/ Draw border?$/;"	m	struct:Fl_Help_Block
border	/usr/include/FL/Fl_Window.H	/^  int border() const	{return !(flags() & FL_NOBORDER);}$/;"	f	class:Fl_Window
bottomline	/usr/include/FL/Fl_Browser.H	/^  void bottomline(int l) { lineposition(l, BOTTOM); }$/;"	f	class:Fl_Browser
bound_key_function	/usr/include/FL/Fl_Text_Editor.H	/^    Key_Func bound_key_function(int key, int state)$/;"	f	class:Fl_Text_Editor
bounds	/usr/include/FL/Fl_Chart.H	/^    void bounds(double *a,double *b) const {*a = min; *b = max;}$/;"	f	class:Fl_Chart
bounds	/usr/include/FL/Fl_Valuator.H	/^  void bounds(double a, double b) {min=a; max=b;}$/;"	f	class:Fl_Valuator
box	/usr/include/FL/Fl_Widget.H	/^  Fl_Boxtype box() const {return (Fl_Boxtype)box_;}$/;"	f	class:Fl_Widget
box	/usr/include/FL/Fl_Widget.H	/^  void box(Fl_Boxtype a) {box_ = a;}$/;"	f	class:Fl_Widget
box_	/usr/include/FL/Fl_Widget.H	/^  uchar box_;$/;"	m	class:Fl_Widget
brush	/usr/include/FL/win32.H	/^  int brush;	\/\/ ref to solid brush, 0 if none created yet$/;"	m	struct:Fl_XMap
buffer	/usr/include/FL/Fl_Input_.H	/^  char* buffer;$/;"	m	class:Fl_Input_
buffer	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Text_Buffer* buffer() { return mBuffer; }$/;"	f	class:Fl_Text_Display
buffer	/usr/include/FL/Fl_Text_Display.H	/^    void buffer(Fl_Text_Buffer& buf) { buffer(&buf); }$/;"	f	class:Fl_Text_Display
bufsize	/usr/include/FL/Fl_Input_.H	/^  int bufsize;$/;"	m	class:Fl_Input_
buttons_	/usr/include/FL/Fl_File_Input.H	/^  short		buttons_[200];$/;"	m	class:Fl_File_Input
bvalue	/usr/include/FL/Fl_Color_Chooser.H	/^  Flcc_Value_Input bvalue;$/;"	m	class:Fl_Color_Chooser
cache	/usr/include/FL/Fl_Browser.H	/^  FL_BLINE *cache;$/;"	m	class:Fl_Browser
cache	/usr/include/FL/Fl_Check_Browser.H	/^  cb_item *cache;$/;"	m	class:Fl_Check_Browser
cached_item	/usr/include/FL/Fl_Check_Browser.H	/^  int cached_item;$/;"	m	class:Fl_Check_Browser
cacheline	/usr/include/FL/Fl_Browser.H	/^  int cacheline;		\/\/ line number of cache$/;"	m	class:Fl_Browser
call_modify_callbacks	/usr/include/FL/Fl_Text_Buffer.H	/^    void call_modify_callbacks() { call_modify_callbacks(0, 0, 0, 0, 0); }$/;"	f	class:Fl_Text_Buffer
call_predelete_callbacks	/usr/include/FL/Fl_Text_Buffer.H	/^    void call_predelete_callbacks() { call_predelete_callbacks(0, 0); }$/;"	f	class:Fl_Text_Buffer
callback	/usr/include/FL/Fl_Menu_Item.H	/^  Fl_Callback_p callback() const {return callback_;}$/;"	f	struct:Fl_Menu_Item
callback	/usr/include/FL/Fl_Menu_Item.H	/^  void callback(Fl_Callback* c) {callback_=c;}$/;"	f	struct:Fl_Menu_Item
callback	/usr/include/FL/Fl_Menu_Item.H	/^  void callback(Fl_Callback* c, void* p) {callback_=c; user_data_=p;}$/;"	f	struct:Fl_Menu_Item
callback	/usr/include/FL/Fl_Menu_Item.H	/^  void callback(Fl_Callback0*c) {callback_=(Fl_Callback*)c;}$/;"	f	struct:Fl_Menu_Item
callback	/usr/include/FL/Fl_Menu_Item.H	/^  void callback(Fl_Callback1*c, long p=0) {callback_=(Fl_Callback*)c; user_data_=(void*)p;}$/;"	f	struct:Fl_Menu_Item
callback	/usr/include/FL/Fl_Widget.H	/^  Fl_Callback_p callback() const {return callback_;}$/;"	f	class:Fl_Widget
callback	/usr/include/FL/Fl_Widget.H	/^  void callback(Fl_Callback* c) {callback_=c;}$/;"	f	class:Fl_Widget
callback	/usr/include/FL/Fl_Widget.H	/^  void callback(Fl_Callback* c, void* p) {callback_=c; user_data_=p;}$/;"	f	class:Fl_Widget
callback	/usr/include/FL/Fl_Widget.H	/^  void callback(Fl_Callback0*c) {callback_=(Fl_Callback*)c;}$/;"	f	class:Fl_Widget
callback	/usr/include/FL/Fl_Widget.H	/^  void callback(Fl_Callback1*c, long p=0) {callback_=(Fl_Callback*)c; user_data_=(void*)p;}$/;"	f	class:Fl_Widget
callback_	/usr/include/FL/Fl_File_Chooser.H	/^  void (*callback_)(Fl_File_Chooser*, void *); $/;"	m	class:Fl_File_Chooser
callback_	/usr/include/FL/Fl_Menu_Item.H	/^  Fl_Callback *callback_;$/;"	m	struct:Fl_Menu_Item
callback_	/usr/include/FL/Fl_Widget.H	/^  Fl_Callback* callback_;$/;"	m	class:Fl_Widget
callback_	/usr/include/FL/fl_file_chooser.H	/^  void (*callback_)(Fl_File_Chooser*, void *); $/;"	m	class:Fl_File_Chooser
can_do	/usr/include/FL/Fl_Gl_Window.H	/^  int can_do() {return can_do(mode_,alist);}$/;"	f	class:Fl_Gl_Window
can_do	/usr/include/FL/Fl_Gl_Window.H	/^  static int can_do(const int *m) {return can_do(0, m);}$/;"	f	class:Fl_Gl_Window
can_do	/usr/include/FL/Fl_Gl_Window.H	/^  static int can_do(int m) {return can_do(m,0);}$/;"	f	class:Fl_Gl_Window
cancelButton	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Button *cancelButton;$/;"	m	class:Fl_File_Chooser
cancelButton	/usr/include/FL/fl_file_chooser.H	/^  Fl_Button *cancelButton;$/;"	m	class:Fl_File_Chooser
cb_Exit	modelerui.cpp	/^void ModelerUserInterface::cb_Exit(Fl_Menu_* o, void* v) {$/;"	f	class:ModelerUserInterface
cb_Exit_i	modelerui.cpp	/^inline void ModelerUserInterface::cb_Exit_i(Fl_Menu_*, void*) {$/;"	f	class:ModelerUserInterface
cb_Open	modelerui.cpp	/^void ModelerUserInterface::cb_Open(Fl_Menu_* o, void* v) {$/;"	f	class:ModelerUserInterface
cb_Open_i	modelerui.cpp	/^inline void ModelerUserInterface::cb_Open_i(Fl_Menu_*, void*) {$/;"	f	class:ModelerUserInterface
cb_Save	modelerui.cpp	/^void ModelerUserInterface::cb_Save(Fl_Menu_* o, void* v) {$/;"	f	class:ModelerUserInterface
cb_Save1	modelerui.cpp	/^void ModelerUserInterface::cb_Save1(Fl_Menu_* o, void* v) {$/;"	f	class:ModelerUserInterface
cb_Save1_i	modelerui.cpp	/^inline void ModelerUserInterface::cb_Save1_i(Fl_Menu_*, void*) {$/;"	f	class:ModelerUserInterface
cb_Save_i	modelerui.cpp	/^inline void ModelerUserInterface::cb_Save_i(Fl_Menu_*, void*) {$/;"	f	class:ModelerUserInterface
cb_item	/usr/include/FL/Fl_Check_Browser.H	/^  struct cb_item {$/;"	s	class:Fl_Check_Browser
cb_m_controlsAnimOnMenu	modelerui.cpp	/^void ModelerUserInterface::cb_m_controlsAnimOnMenu(Fl_Menu_* o, void* v) {$/;"	f	class:ModelerUserInterface
cb_m_controlsAnimOnMenu_i	modelerui.cpp	/^inline void ModelerUserInterface::cb_m_controlsAnimOnMenu_i(Fl_Menu_*, void*) {$/;"	f	class:ModelerUserInterface
cb_m_controlsBrowser	modelerui.cpp	/^void ModelerUserInterface::cb_m_controlsBrowser(Fl_Browser* o, void* v) {$/;"	f	class:ModelerUserInterface
cb_m_controlsBrowser_i	modelerui.cpp	/^inline void ModelerUserInterface::cb_m_controlsBrowser_i(Fl_Browser*, void*) {$/;"	f	class:ModelerUserInterface
cb_m_controlsWindow	modelerui.cpp	/^void ModelerUserInterface::cb_m_controlsWindow(Fl_Double_Window* o, void* v) {$/;"	f	class:ModelerUserInterface
cb_m_controlsWindow_i	modelerui.cpp	/^inline void ModelerUserInterface::cb_m_controlsWindow_i(Fl_Double_Window*, void*) {$/;"	f	class:ModelerUserInterface
cb_m_modelerWindow	modelerui.cpp	/^void ModelerUserInterface::cb_m_modelerWindow(Fl_Double_Window* o, void* v) {$/;"	f	class:ModelerUserInterface
cb_m_modelerWindow_i	modelerui.cpp	/^inline void ModelerUserInterface::cb_m_modelerWindow_i(Fl_Double_Window*, void*) {$/;"	f	class:ModelerUserInterface
changed	/usr/include/FL/Fl_Input_Choice.H	/^  int changed() const { $/;"	f	class:Fl_Input_Choice
changed	/usr/include/FL/Fl_Widget.H	/^  int changed() const {return flags_&CHANGED;}$/;"	f	class:Fl_Widget
charstr	/usr/include/FL/gl2opengl.h	23;"	d
check	/usr/include/FL/Fl.H	37;"	d
check	/usr/include/FL/Fl_Menu_Item.H	/^  void check() {flags |= FL_MENU_VALUE;}$/;"	f	struct:Fl_Menu_Item
check	/usr/include/FL/Fl_Menu_Item.H	35;"	d
check	/usr/include/FL/mac.H	40;"	d
checkbox	/usr/include/FL/Fl_Menu_Item.H	/^  int checkbox() const {return flags&FL_MENU_TOGGLE;}$/;"	f	struct:Fl_Menu_Item
checked	/usr/include/FL/Fl_Check_Browser.H	/^	  char checked;$/;"	m	struct:Fl_Check_Browser::cb_item
checked	/usr/include/FL/Fl_Menu_Item.H	/^  int checked() const {return flags&FL_MENU_VALUE;}$/;"	f	struct:Fl_Menu_Item
child	/usr/include/FL/Fl_Group.H	/^  Fl_Widget* child(int n) const {return array()[n];}$/;"	f	class:Fl_Group
child_	/usr/include/FL/Fl_Preferences.H	/^    Node *child_, *next_, *parent_;$/;"	m	class:Fl_Preferences::Node
children	/usr/include/FL/Fl_Group.H	/^  int children() const {return children_;}$/;"	f	class:Fl_Group
children	Joint.h	/^	std::vector< Joint* > children; \/\/ list of children$/;"	m	struct:Joint
children_	/usr/include/FL/Fl_Group.H	/^  int children_;$/;"	m	class:Fl_Group
choice	/usr/include/FL/Fl_Color_Chooser.H	/^  Fl_Choice choice;$/;"	m	class:Fl_Color_Chooser
clear	/usr/include/FL/Fl_Button.H	/^  int clear() {return value(0);}$/;"	f	class:Fl_Button
clear	/usr/include/FL/Fl_File_Icon.H	/^  void		clear() { num_data_ = 0; }$/;"	f	class:Fl_File_Icon
clear	/usr/include/FL/Fl_Input_Choice.H	/^  void clear() {$/;"	f	class:Fl_Input_Choice
clear	/usr/include/FL/Fl_Menu_Item.H	/^  void clear() {flags &= ~FL_MENU_VALUE;}$/;"	f	struct:Fl_Menu_Item
clear	/usr/include/FL/gl2opengl.h	/^inline void clear() {glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);}$/;"	f
clear	MatrixStack.cpp	/^void MatrixStack::clear()$/;"	f	class:MatrixStack
clear_border	/usr/include/FL/Fl_Window.H	/^  void clear_border()	{set_flag(FL_NOBORDER);}$/;"	f	class:Fl_Window
clear_changed	/usr/include/FL/Fl_Input_Choice.H	/^  void clear_changed() { $/;"	f	class:Fl_Input_Choice
clear_changed	/usr/include/FL/Fl_Widget.H	/^  void clear_changed() {flags_ &= ~CHANGED;}$/;"	f	class:Fl_Widget
clear_damage	/usr/include/FL/Fl_Widget.H	/^  void clear_damage(uchar c = 0) {damage_ = c;}$/;"	f	class:Fl_Widget
clear_flag	/usr/include/FL/Fl_Widget.H	/^  void clear_flag(int c) {flags_ &= ~c;}$/;"	f	class:Fl_Widget
clear_output	/usr/include/FL/Fl_Widget.H	/^  void clear_output() {flags_ &= ~OUTPUT;}$/;"	f	class:Fl_Widget
clear_overlay	/usr/include/FL/Fl_Menu_Window.H	/^  void clear_overlay() {set_flag(NO_OVERLAY);}$/;"	f	class:Fl_Menu_Window
clear_visible	/usr/include/FL/Fl_Widget.H	/^  void clear_visible() {flags_ |= INVISIBLE;}$/;"	f	class:Fl_Widget
clear_visible_focus	/usr/include/FL/Fl_Widget.H	/^  void clear_visible_focus() { flags_ &= ~VISIBLE_FOCUS; }$/;"	f	class:Fl_Widget
clip_children	/usr/include/FL/Fl_Group.H	/^  int clip_children() { return (flags() & CLIP_CHILDREN) != 0; }$/;"	f	class:Fl_Group
clip_children	/usr/include/FL/Fl_Group.H	/^  void clip_children(int c) { if (c) set_flag(CLIP_CHILDREN); else clear_flag(CLIP_CHILDREN); }$/;"	f	class:Fl_Group
cmov	/usr/include/FL/gl2opengl.h	22;"	d
col	/usr/include/FL/Fl_Chart.H	/^   unsigned col;$/;"	m	struct:FL_CHART_ENTRY
color	/usr/include/FL/Fl_Text_Display.H	/^      Fl_Color	color;$/;"	m	struct:Fl_Text_Display::Style_Table_Entry
color	/usr/include/FL/Fl_Tooltip.H	/^  static Fl_Color color() { return (Fl_Color)color_; }$/;"	f	class:Fl_Tooltip
color	/usr/include/FL/Fl_Tooltip.H	/^  static void color(unsigned c) { color_ = c; }$/;"	f	class:Fl_Tooltip
color	/usr/include/FL/Fl_Widget.H	/^  Fl_Color color() const {return (Fl_Color)color_;}$/;"	f	class:Fl_Widget
color	/usr/include/FL/Fl_Widget.H	/^  unsigned color;$/;"	m	struct:Fl_Label
color	/usr/include/FL/Fl_Widget.H	/^  void color(unsigned a) {color_ = a;}$/;"	f	class:Fl_Widget
color	/usr/include/FL/Fl_Widget.H	/^  void color(unsigned a, unsigned b) {color_=a; color2_=b;}$/;"	f	class:Fl_Widget
color	/usr/include/FL/gl2opengl.h	/^inline void color(int n) {glIndexi(n);}$/;"	f
color2	/usr/include/FL/Fl_Widget.H	/^  Fl_Color color2() const {return (Fl_Color)color2_;}$/;"	f	class:Fl_Widget
color2	/usr/include/FL/Fl_Widget.H	/^  void color2(unsigned a) {color2_ = a;}$/;"	f	class:Fl_Widget
color2_	/usr/include/FL/Fl_Widget.H	/^  unsigned color2_;$/;"	m	class:Fl_Widget
color_	/usr/include/FL/Fl_Tooltip.H	/^  static unsigned color_;$/;"	m	class:Fl_Tooltip
color_	/usr/include/FL/Fl_Widget.H	/^  unsigned color_;$/;"	m	class:Fl_Widget
column_char	/usr/include/FL/Fl_Browser.H	/^  char column_char() const {return column_char_;}$/;"	f	class:Fl_Browser
column_char	/usr/include/FL/Fl_Browser.H	/^  void column_char(char c) {column_char_ = c;}$/;"	f	class:Fl_Browser
column_char_	/usr/include/FL/Fl_Browser.H	/^  char column_char_;		\/\/ alternative to tab$/;"	m	class:Fl_Browser
column_widths	/usr/include/FL/Fl_Browser.H	/^  const int* column_widths() const {return column_widths_;}$/;"	f	class:Fl_Browser
column_widths	/usr/include/FL/Fl_Browser.H	/^  void column_widths(const int* l) {column_widths_ = l;}$/;"	f	class:Fl_Browser
column_widths_	/usr/include/FL/Fl_Browser.H	/^  const int* column_widths_;$/;"	m	class:Fl_Browser
compose_reset	/usr/include/FL/Fl.H	/^  static void compose_reset() {compose_state = 0;}$/;"	f	class:Fl
compose_state	/usr/include/FL/Fl.H	/^  static int compose_state;$/;"	m	class:Fl
computeBindWorldToJointTransforms	SkeletalModel.cpp	/^void SkeletalModel::computeBindWorldToJointTransforms()$/;"	f	class:SkeletalModel
conjugate	./vecmath/src/Quat4f.cpp	/^void Quat4f::conjugate()$/;"	f	class:Quat4f
conjugated	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::conjugated() const$/;"	f	class:Quat4f
context	/usr/include/FL/Fl_Gl_Window.H	/^  void* context() const {return context_;}$/;"	f	class:Fl_Gl_Window
context_	/usr/include/FL/Fl_Gl_Window.H	/^  GLContext context_;$/;"	m	class:Fl_Gl_Window
context_valid	/usr/include/FL/Fl_Gl_Window.H	/^  char context_valid() const {return valid_f_ & 2;}$/;"	f	class:Fl_Gl_Window
context_valid	/usr/include/FL/Fl_Gl_Window.H	/^  void context_valid(char v) {if (v) valid_f_ |= 2; else valid_f_ &= 0xfd;}$/;"	f	class:Fl_Gl_Window
contrast	/usr/include/FL/Enumerations.H	446;"	d
copy	/usr/include/FL/Fl_Bitmap.H	/^  Fl_Image *copy() { return copy(w(), h()); }$/;"	f	class:Fl_Bitmap
copy	/usr/include/FL/Fl_Image.H	/^  Fl_Image *copy() { return copy(w(), h()); }$/;"	f	class:Fl_Image
copy	/usr/include/FL/Fl_Image.H	/^  Fl_Image *copy() { return copy(w(), h()); }$/;"	f	class:Fl_RGB_Image
copy	/usr/include/FL/Fl_Pixmap.H	/^  Fl_Image *copy() { return copy(w(), h()); }$/;"	f	class:Fl_Pixmap
copy	/usr/include/FL/Fl_Shared_Image.H	/^  Fl_Image *copy() { return copy(w(), h()); }$/;"	f	class:Fl_Shared_Image
copy	/usr/include/FL/Fl_Tiled_Image.H	/^  Fl_Image *copy() { return copy(w(), h()); }$/;"	f	class:Fl_Tiled_Image
copysign	/usr/include/FL/math.h	/^inline double copysign(double a, double b) {return b<0 ? -a : a;}$/;"	f
count	/usr/include/FL/Fl_Image.H	/^  int count() const {return count_;}$/;"	f	class:Fl_Image
count_	/usr/include/FL/Fl_Image.H	/^  int w_, h_, d_, ld_, count_;$/;"	m	class:Fl_Image
cross	./vecmath/src/Vector2f.cpp	/^Vector3f Vector2f::cross( const Vector2f& v0, const Vector2f& v1 )$/;"	f	class:Vector2f
cross	./vecmath/src/Vector3f.cpp	/^Vector3f Vector3f::cross( const Vector3f& v0, const Vector3f& v1 )$/;"	f	class:Vector3f
cubicInterpolate	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::cubicInterpolate( const Quat4f& q0, const Quat4f& q1, const Quat4f& q2, const Quat4f& q3, float t )$/;"	f	class:Quat4f
cubicInterpolate	./vecmath/src/Vector3f.cpp	/^Vector3f Vector3f::cubicInterpolate( const Vector3f& p0, const Vector3f& p1, const Vector3f& p2, const Vector3f& p3, float t )$/;"	f	class:Vector3f
current	/usr/include/FL/Fl_Tooltip.H	/^  static Fl_Widget* current() {return widget_;}$/;"	f	class:Fl_Tooltip
currentJointToWorldTransform	Joint.h	/^	Matrix4f currentJointToWorldTransform;$/;"	m	struct:Joint
currentVertices	Mesh.h	/^	std::vector< Vector3f > currentVertices;$/;"	m	struct:Mesh
current_	/usr/include/FL/Fl_Group.H	/^  static Fl_Group *current_;$/;"	m	class:Fl_Group
current_	/usr/include/FL/Fl_Window.H	/^  static Fl_Window *current_;$/;"	m	class:Fl_Window
current_pos	/usr/include/FL/Fl_Help_View.H	/^  static int    current_pos;$/;"	m	class:Fl_Help_View
current_view	/usr/include/FL/Fl_Help_View.H	/^  static Fl_Help_View *current_view;$/;"	m	class:Fl_Help_View
cursor	/usr/include/FL/mac.H	/^  CursHandle cursor;$/;"	m	class:Fl_X
cursor	/usr/include/FL/win32.H	/^  HCURSOR cursor;$/;"	m	class:Fl_X
cursor_bg	/usr/include/FL/Fl_Window.H	/^  Fl_Color cursor_fg, cursor_bg;$/;"	m	class:Fl_Window
cursor_color	/usr/include/FL/Fl_Input_.H	/^  Fl_Color cursor_color() const {return (Fl_Color)cursor_color_;}$/;"	f	class:Fl_Input_
cursor_color	/usr/include/FL/Fl_Input_.H	/^  void cursor_color(unsigned n) {cursor_color_ = n;}$/;"	f	class:Fl_Input_
cursor_color	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Color cursor_color() const {return mCursor_color;}$/;"	f	class:Fl_Text_Display
cursor_color	/usr/include/FL/Fl_Text_Display.H	/^    void cursor_color(Fl_Color n) {mCursor_color = n;}$/;"	f	class:Fl_Text_Display
cursor_color	/usr/include/FL/Fl_Value_Input.H	/^  Fl_Color cursor_color() const {return input.cursor_color();}$/;"	f	class:Fl_Value_Input
cursor_color	/usr/include/FL/Fl_Value_Input.H	/^  void cursor_color(unsigned n) {input.cursor_color(n);}$/;"	f	class:Fl_Value_Input
cursor_color_	/usr/include/FL/Fl_Input_.H	/^  unsigned cursor_color_;$/;"	m	class:Fl_Input_
cursor_default	/usr/include/FL/Fl_Window.H	/^  Fl_Cursor cursor_default;$/;"	m	class:Fl_Window
cursor_fg	/usr/include/FL/Fl_Window.H	/^  Fl_Color cursor_fg, cursor_bg;$/;"	m	class:Fl_Window
custom_filter_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *custom_filter_label; $/;"	m	class:Fl_File_Chooser
custom_filter_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *custom_filter_label; $/;"	m	class:Fl_File_Chooser
cut	/usr/include/FL/Fl_Input_.H	/^  int cut() {return replace(position(), mark(), 0);}$/;"	f	class:Fl_Input_
cut	/usr/include/FL/Fl_Input_.H	/^  int cut(int a, int b) {return replace(a, b, 0);}$/;"	f	class:Fl_Input_
cut	/usr/include/FL/Fl_Input_.H	/^  int cut(int n) {return replace(position(), position()+n, 0);}$/;"	f	class:Fl_Input_
d	/usr/include/FL/Fl_Image.H	/^  int d() const {return d_;}$/;"	f	class:Fl_Image
d	/usr/include/FL/Fl_Image.H	/^  void d(int D) {d_ = D;}$/;"	f	class:Fl_Image
d_	/usr/include/FL/Fl_Image.H	/^  int w_, h_, d_, ld_, count_;$/;"	m	class:Fl_Image
d_name	/usr/include/FL/filename.H	/^struct dirent {char d_name[1];};$/;"	m	struct:dirent
damage	/usr/include/FL/Fl.H	/^  static int damage() {return damage_;}$/;"	f	class:Fl
damage	/usr/include/FL/Fl.H	/^  static void damage(int d) {damage_ = d;}$/;"	f	class:Fl
damage	/usr/include/FL/Fl_Widget.H	/^  uchar damage() const {return damage_;}$/;"	f	class:Fl_Widget
damage1_	/usr/include/FL/Fl_Gl_Window.H	/^  char damage1_; \/\/ damage() of back buffer$/;"	m	class:Fl_Gl_Window
damage_	/usr/include/FL/Fl.H	/^  static int damage_;$/;"	m	class:Fl
damage_	/usr/include/FL/Fl_Widget.H	/^  uchar damage_;$/;"	m	class:Fl_Widget
damage_range1_end	/usr/include/FL/Fl_Text_Display.H	/^    int damage_range1_start, damage_range1_end;$/;"	m	class:Fl_Text_Display
damage_range1_start	/usr/include/FL/Fl_Text_Display.H	/^    int damage_range1_start, damage_range1_end;$/;"	m	class:Fl_Text_Display
damage_range2_end	/usr/include/FL/Fl_Text_Display.H	/^    int damage_range2_start, damage_range2_end;$/;"	m	class:Fl_Text_Display
damage_range2_start	/usr/include/FL/Fl_Text_Display.H	/^    int damage_range2_start, damage_range2_end;$/;"	m	class:Fl_Text_Display
data	/usr/include/FL/Fl_Image.H	/^  const char * const *data() const {return data_;}$/;"	f	class:Fl_Image
data	/usr/include/FL/Fl_Image.H	/^  void data(const char * const *p, int c) {data_ = p; count_ = c;}$/;"	f	class:Fl_Image
data	tuple.h	/^    TYPE data[SIZE];$/;"	m	class:tuple
data_	/usr/include/FL/Fl_File_Chooser.H	/^  void *data_; $/;"	m	class:Fl_File_Chooser
data_	/usr/include/FL/Fl_File_Icon.H	/^  short		*data_;		\/\/ Icon data$/;"	m	class:Fl_File_Icon
data_	/usr/include/FL/Fl_Image.H	/^  const char * const *data_;$/;"	m	class:Fl_Image
data_	/usr/include/FL/Fl_Preferences.H	/^    char *data_;$/;"	m	class:Fl_Preferences::Name
data_	/usr/include/FL/fl_file_chooser.H	/^  void *data_; $/;"	m	class:Fl_File_Chooser
deactivate	/usr/include/FL/Fl_Menu_Item.H	/^  void deactivate() {flags |= FL_MENU_INACTIVE;}$/;"	f	struct:Fl_Menu_Item
deactivate	/usr/include/FL/Fl_Repeat_Button.H	/^  void deactivate() {$/;"	f	class:Fl_Repeat_Button
default_key_function	/usr/include/FL/Fl_Text_Editor.H	/^    void default_key_function(Key_Func f) { default_key_function_ = f; }$/;"	f	class:Fl_Text_Editor
default_key_function_	/usr/include/FL/Fl_Text_Editor.H	/^    Key_Func default_key_function_;$/;"	m	class:Fl_Text_Editor
defcolor_	/usr/include/FL/Fl_Help_View.H	/^  Fl_Color	defcolor_,		\/\/ Default text color$/;"	m	class:Fl_Help_View
deimage	/usr/include/FL/Fl_Widget.H	/^  Fl_Image* deimage() {return label_.deimage;}$/;"	f	class:Fl_Widget
deimage	/usr/include/FL/Fl_Widget.H	/^  Fl_Image* deimage;$/;"	m	struct:Fl_Label
deimage	/usr/include/FL/Fl_Widget.H	/^  void deimage(Fl_Image& a) {label_.deimage=&a;}$/;"	f	class:Fl_Widget
deimage	/usr/include/FL/Fl_Widget.H	/^  void deimage(Fl_Image* a) {label_.deimage=a;}$/;"	f	class:Fl_Widget
delay	/usr/include/FL/Fl_Timer.H	/^  double delay, total;$/;"	m	class:Fl_Timer
delay	/usr/include/FL/Fl_Tooltip.H	/^  static float delay() { return delay_; }$/;"	f	class:Fl_Tooltip
delay	/usr/include/FL/Fl_Tooltip.H	/^  static void delay(float f) { delay_ = f; }$/;"	f	class:Fl_Tooltip
delay_	/usr/include/FL/Fl_Tooltip.H	/^  static float delay_;$/;"	m	class:Fl_Tooltip
determinant	./vecmath/src/Matrix2f.cpp	/^float Matrix2f::determinant()$/;"	f	class:Matrix2f
determinant	./vecmath/src/Matrix3f.cpp	/^float Matrix3f::determinant() const$/;"	f	class:Matrix3f
determinant	./vecmath/src/Matrix4f.cpp	/^float Matrix4f::determinant() const$/;"	f	class:Matrix4f
determinant2x2	./vecmath/src/Matrix2f.cpp	/^float Matrix2f::determinant2x2( float m00, float m01,$/;"	f	class:Matrix2f
determinant3x3	./vecmath/src/Matrix3f.cpp	/^float Matrix3f::determinant3x3( float m00, float m01, float m02,$/;"	f	class:Matrix3f
dh	/usr/include/FL/Fl_Window.H	/^  uchar dw, dh, aspect, size_range_set;$/;"	m	class:Fl_Window
direction	/usr/include/FL/Fl_Timer.H	/^  char direction() const {return direction_;}$/;"	f	class:Fl_Timer
direction	/usr/include/FL/Fl_Timer.H	/^  void direction(char d) {direction_ = d;}$/;"	f	class:Fl_Timer
direction_	/usr/include/FL/Fl_Timer.H	/^  char on, direction_;$/;"	m	class:Fl_Timer
directory	/usr/include/FL/Fl_Help_View.H	/^  const char	*directory() const { if (directory_[0]) return (directory_);$/;"	f	class:Fl_Help_View
directory_	/usr/include/FL/Fl_File_Browser.H	/^  const char	*directory_;$/;"	m	class:Fl_File_Browser
directory_	/usr/include/FL/Fl_File_Chooser.H	/^  char directory_[1024]; $/;"	m	class:Fl_File_Chooser
directory_	/usr/include/FL/Fl_Help_View.H	/^  char		directory_[1024];	\/\/ Directory for current file$/;"	m	class:Fl_Help_View
directory_	/usr/include/FL/fl_file_chooser.H	/^  char directory_[1024]; $/;"	m	class:Fl_File_Chooser
dirent	/usr/include/FL/filename.H	/^struct dirent {char d_name[1];};$/;"	s
dirty_	/usr/include/FL/Fl_Preferences.H	/^    char dirty_;$/;"	m	class:Fl_Preferences::Node
disable	/usr/include/FL/Fl_Tooltip.H	/^  static void disable() { enabled_ = 0; }$/;"	f	class:Fl_Tooltip
display	/usr/include/FL/glut.H	/^  void (*display)();$/;"	m	class:Fl_Glut_Window
display_insert_position_hint	/usr/include/FL/Fl_Text_Display.H	/^    int display_insert_position_hint;$/;"	m	class:Fl_Text_Display
displayed	/usr/include/FL/Fl_Browser.H	/^  int displayed(int n) const {return Fl_Browser_::displayed(find_line(n));}$/;"	f	class:Fl_Browser
dnd_text_ops	/usr/include/FL/Fl.H	/^  static int  dnd_text_ops() { return dnd_text_ops_; }$/;"	f	class:Fl
dnd_text_ops	/usr/include/FL/Fl.H	/^  static void dnd_text_ops(int v) { dnd_text_ops_ = v; }$/;"	f	class:Fl
dnd_text_ops_	/usr/include/FL/Fl.H	/^  static int dnd_text_ops_;$/;"	m	class:Fl
do_callback	/usr/include/FL/Fl_Menu_Item.H	/^  void do_callback(Fl_Widget* o) const {callback_(o, user_data_);}$/;"	f	struct:Fl_Menu_Item
do_callback	/usr/include/FL/Fl_Menu_Item.H	/^  void do_callback(Fl_Widget* o,long arg) const {callback_(o, (void*)arg);}$/;"	f	struct:Fl_Menu_Item
do_callback	/usr/include/FL/Fl_Menu_Item.H	/^  void do_callback(Fl_Widget* o,void* arg) const {callback_(o, arg);}$/;"	f	struct:Fl_Menu_Item
do_callback	/usr/include/FL/Fl_Widget.H	/^  void do_callback() {callback_(this,user_data_); if (callback_ != default_callback) clear_changed();}$/;"	f	class:Fl_Widget
do_callback	/usr/include/FL/Fl_Widget.H	/^  void do_callback(Fl_Widget* o,long arg) {callback_(o,(void*)arg); if (callback_ != default_callback) clear_changed();}$/;"	f	class:Fl_Widget
do_callback	/usr/include/FL/Fl_Widget.H	/^  void do_callback(Fl_Widget* o,void* arg=0) {callback_(o,arg); if (callback_ != default_callback) clear_changed();}$/;"	f	class:Fl_Widget
do_matching	/usr/include/FL/forms.H	/^inline int do_matching(char* a, const char* b) {return fl_filename_match(a,b);}$/;"	f
dot	./vecmath/src/Quat4f.cpp	/^float Quat4f::dot( const Quat4f& q0, const Quat4f& q1 )$/;"	f	class:Quat4f
dot	./vecmath/src/Vector2f.cpp	/^float Vector2f::dot( const Vector2f& v0, const Vector2f& v1 )$/;"	f	class:Vector2f
dot	./vecmath/src/Vector3f.cpp	/^float Vector3f::dot( const Vector3f& v0, const Vector3f& v1 )$/;"	f	class:Vector3f
dot	./vecmath/src/Vector4f.cpp	/^float Vector4f::dot( const Vector4f& v0, const Vector4f& v1 )$/;"	f	class:Vector4f
down	/usr/include/FL/Enumerations.H	447;"	d
down_box	/usr/include/FL/Fl_Button.H	/^  Fl_Boxtype down_box() const {return (Fl_Boxtype)down_box_;}$/;"	f	class:Fl_Button
down_box	/usr/include/FL/Fl_Button.H	/^  void down_box(Fl_Boxtype b) {down_box_ = b;}$/;"	f	class:Fl_Button
down_box	/usr/include/FL/Fl_File_Input.H	/^  Fl_Boxtype	down_box() const { return (Fl_Boxtype)down_box_; }$/;"	f	class:Fl_File_Input
down_box	/usr/include/FL/Fl_File_Input.H	/^  void		down_box(Fl_Boxtype b) { down_box_ = b; }$/;"	f	class:Fl_File_Input
down_box	/usr/include/FL/Fl_Input_Choice.H	/^  Fl_Boxtype down_box() const {$/;"	f	class:Fl_Input_Choice
down_box	/usr/include/FL/Fl_Input_Choice.H	/^  void down_box(Fl_Boxtype b) {$/;"	f	class:Fl_Input_Choice
down_box	/usr/include/FL/Fl_Menu_.H	/^  Fl_Boxtype down_box() const {return (Fl_Boxtype)down_box_;}$/;"	f	class:Fl_Menu_
down_box	/usr/include/FL/Fl_Menu_.H	/^  void down_box(Fl_Boxtype b) {down_box_ = b;}$/;"	f	class:Fl_Menu_
down_box_	/usr/include/FL/Fl_Button.H	/^  uchar down_box_;$/;"	m	class:Fl_Button
down_box_	/usr/include/FL/Fl_File_Input.H	/^  uchar		down_box_;$/;"	m	class:Fl_File_Input
down_box_	/usr/include/FL/Fl_Menu_.H	/^  uchar down_box_;$/;"	m	class:Fl_Menu_
down_button_	/usr/include/FL/Fl_Spinner.H	/^		down_button_;		\/\/ Down button$/;"	m	class:Fl_Spinner
down_color	/usr/include/FL/Fl_Button.H	/^  Fl_Color down_color() const {return selection_color();}$/;"	f	class:Fl_Button
down_color	/usr/include/FL/Fl_Button.H	/^  void down_color(unsigned c) {selection_color(c);}$/;"	f	class:Fl_Button
down_color	/usr/include/FL/Fl_Menu_.H	/^  Fl_Color down_color() const {return selection_color();}$/;"	f	class:Fl_Menu_
down_color	/usr/include/FL/Fl_Menu_.H	/^  void down_color(unsigned c) {selection_color(c);}$/;"	f	class:Fl_Menu_
drag	/usr/include/FL/Fl_Adjuster.H	/^  int drag;$/;"	m	class:Fl_Adjuster
dragPos	/usr/include/FL/Fl_Text_Display.H	/^    int dragPos, dragType, dragging;$/;"	m	class:Fl_Text_Display
dragType	/usr/include/FL/Fl_Text_Display.H	/^    int dragPos, dragType, dragging;$/;"	m	class:Fl_Text_Display
dragging	/usr/include/FL/Fl_Text_Display.H	/^    int dragPos, dragType, dragging;$/;"	m	class:Fl_Text_Display
draw	/usr/include/FL/Fl_Bitmap.H	/^  void draw(int X, int Y) {draw(X, Y, w(), h(), 0, 0);}$/;"	f	class:Fl_Bitmap
draw	/usr/include/FL/Fl_Image.H	/^  void draw(int X, int Y) {draw(X, Y, w(), h(), 0, 0);}$/;"	f	class:Fl_Image
draw	/usr/include/FL/Fl_Image.H	/^  void draw(int X, int Y) {draw(X, Y, w(), h(), 0, 0);}$/;"	f	class:Fl_RGB_Image
draw	/usr/include/FL/Fl_Input_Choice.H	/^    void draw() {$/;"	f	class:Fl_Input_Choice::InputMenuButton
draw	/usr/include/FL/Fl_Pixmap.H	/^  void draw(int X, int Y) {draw(X, Y, w(), h(), 0, 0);}$/;"	f	class:Fl_Pixmap
draw	/usr/include/FL/Fl_Shared_Image.H	/^  void draw(int X, int Y) { draw(X, Y, w(), h(), 0, 0); }$/;"	f	class:Fl_Shared_Image
draw	/usr/include/FL/Fl_Tiled_Image.H	/^  void draw(int X, int Y) { draw(X, Y, w(), h(), 0, 0); }$/;"	f	class:Fl_Tiled_Image
draw	Mesh.cpp	/^void Mesh::draw()$/;"	f	class:Mesh
draw	ModelerView.cpp	/^void ModelerView::draw()$/;"	f	class:ModelerView
draw	SkeletalModel.cpp	/^void SkeletalModel::draw(Matrix4f cameraMatrix, bool skeletonVisible)$/;"	f	class:SkeletalModel
drawAxes	ModelerView.cpp	/^void ModelerView::drawAxes()$/;"	f	class:ModelerView
drawJoints	SkeletalModel.cpp	/^void SkeletalModel::drawJoints( )$/;"	f	class:SkeletalModel
drawSkeleton	SkeletalModel.cpp	/^void SkeletalModel::drawSkeleton( )$/;"	f	class:SkeletalModel
draw_focus	/usr/include/FL/Fl_Widget.H	/^  void draw_focus() {draw_focus(box(),x(),y(),w(),h());}$/;"	f	class:Fl_Widget
draw_mode	/usr/include/FL/Fl_Help_View.H	/^  static int    draw_mode;$/;"	m	class:Fl_Help_View
dw	/usr/include/FL/Fl_Window.H	/^  uchar dw, dh, aspect, size_range_set;$/;"	m	class:Fl_Window
e_clicks	/usr/include/FL/Fl.H	/^  static int e_clicks;$/;"	m	class:Fl
e_dx	/usr/include/FL/Fl.H	/^  static int e_dx;$/;"	m	class:Fl
e_dy	/usr/include/FL/Fl.H	/^  static int e_dy;$/;"	m	class:Fl
e_is_click	/usr/include/FL/Fl.H	/^  static int e_is_click;$/;"	m	class:Fl
e_keysym	/usr/include/FL/Fl.H	/^  static int e_keysym;$/;"	m	class:Fl
e_length	/usr/include/FL/Fl.H	/^  static int e_length;$/;"	m	class:Fl
e_number	/usr/include/FL/Fl.H	/^  static int e_number;$/;"	m	class:Fl
e_original_keysym	/usr/include/FL/Fl.H	/^  static int e_original_keysym; \/\/ late addition$/;"	m	class:Fl
e_state	/usr/include/FL/Fl.H	/^  static int e_state;$/;"	m	class:Fl
e_text	/usr/include/FL/Fl.H	/^  static char* e_text;$/;"	m	class:Fl
e_x	/usr/include/FL/Fl.H	/^  static int e_x;$/;"	m	class:Fl
e_x_root	/usr/include/FL/Fl.H	/^  static int e_x_root;$/;"	m	class:Fl
e_y	/usr/include/FL/Fl.H	/^  static int e_y;$/;"	m	class:Fl
e_y_root	/usr/include/FL/Fl.H	/^  static int e_y_root;$/;"	m	class:Fl
enable	/usr/include/FL/Fl_Tooltip.H	/^  static void enable(int b = 1) { enabled_ = b;}$/;"	f	class:Fl_Tooltip
enabled	/usr/include/FL/Fl_Tooltip.H	/^  static int enabled() { return enabled_; }$/;"	f	class:Fl_Tooltip
enabled_	/usr/include/FL/Fl_Tooltip.H	/^  static int enabled_;$/;"	m	class:Fl_Tooltip
end	/usr/include/FL/Fl_Help_View.H	/^		*end;		\/\/ End of text$/;"	m	struct:Fl_Help_Block
end	/usr/include/FL/Fl_Text_Buffer.H	/^    int end() { return mEnd; }$/;"	f	class:Fl_Text_Selection
endclosedline	/usr/include/FL/gl2opengl.h	19;"	d
endline	/usr/include/FL/gl2opengl.h	17;"	d
endpolygon	/usr/include/FL/gl2opengl.h	18;"	d
enter	/usr/include/FL/Fl_Tooltip.H	/^  static void (*enter)(Fl_Widget* w);$/;"	m	class:Fl_Tooltip
entries	/usr/include/FL/Fl_Chart.H	/^    FL_CHART_ENTRY *entries;$/;"	m	class:Fl_Chart
entry	/usr/include/FL/Fl_Preferences.H	/^    Entry *entry;$/;"	m	class:Fl_Preferences::Node
entry	/usr/include/FL/glut.H	/^  void (*entry)(int);$/;"	m	class:Fl_Glut_Window
erase_cursor_only	/usr/include/FL/Fl_Input_.H	/^  uchar erase_cursor_only;$/;"	m	class:Fl_Input_
error	/usr/include/FL/Fl.H	/^  static void (*error)(const char*, ...);$/;"	m	class:Fl
errorcolor	/usr/include/FL/Fl_File_Input.H	/^  Fl_Color	errorcolor() const { return errorcolor_; }$/;"	f	class:Fl_File_Input
errorcolor	/usr/include/FL/Fl_File_Input.H	/^  void		errorcolor(Fl_Color c) { errorcolor_ = c; }$/;"	f	class:Fl_File_Input
errorcolor_	/usr/include/FL/Fl_File_Input.H	/^  Fl_Color	errorcolor_;$/;"	m	class:Fl_File_Input
event	/usr/include/FL/Fl.H	/^  static int event()		{return e_number;}$/;"	f	class:Fl
event_alt	/usr/include/FL/Fl.H	/^  static int event_alt() {return e_state&FL_ALT;}$/;"	f	class:Fl
event_button	/usr/include/FL/Fl.H	/^  static int event_button()	{return e_keysym-FL_Button;}$/;"	f	class:Fl
event_button1	/usr/include/FL/Fl.H	/^  static int event_button1() {return e_state&FL_BUTTON1;}$/;"	f	class:Fl
event_button2	/usr/include/FL/Fl.H	/^  static int event_button2() {return e_state&FL_BUTTON2;}$/;"	f	class:Fl
event_button3	/usr/include/FL/Fl.H	/^  static int event_button3() {return e_state&FL_BUTTON3;}$/;"	f	class:Fl
event_buttons	/usr/include/FL/Fl.H	/^  static int event_buttons() {return e_state&0x7f000000;}$/;"	f	class:Fl
event_clicks	/usr/include/FL/Fl.H	/^  static int event_clicks()	{return e_clicks;}$/;"	f	class:Fl
event_clicks	/usr/include/FL/Fl.H	/^  static void event_clicks(int i) {e_clicks = i;}$/;"	f	class:Fl
event_ctrl	/usr/include/FL/Fl.H	/^  static int event_ctrl() {return e_state&FL_CTRL;}$/;"	f	class:Fl
event_dx	/usr/include/FL/Fl.H	/^  static int event_dx()	{return e_dx;}$/;"	f	class:Fl
event_dy	/usr/include/FL/Fl.H	/^  static int event_dy()	{return e_dy;}$/;"	f	class:Fl
event_is_click	/usr/include/FL/Fl.H	/^  static int event_is_click()	{return e_is_click;}$/;"	f	class:Fl
event_is_click	/usr/include/FL/Fl.H	/^  static void event_is_click(int i) {e_is_click = i;} \/\/ only 0 works!$/;"	f	class:Fl
event_key	/usr/include/FL/Fl.H	/^  static int event_key()	{return e_keysym;}$/;"	f	class:Fl
event_length	/usr/include/FL/Fl.H	/^  static int event_length() {return e_length;}$/;"	f	class:Fl
event_original_key	/usr/include/FL/Fl.H	/^  static int event_original_key(){return e_original_keysym;}$/;"	f	class:Fl
event_shift	/usr/include/FL/Fl.H	/^  static int event_shift() {return e_state&FL_SHIFT;}$/;"	f	class:Fl
event_state	/usr/include/FL/Fl.H	/^  static int event_state()	{return e_state;}$/;"	f	class:Fl
event_state	/usr/include/FL/Fl.H	/^  static int event_state(int i) {return e_state&i;}$/;"	f	class:Fl
event_text	/usr/include/FL/Fl.H	/^  static const char* event_text() {return e_text;}$/;"	f	class:Fl
event_x	/usr/include/FL/Fl.H	/^  static int event_x()	{return e_x;}$/;"	f	class:Fl
event_x_root	/usr/include/FL/Fl.H	/^  static int event_x_root()	{return e_x_root;}$/;"	f	class:Fl
event_y	/usr/include/FL/Fl.H	/^  static int event_y()	{return e_y;}$/;"	f	class:Fl
event_y_root	/usr/include/FL/Fl.H	/^  static int event_y_root()	{return e_y_root;}$/;"	f	class:Fl
existing_file_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *existing_file_label; $/;"	m	class:Fl_File_Chooser
existing_file_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *existing_file_label; $/;"	m	class:Fl_File_Chooser
exit	/usr/include/FL/Fl_Tooltip.H	/^  static void (*exit)(Fl_Widget *w);$/;"	m	class:Fl_Tooltip
exp	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::exp() const$/;"	f	class:Quat4f
explicit	/usr/include/FL/Fl_Pixmap.H	37;"	d
faces	Mesh.h	/^	std::vector< Tuple3u > faces;$/;"	m	struct:Mesh
fatal	/usr/include/FL/Fl.H	/^  static void (*fatal)(const char*, ...);$/;"	m	class:Fl
favCancelButton	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Button *favCancelButton;$/;"	m	class:Fl_File_Chooser
favCancelButton	/usr/include/FL/fl_file_chooser.H	/^  Fl_Button *favCancelButton;$/;"	m	class:Fl_File_Chooser
favDeleteButton	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Button *favDeleteButton;$/;"	m	class:Fl_File_Chooser
favDeleteButton	/usr/include/FL/fl_file_chooser.H	/^  Fl_Button *favDeleteButton;$/;"	m	class:Fl_File_Chooser
favDownButton	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Button *favDownButton;$/;"	m	class:Fl_File_Chooser
favDownButton	/usr/include/FL/fl_file_chooser.H	/^  Fl_Button *favDownButton;$/;"	m	class:Fl_File_Chooser
favList	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_File_Browser *favList;$/;"	m	class:Fl_File_Chooser
favList	/usr/include/FL/fl_file_chooser.H	/^  Fl_File_Browser *favList;$/;"	m	class:Fl_File_Chooser
favOkButton	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Return_Button *favOkButton;$/;"	m	class:Fl_File_Chooser
favOkButton	/usr/include/FL/fl_file_chooser.H	/^  Fl_Return_Button *favOkButton;$/;"	m	class:Fl_File_Chooser
favUpButton	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Button *favUpButton;$/;"	m	class:Fl_File_Chooser
favUpButton	/usr/include/FL/fl_file_chooser.H	/^  Fl_Button *favUpButton;$/;"	m	class:Fl_File_Chooser
favWindow	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Double_Window *favWindow;$/;"	m	class:Fl_File_Chooser
favWindow	/usr/include/FL/fl_file_chooser.H	/^  Fl_Double_Window *favWindow;$/;"	m	class:Fl_File_Chooser
favoritesButton	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Menu_Button *favoritesButton;$/;"	m	class:Fl_File_Chooser
favoritesButton	/usr/include/FL/fl_file_chooser.H	/^  Fl_Menu_Button *favoritesButton;$/;"	m	class:Fl_File_Chooser
favorites_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *favorites_label; $/;"	m	class:Fl_File_Chooser
favorites_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *favorites_label; $/;"	m	class:Fl_File_Chooser
fileList	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_File_Browser *fileList;$/;"	m	class:Fl_File_Chooser
fileList	/usr/include/FL/fl_file_chooser.H	/^  Fl_File_Browser *fileList;$/;"	m	class:Fl_File_Chooser
fileName	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_File_Input *fileName;$/;"	m	class:Fl_File_Chooser
fileName	/usr/include/FL/fl_file_chooser.H	/^  Fl_File_Input *fileName;$/;"	m	class:Fl_File_Chooser
file_	/usr/include/FL/Fl_Help_Dialog.H	/^  char file_[100][256]; $/;"	m	class:Fl_Help_Dialog
filename	/usr/include/FL/Fl_Help_View.H	/^  char		filename[192],	\/\/ Reference filename$/;"	m	struct:Fl_Help_Link
filename	/usr/include/FL/Fl_Help_View.H	/^  const char	*filename() const { if (filename_[0]) return (filename_);$/;"	f	class:Fl_Help_View
filename_	/usr/include/FL/Fl_Help_View.H	/^  char		filename_[1024];	\/\/ Current filename$/;"	m	class:Fl_Help_View
filename_	/usr/include/FL/Fl_Preferences.H	/^    char *filename_;$/;"	m	class:Fl_Preferences::RootNode
filename_absolute	/usr/include/FL/filename.H	139;"	d
filename_expand	/usr/include/FL/filename.H	140;"	d
filename_ext	/usr/include/FL/filename.H	141;"	d
filename_isdir	/usr/include/FL/filename.H	142;"	d
filename_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *filename_label; $/;"	m	class:Fl_File_Chooser
filename_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *filename_label; $/;"	m	class:Fl_File_Chooser
filename_list	/usr/include/FL/filename.H	143;"	d
filename_match	/usr/include/FL/filename.H	144;"	d
filename_name	/usr/include/FL/filename.H	145;"	d
filename_relative	/usr/include/FL/filename.H	146;"	d
filename_setext	/usr/include/FL/filename.H	147;"	d
filesystems_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *filesystems_label; $/;"	m	class:Fl_File_Chooser
filesystems_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *filesystems_label; $/;"	m	class:Fl_File_Chooser
filetype	/usr/include/FL/Fl_File_Browser.H	/^  int		filetype() const { return (filetype_); };$/;"	f	class:Fl_File_Browser
filetype	/usr/include/FL/Fl_File_Browser.H	/^  void		filetype(int t) { filetype_ = t; };$/;"	f	class:Fl_File_Browser
filetype_	/usr/include/FL/Fl_File_Browser.H	/^  int		filetype_;$/;"	m	class:Fl_File_Browser
filter	/usr/include/FL/Fl_File_Browser.H	/^  const char	*filter() const { return (pattern_); };$/;"	f	class:Fl_File_Browser
find	/usr/include/FL/Fl_Group.H	/^  int find(const Fl_Widget& o) const {return find(&o);}$/;"	f	class:Fl_Group
find_	/usr/include/FL/Fl_Help_Dialog.H	/^  Fl_Input *find_;$/;"	m	class:Fl_Help_Dialog
find_pos_	/usr/include/FL/Fl_Help_Dialog.H	/^  int find_pos_; $/;"	m	class:Fl_Help_Dialog
first	/usr/include/FL/Fl_Browser.H	/^  FL_BLINE *first;		\/\/ the array of lines$/;"	m	class:Fl_Browser
first	/usr/include/FL/Fl_Check_Browser.H	/^  cb_item *first;$/;"	m	class:Fl_Check_Browser
first	/usr/include/FL/Fl_File_Icon.H	/^  static Fl_File_Icon *first() { return (first_); }$/;"	f	class:Fl_File_Icon
first	/usr/include/FL/Fl_Menu_Item.H	/^  Fl_Menu_Item *first() { return next(0); }$/;"	f	struct:Fl_Menu_Item
first	/usr/include/FL/Fl_Menu_Item.H	/^  const Fl_Menu_Item *first() const { return next(0); }$/;"	f	struct:Fl_Menu_Item
first	/usr/include/FL/mac.H	/^  static Fl_X* first;$/;"	m	class:Fl_X
first	/usr/include/FL/win32.H	/^  static Fl_X* first;$/;"	m	class:Fl_X
first	/usr/include/FL/x.H	/^  static Fl_X* first;$/;"	m	class:Fl_X
first_	/usr/include/FL/Fl_File_Icon.H	/^  static Fl_File_Icon *first_;	\/\/ Pointer to first icon\/filetype$/;"	m	class:Fl_File_Icon
fl_RGB	/usr/include/FL/win32.H	/^inline COLORREF fl_RGB() {return fl_current_xmap->rgb;}$/;"	f
fl_activate_all_forms	/usr/include/FL/forms.H	/^inline void fl_activate_all_forms() {}$/;"	f
fl_activate_form	/usr/include/FL/forms.H	/^inline void fl_activate_form(Fl_Window*w) {w->activate();}$/;"	f
fl_activate_object	/usr/include/FL/forms.H	/^inline void fl_activate_object(Fl_Widget* o) {o->activate();}$/;"	f
fl_add_bitmapbutton	/usr/include/FL/forms.H	/^inline Fl_Widget* fl_add_bitmapbutton(int t,int x,int y,int w,int h,const char* l) {Fl_Widget* o = fl_add_button(t,x,y,w,h,l); return o;}$/;"	f
fl_add_browser_line	/usr/include/FL/forms.H	/^inline void fl_add_browser_line(Fl_Widget* o, const char* s) {$/;"	f
fl_add_chart_value	/usr/include/FL/forms.H	/^inline void fl_add_chart_value(Fl_Widget* o,double v,const char* s,uchar c){$/;"	f
fl_add_frame	/usr/include/FL/forms.H	/^inline Fl_Widget* fl_add_frame(Fl_Boxtype i,int x,int y,int w,int h,const char* l) {$/;"	f
fl_add_free	/usr/include/FL/forms.H	/^fl_add_free(int t,double x,double y,double w,double h,const char* l,$/;"	f
fl_add_io_callback	/usr/include/FL/forms.H	/^inline void fl_add_io_callback(int fd, short w, FL_IO_CALLBACK cb, void* v) {$/;"	f
fl_add_labelframe	/usr/include/FL/forms.H	/^inline Fl_Widget* fl_add_labelframe(Fl_Boxtype i,int x,int y,int w,int h,const char* l) {$/;"	f
fl_add_new	/usr/include/FL/forms.H	/^inline Fl_Widget* fl_add_new(Fl_Widget* p) {return p;}$/;"	f
fl_add_new	/usr/include/FL/forms.H	/^inline Fl_Widget* fl_add_new(uchar t,Fl_Widget* p) {p->type(t); return p;}$/;"	f
fl_add_object	/usr/include/FL/forms.H	/^inline void fl_add_object(Fl_Window* f, Fl_Widget* x) {f->add(x);}$/;"	f
fl_add_pixmapbutton	/usr/include/FL/forms.H	/^inline Fl_Widget* fl_add_pixmapbutton(int t,int x,int y,int w,int h,const char* l) {Fl_Widget* o = fl_add_button(t,x,y,w,h,l); return o;}$/;"	f
fl_add_timeout	/usr/include/FL/forms.H	/^inline void fl_add_timeout(long msec, void (*cb)(void*), void* v) {$/;"	f
fl_addto_browser	/usr/include/FL/forms.H	/^inline void fl_addto_browser(Fl_Widget* o, const char* s) {$/;"	f
fl_addto_choice	/usr/include/FL/forms.H	/^inline void fl_addto_choice(Fl_Widget* o, const char* s) {$/;"	f
fl_addto_form	/usr/include/FL/forms.H	/^inline void fl_addto_form(Fl_Window* f) {f->begin();}$/;"	f
fl_addto_group	/usr/include/FL/forms.H	/^inline void fl_addto_group(Fl_Widget* o) {((Fl_Group* )o)->begin();}$/;"	f
fl_addto_menu	/usr/include/FL/forms.H	/^inline void fl_addto_menu(Fl_Widget* o, const char* s) {$/;"	f
fl_adjust_form_size	/usr/include/FL/forms.H	/^inline void fl_adjust_form_size(Fl_Window*) {}$/;"	f
fl_ask_H	/usr/include/FL/fl_ask.H	29;"	d
fl_begin_offscreen	/usr/include/FL/win32.H	127;"	d
fl_begin_offscreen	/usr/include/FL/x.H	111;"	d
fl_bgn_form	/usr/include/FL/forms.H	/^inline Fl_Window* fl_bgn_form(Fl_Boxtype b,int w,int h) {$/;"	f
fl_bgn_group	/usr/include/FL/forms.H	/^inline Fl_Group* fl_bgn_group() {return new Fl_Group(0,0,0,0,0);}$/;"	f
fl_box	/usr/include/FL/Enumerations.H	/^inline Fl_Boxtype fl_box(Fl_Boxtype b) {$/;"	f
fl_call_object_callback	/usr/include/FL/forms.H	/^inline void fl_call_object_callback(Fl_Widget* o) {o->do_callback();}$/;"	f
fl_calloc	/usr/include/FL/forms.H	345;"	d
fl_check_only_forms	/usr/include/FL/forms.H	/^inline Fl_Widget* fl_check_only_forms(void) {return fl_check_forms();}$/;"	f
fl_clear_browser	/usr/include/FL/forms.H	/^inline void fl_clear_browser(Fl_Widget* o) {$/;"	f
fl_clear_chart	/usr/include/FL/forms.H	/^inline void fl_clear_chart(Fl_Widget* o) {$/;"	f
fl_clear_choice	/usr/include/FL/forms.H	/^inline void fl_clear_choice(Fl_Widget* o) {$/;"	f
fl_clear_menu	/usr/include/FL/forms.H	/^inline void fl_clear_menu(Fl_Widget* o) {$/;"	f
fl_clip	/usr/include/FL/fl_draw.H	48;"	d
fl_color	/usr/include/FL/fl_draw.H	/^inline Fl_Color fl_color() {return fl_color_;}$/;"	f
fl_color	/usr/include/FL/fl_draw.H	/^inline void fl_color(int c) {fl_color((Fl_Color)c);} \/\/ for back compatability$/;"	f
fl_color_cube	/usr/include/FL/Enumerations.H	/^inline Fl_Color fl_color_cube(int r, int g, int b) {$/;"	f
fl_copy_offscreen	/usr/include/FL/x.H	116;"	d
fl_create_offscreen	/usr/include/FL/win32.H	123;"	d
fl_create_offscreen	/usr/include/FL/x.H	108;"	d
fl_darker	/usr/include/FL/Enumerations.H	/^inline Fl_Color fl_darker(Fl_Color c) { return fl_color_average(c, FL_BLACK, .67f); }$/;"	f
fl_deactivate_all_forms	/usr/include/FL/forms.H	/^inline void fl_deactivate_all_forms() {fl_modal_next = 1;}$/;"	f
fl_deactivate_form	/usr/include/FL/forms.H	/^inline void fl_deactivate_form(Fl_Window*w) {w->deactivate();}$/;"	f
fl_deactivate_object	/usr/include/FL/forms.H	/^inline void fl_deactivate_object(Fl_Widget* o) {o->deactivate();}$/;"	f
fl_delete_browser_line	/usr/include/FL/forms.H	/^inline void fl_delete_browser_line(Fl_Widget* o, int n) {$/;"	f
fl_delete_choice	/usr/include/FL/forms.H	/^inline void fl_delete_choice(Fl_Widget* o, int i) {$/;"	f
fl_delete_menu_item	/usr/include/FL/forms.H	/^inline void fl_delete_menu_item(Fl_Widget* o, int i) {$/;"	f
fl_delete_object	/usr/include/FL/forms.H	/^inline void fl_delete_object(Fl_Widget* o) {((Fl_Group*)(o->parent()))->remove(*o);}$/;"	f
fl_delete_offscreen	/usr/include/FL/win32.H	136;"	d
fl_delete_offscreen	/usr/include/FL/x.H	118;"	d
fl_deselect_browser	/usr/include/FL/forms.H	/^inline void fl_deselect_browser(Fl_Widget* o) {$/;"	f
fl_deselect_browser_line	/usr/include/FL/forms.H	/^inline void fl_deselect_browser_line(Fl_Widget* o, int n) {$/;"	f
fl_do_only_forms	/usr/include/FL/forms.H	/^inline Fl_Widget* fl_do_only_forms(void) {return fl_do_forms();}$/;"	f
fl_double_click	/usr/include/FL/forms.H	/^inline int fl_double_click() {return Fl::event_clicks();}$/;"	f
fl_down	/usr/include/FL/Enumerations.H	/^inline Fl_Boxtype fl_down(Fl_Boxtype b) {$/;"	f
fl_draw	/usr/include/FL/forms.H	/^inline void fl_draw() {Fl::flush();}$/;"	f
fl_draw_H	/usr/include/FL/fl_draw.H	29;"	d
fl_drw_box	/usr/include/FL/forms.H	/^inline void fl_drw_box(Fl_Boxtype b,int x,int y,int w,int h,Fl_Color bgc,int=3) {$/;"	f
fl_drw_frame	/usr/include/FL/forms.H	/^inline void fl_drw_frame(Fl_Boxtype b,int x,int y,int w,int h,Fl_Color bgc,int=3) {$/;"	f
fl_drw_text	/usr/include/FL/forms.H	/^inline void fl_drw_text(Fl_Align align, int x, int y, int w, int h,$/;"	f
fl_drw_text_beside	/usr/include/FL/forms.H	/^inline void fl_drw_text_beside(Fl_Align align, int x, int y, int w, int h,$/;"	f
fl_end_group	/usr/include/FL/forms.H	/^inline void fl_end_group() {Fl_Group::current()->forms_end();}$/;"	f
fl_end_offscreen	/usr/include/FL/win32.H	131;"	d
fl_end_offscreen	/usr/include/FL/x.H	113;"	d
fl_eventnames	/usr/include/FL/names.h	/^char *fl_eventnames[] =$/;"	v
fl_filename_absolute	/usr/include/FL/filename.H	/^inline int fl_filename_absolute(char *to, const char *from) { return fl_filename_absolute(to, FL_PATH_MAX, from); }$/;"	f
fl_filename_expand	/usr/include/FL/filename.H	/^inline int fl_filename_expand(char *to, const char *from) { return fl_filename_expand(to, FL_PATH_MAX, from); }$/;"	f
fl_filename_relative	/usr/include/FL/filename.H	/^inline int fl_filename_relative(char *to, const char *from) { return fl_filename_relative(to, FL_PATH_MAX, from); }$/;"	f
fl_filename_setext	/usr/include/FL/filename.H	/^inline char *fl_filename_setext(char *to, const char *ext) { return fl_filename_setext(to, FL_PATH_MAX, ext); }$/;"	f
fl_finish	/usr/include/FL/forms.H	/^inline void fl_finish() {}$/;"	f
fl_flip_yorigin	/usr/include/FL/forms.H	/^inline void fl_flip_yorigin() {fl_flip = 1;}$/;"	f
fl_font	/usr/include/FL/fl_draw.H	/^inline int fl_font() {return fl_font_;}$/;"	f
fl_fontnames	/usr/include/FL/names.h	/^char *fl_fontnames[] =$/;"	v
fl_form_is_visible	/usr/include/FL/forms.H	/^inline int fl_form_is_visible(Fl_Window* f) {return f->visible();}$/;"	f
fl_frame	/usr/include/FL/Enumerations.H	/^inline Fl_Boxtype fl_frame(Fl_Boxtype b) {$/;"	f
fl_free	/usr/include/FL/forms.H	343;"	d
fl_free_form	/usr/include/FL/forms.H	/^inline void fl_free_form(Fl_Window* x) {delete x;}$/;"	f
fl_free_object	/usr/include/FL/forms.H	/^inline void fl_free_object(Fl_Widget* x) {delete x;}$/;"	f
fl_freeze_all_forms	/usr/include/FL/forms.H	/^inline void fl_freeze_all_forms() {}$/;"	f
fl_freeze_form	/usr/include/FL/forms.H	/^inline void fl_freeze_form(Fl_Window*) {}$/;"	f
fl_freeze_object	/usr/include/FL/forms.H	/^inline void fl_freeze_object(Fl_Widget*) {}$/;"	f
fl_get_border_width	/usr/include/FL/forms.H	/^inline int fl_get_border_width() {return 3;}$/;"	f
fl_get_browser	/usr/include/FL/forms.H	/^inline int fl_get_browser(Fl_Widget* o) {$/;"	f
fl_get_browser_line	/usr/include/FL/forms.H	/^inline char* fl_get_browser_line(Fl_Widget* o, int n) {$/;"	f
fl_get_browser_maxline	/usr/include/FL/forms.H	/^inline int fl_get_browser_maxline(Fl_Widget* o) {$/;"	f
fl_get_browser_topline	/usr/include/FL/forms.H	/^inline int fl_get_browser_topline(Fl_Widget* o) {$/;"	f
fl_get_button	/usr/include/FL/forms.H	/^inline int fl_get_button(Fl_Widget* b) {return ((Fl_Button*)b)->value();}$/;"	f
fl_get_button_numb	/usr/include/FL/forms.H	/^inline int fl_get_button_numb(Fl_Widget*) {return Fl::event_button();}$/;"	f
fl_get_choice	/usr/include/FL/forms.H	/^inline int fl_get_choice(Fl_Widget* o) {$/;"	f
fl_get_choice_text	/usr/include/FL/forms.H	/^inline const char* fl_get_choice_text(Fl_Widget* o) {$/;"	f
fl_get_clock	/usr/include/FL/forms.H	/^inline void fl_get_clock(Fl_Widget* o, int* h, int* m, int* s) {$/;"	f
fl_get_counter_bounds	/usr/include/FL/forms.H	/^inline void fl_get_counter_bounds(Fl_Widget* o, float* a, float* b) {$/;"	f
fl_get_counter_value	/usr/include/FL/forms.H	/^inline double fl_get_counter_value(Fl_Widget* o) {$/;"	f
fl_get_dial_bounds	/usr/include/FL/forms.H	/^inline void fl_get_dial_bounds(Fl_Widget* o, float* a, float* b) {$/;"	f
fl_get_dial_value	/usr/include/FL/forms.H	/^inline double fl_get_dial_value(Fl_Widget* o) {$/;"	f
fl_get_input	/usr/include/FL/forms.H	/^inline const char* fl_get_input(Fl_Widget* o) {return ((Fl_Input*)o)->value();}$/;"	f
fl_get_input_cursorpos	/usr/include/FL/forms.H	/^inline int fl_get_input_cursorpos(Fl_Widget* o, int*x, int*y) {$/;"	f
fl_get_menu	/usr/include/FL/forms.H	/^inline int fl_get_menu(Fl_Widget* o) {$/;"	f
fl_get_menu_item_mode	/usr/include/FL/forms.H	/^inline int fl_get_menu_item_mode(Fl_Widget* o, int i) {$/;"	f
fl_get_menu_item_text	/usr/include/FL/forms.H	/^inline const char* fl_get_menu_item_text(Fl_Widget* o, int i) {$/;"	f
fl_get_menu_maxitems	/usr/include/FL/forms.H	/^inline int fl_get_menu_maxitems(Fl_Widget* o) {$/;"	f
fl_get_menu_text	/usr/include/FL/forms.H	/^inline const char* fl_get_menu_text(Fl_Widget* o) {$/;"	f
fl_get_object_geometry	/usr/include/FL/forms.H	/^inline void fl_get_object_geometry(Fl_Widget* o,int*x,int*y,int*w,int*h) {$/;"	f
fl_get_object_position	/usr/include/FL/forms.H	/^inline void fl_get_object_position(Fl_Widget* o,int*x,int*y) {$/;"	f
fl_get_positioner_xbounds	/usr/include/FL/forms.H	/^inline void fl_get_positioner_xbounds(Fl_Widget* o, float* a, float* b) {$/;"	f
fl_get_positioner_xvalue	/usr/include/FL/forms.H	/^inline double fl_get_positioner_xvalue(Fl_Widget* o) {$/;"	f
fl_get_positioner_ybounds	/usr/include/FL/forms.H	/^inline void fl_get_positioner_ybounds(Fl_Widget* o, float* a, float* b) {$/;"	f
fl_get_positioner_yvalue	/usr/include/FL/forms.H	/^inline double fl_get_positioner_yvalue(Fl_Widget* o) {$/;"	f
fl_get_slider_bounds	/usr/include/FL/forms.H	/^inline void fl_get_slider_bounds(Fl_Widget* o, float* a, float* b) {$/;"	f
fl_get_slider_value	/usr/include/FL/forms.H	/^inline double fl_get_slider_value(Fl_Widget* o) {$/;"	f
fl_get_timer	/usr/include/FL/forms.H	/^inline double fl_get_timer(Fl_Widget* o) {return ((Fl_Timer*)o)->value();}$/;"	f
fl_gray_ramp	/usr/include/FL/Enumerations.H	/^inline Fl_Color fl_gray_ramp(int i) {return (Fl_Color)(i+FL_GRAY_RAMP);}$/;"	f
fl_height	/usr/include/FL/fl_draw.H	/^inline int fl_height(int, int size) {return size;}$/;"	f
fl_hide_form	/usr/include/FL/forms.H	/^inline void fl_hide_form(Fl_Window* f) {f->hide();}$/;"	f
fl_hide_object	/usr/include/FL/forms.H	/^inline void fl_hide_object(Fl_Widget* o) {o->hide();}$/;"	f
fl_init	/usr/include/FL/forms.H	/^inline void fl_init() {}$/;"	f
fl_insert_browser_line	/usr/include/FL/forms.H	/^inline void fl_insert_browser_line(Fl_Widget* o, int n, const char* s) {$/;"	f
fl_insert_chart_value	/usr/include/FL/forms.H	/^inline void fl_insert_chart_value(Fl_Widget* o, int i, double v, const char* s, uchar c) {$/;"	f
fl_insert_object	/usr/include/FL/forms.H	/^inline void fl_insert_object(Fl_Widget* o, Fl_Widget* b) {$/;"	f
fl_isdisplayed_browser_line	/usr/include/FL/forms.H	/^inline int fl_isdisplayed_browser_line(Fl_Widget* o, int n) {$/;"	f
fl_isselected_browser_line	/usr/include/FL/forms.H	/^inline int fl_isselected_browser_line(Fl_Widget* o, int n) {$/;"	f
fl_lighter	/usr/include/FL/Enumerations.H	/^inline Fl_Color fl_lighter(Fl_Color c) { return fl_color_average(c, FL_WHITE, .67f); }$/;"	f
fl_load_browser	/usr/include/FL/forms.H	/^inline int fl_load_browser(Fl_Widget* o, const char* f) {$/;"	f
fl_malloc	/usr/include/FL/forms.H	344;"	d
fl_mapcolor	/usr/include/FL/forms.H	/^inline void fl_mapcolor(Fl_Color c, uchar r, uchar g, uchar b) {Fl::set_color(c,r,g,b);}$/;"	f
fl_math_h	/usr/include/FL/math.h	29;"	d
fl_message_font	/usr/include/FL/fl_ask.H	/^inline void fl_message_font(unsigned char f,unsigned char s) {$/;"	f
fl_mouse_button	/usr/include/FL/forms.H	/^inline int fl_mouse_button() {return Fl::event_button();}$/;"	f
fl_mousebutton	/usr/include/FL/forms.H	341;"	d
fl_open_callback	/usr/include/FL/win32.H	/^inline void fl_open_callback(void (*)(const char *)) {}$/;"	f
fl_open_callback	/usr/include/FL/x.H	/^inline void fl_open_callback(void (*)(const char *)) {}$/;"	f
fl_pen	/usr/include/FL/win32.H	/^inline HPEN fl_pen() {return fl_current_xmap->pen;}$/;"	f
fl_pop_form	/usr/include/FL/forms.H	/^inline void fl_pop_form(Fl_Window* f) {f->show();}$/;"	f
fl_prepare_form_window	/usr/include/FL/forms.H	314;"	d
fl_raise_form	/usr/include/FL/forms.H	/^inline void fl_raise_form(Fl_Window* f) {f->show();}$/;"	f
fl_realloc	/usr/include/FL/forms.H	346;"	d
fl_rect	/usr/include/FL/fl_draw.H	/^inline void fl_rect(int x, int y, int w, int h, Fl_Color c) {fl_color(c); fl_rect(x,y,w,h);}$/;"	f
fl_rectf	/usr/include/FL/fl_draw.H	/^inline void fl_rectf(int x, int y, int w, int h, Fl_Color c) {fl_color(c); fl_rectf(x,y,w,h);}$/;"	f
fl_redraw_form	/usr/include/FL/forms.H	/^inline void fl_redraw_form(Fl_Window* f) {f->redraw();}$/;"	f
fl_redraw_object	/usr/include/FL/forms.H	/^inline void fl_redraw_object(Fl_Widget* o) {o->redraw();}$/;"	f
fl_remove_io_callback	/usr/include/FL/forms.H	/^inline void fl_remove_io_callback(int fd, short, FL_IO_CALLBACK) {$/;"	f
fl_remove_timeout	/usr/include/FL/forms.H	/^inline void fl_remove_timeout(int) {}$/;"	f
fl_replace_browser_line	/usr/include/FL/forms.H	/^inline void fl_replace_browser_line(Fl_Widget* o, int n, const char* s) {$/;"	f
fl_replace_chart_value	/usr/include/FL/forms.H	/^inline void fl_replace_chart_value(Fl_Widget* o, int i, double v, const char* s, uchar c) {$/;"	f
fl_replace_choice	/usr/include/FL/forms.H	/^inline void fl_replace_choice(Fl_Widget* o, int i, const char* s) {$/;"	f
fl_replace_menu_item	/usr/include/FL/forms.H	/^inline void fl_replace_menu_item(Fl_Widget* o, int i, const char* s) {$/;"	f
fl_reset_focus_object	/usr/include/FL/forms.H	/^inline void fl_reset_focus_object(Fl_Widget* o) {Fl::focus(o);}$/;"	f
fl_resume_timer	/usr/include/FL/forms.H	/^inline void fl_resume_timer(Fl_Widget* o) {((Fl_Timer*)o)->suspended(0);}$/;"	f
fl_rgb_color	/usr/include/FL/Enumerations.H	/^inline Fl_Color fl_rgb_color(uchar g) {$/;"	f
fl_rgb_color	/usr/include/FL/Enumerations.H	/^inline Fl_Color fl_rgb_color(uchar r, uchar g, uchar b) {$/;"	f
fl_scale_form	/usr/include/FL/forms.H	/^inline void fl_scale_form(Fl_Window* f, double x, double y) {$/;"	f
fl_select_browser_line	/usr/include/FL/forms.H	/^inline void fl_select_browser_line(Fl_Widget* o, int n) {$/;"	f
fl_set_bitmap_data	/usr/include/FL/forms.H	/^inline void fl_set_bitmap_data(Fl_Widget* o, int w, int h, const uchar* b) {$/;"	f
fl_set_bitmapbutton_data	/usr/include/FL/forms.H	/^inline void fl_set_bitmapbutton_data(Fl_Widget* o,int a,int b,uchar* c) {$/;"	f
fl_set_border_width	/usr/include/FL/forms.H	/^inline void fl_set_border_width(int) {}$/;"	f
fl_set_browser_fontsize	/usr/include/FL/forms.H	/^inline void fl_set_browser_fontsize(Fl_Widget* o, int s) {$/;"	f
fl_set_browser_fontstyle	/usr/include/FL/forms.H	/^inline void fl_set_browser_fontstyle(Fl_Widget* o, Fl_Font s) {$/;"	f
fl_set_browser_specialkey	/usr/include/FL/forms.H	/^inline void fl_set_browser_specialkey(Fl_Widget* o, char c) {$/;"	f
fl_set_browser_topline	/usr/include/FL/forms.H	/^inline void fl_set_browser_topline(Fl_Widget* o, int n) {$/;"	f
fl_set_button	/usr/include/FL/forms.H	/^inline void fl_set_button(Fl_Widget* b, int v) {((Fl_Button*)b)->value(v);}$/;"	f
fl_set_button_shortcut	/usr/include/FL/forms.H	/^inline void fl_set_button_shortcut(Fl_Widget* b, const char* s,int=0) {$/;"	f
fl_set_call_back	/usr/include/FL/forms.H	230;"	d
fl_set_chart_autosize	/usr/include/FL/forms.H	/^inline void fl_set_chart_autosize(Fl_Widget* o, int v) {$/;"	f
fl_set_chart_bounds	/usr/include/FL/forms.H	/^inline void fl_set_chart_bounds(Fl_Widget* o, double a, double b) {$/;"	f
fl_set_chart_lcol	/usr/include/FL/forms.H	535;"	d
fl_set_chart_lcolor	/usr/include/FL/forms.H	/^inline void fl_set_chart_lcolor(Fl_Widget* o, unsigned v) {$/;"	f
fl_set_chart_lsize	/usr/include/FL/forms.H	/^inline void fl_set_chart_lsize(Fl_Widget* o, int v) {$/;"	f
fl_set_chart_lstyle	/usr/include/FL/forms.H	/^inline void fl_set_chart_lstyle(Fl_Widget* o, Fl_Font v) {$/;"	f
fl_set_chart_maxnumb	/usr/include/FL/forms.H	/^inline void fl_set_chart_maxnumb(Fl_Widget* o, int v) {$/;"	f
fl_set_choice	/usr/include/FL/forms.H	/^inline void fl_set_choice(Fl_Widget* o, int i) {$/;"	f
fl_set_choice_fontsize	/usr/include/FL/forms.H	/^inline void fl_set_choice_fontsize(Fl_Widget* o, int x) {$/;"	f
fl_set_choice_fontstyle	/usr/include/FL/forms.H	/^inline void fl_set_choice_fontstyle(Fl_Widget* o, Fl_Font x) {$/;"	f
fl_set_clipping	/usr/include/FL/forms.H	377;"	d
fl_set_counter_bounds	/usr/include/FL/forms.H	/^inline void fl_set_counter_bounds(Fl_Widget* o, double a, double b) {$/;"	f
fl_set_counter_precision	/usr/include/FL/forms.H	/^inline void fl_set_counter_precision(Fl_Widget* o, int v) {$/;"	f
fl_set_counter_return	/usr/include/FL/forms.H	/^inline void fl_set_counter_return(Fl_Widget* o, int v) {$/;"	f
fl_set_counter_step	/usr/include/FL/forms.H	/^inline void fl_set_counter_step(Fl_Widget* o, double a, double b) {$/;"	f
fl_set_counter_value	/usr/include/FL/forms.H	/^inline void fl_set_counter_value(Fl_Widget* o, double v) {$/;"	f
fl_set_cursor	/usr/include/FL/forms.H	/^inline void fl_set_cursor(Fl_Window* w, Fl_Cursor c) {w->cursor(c);}$/;"	f
fl_set_dial_angles	/usr/include/FL/forms.H	/^inline void fl_set_dial_angles(Fl_Widget* o, int a, int b) {$/;"	f
fl_set_dial_bounds	/usr/include/FL/forms.H	/^inline void fl_set_dial_bounds(Fl_Widget* o, double a, double b) {$/;"	f
fl_set_dial_return	/usr/include/FL/forms.H	/^inline void fl_set_dial_return(Fl_Widget* o, int i) {$/;"	f
fl_set_dial_step	/usr/include/FL/forms.H	/^inline void fl_set_dial_step(Fl_Widget* o, double v) {$/;"	f
fl_set_dial_value	/usr/include/FL/forms.H	/^inline void fl_set_dial_value(Fl_Widget* o, double v) {$/;"	f
fl_set_focus_object	/usr/include/FL/forms.H	/^inline void fl_set_focus_object(Fl_Window*, Fl_Widget* o) {Fl::focus(o);}$/;"	f
fl_set_font_name	/usr/include/FL/forms.H	/^inline void fl_set_font_name(Fl_Font n,const char* s) {Fl::set_font(n,s);}$/;"	f
fl_set_form_call_back	/usr/include/FL/forms.H	333;"	d
fl_set_form_callback	/usr/include/FL/forms.H	/^inline void fl_set_form_callback(Fl_Window* f,Forms_FormCB c) {f->callback(c);}$/;"	f
fl_set_form_dblbuffer	/usr/include/FL/forms.H	/^inline void fl_set_form_dblbuffer(Fl_Window*, int) {}$/;"	f
fl_set_form_geometry	/usr/include/FL/forms.H	/^inline void fl_set_form_geometry(Fl_Window* f,int x,int y,int w,int h) {$/;"	f
fl_set_form_hotobject	/usr/include/FL/forms.H	/^inline void fl_set_form_hotobject(Fl_Window* w, Fl_Widget* o) {w->hotspot(o);}$/;"	f
fl_set_form_hotspot	/usr/include/FL/forms.H	/^inline void fl_set_form_hotspot(Fl_Window* w,int x,int y) {w->hotspot(x,y);}$/;"	f
fl_set_form_position	/usr/include/FL/forms.H	/^inline void fl_set_form_position(Fl_Window* f,int x,int y) {f->position(x,y);}$/;"	f
fl_set_form_size	/usr/include/FL/forms.H	/^inline void fl_set_form_size(Fl_Window* f, int w, int h) {f->size(w,h);}$/;"	f
fl_set_form_title	/usr/include/FL/forms.H	/^inline void fl_set_form_title(Fl_Window* f, const char* s) {f->label(s);}$/;"	f
fl_set_goodies_font	/usr/include/FL/forms.H	/^inline void fl_set_goodies_font(uchar a, uchar b) {fl_message_font(a,b);}$/;"	f
fl_set_idle_callback	/usr/include/FL/forms.H	/^inline void fl_set_idle_callback(void (*cb)()) {Fl::set_idle(cb);}$/;"	f
fl_set_initial_placement	/usr/include/FL/forms.H	283;"	d
fl_set_input	/usr/include/FL/forms.H	/^inline void fl_set_input(Fl_Widget* o, const char* v) {$/;"	f
fl_set_input_color	/usr/include/FL/forms.H	/^inline void fl_set_input_color(Fl_Widget* o, unsigned a, unsigned b) {$/;"	f
fl_set_input_cursorpos	/usr/include/FL/forms.H	/^inline void fl_set_input_cursorpos(Fl_Widget* o, int x, int \/*y*\/) {$/;"	f
fl_set_input_return	/usr/include/FL/forms.H	/^inline void fl_set_input_return(Fl_Widget* o, int x) {$/;"	f
fl_set_menu	/usr/include/FL/forms.H	/^inline void fl_set_menu(Fl_Widget* o, const char* s) {$/;"	f
fl_set_menu_item_mode	/usr/include/FL/forms.H	/^inline void fl_set_menu_item_mode(Fl_Widget* o, int i, long x) {$/;"	f
fl_set_menu_item_shortcut	/usr/include/FL/forms.H	/^inline void fl_set_menu_item_shortcut(Fl_Widget* o, int i, const char* s) {$/;"	f
fl_set_object_align	/usr/include/FL/forms.H	216;"	d
fl_set_object_boxtype	/usr/include/FL/forms.H	/^inline void fl_set_object_boxtype(Fl_Widget* o, Fl_Boxtype a) {o->box(a);}$/;"	f
fl_set_object_callback	/usr/include/FL/forms.H	/^inline void fl_set_object_callback(Fl_Widget*o,Forms_CB c,long a) {o->callback(c,a);}$/;"	f
fl_set_object_color	/usr/include/FL/forms.H	/^inline void fl_set_object_color(Fl_Widget* o,unsigned a,unsigned b) {o->color(a,b);}$/;"	f
fl_set_object_dblbuffer	/usr/include/FL/forms.H	/^inline void fl_set_object_dblbuffer(Fl_Widget*, int) {}$/;"	f
fl_set_object_focus	/usr/include/FL/forms.H	200;"	d
fl_set_object_geometry	/usr/include/FL/forms.H	/^inline void fl_set_object_geometry(Fl_Widget* o,int x,int y,int w,int h) {o->resize(x,y,w,h);}$/;"	f
fl_set_object_label	/usr/include/FL/forms.H	/^inline void fl_set_object_label(Fl_Widget* o, const char* a) {o->label(a); o->redraw();}$/;"	f
fl_set_object_lalign	/usr/include/FL/forms.H	/^inline void fl_set_object_lalign(Fl_Widget* o, Fl_Align a) {o->align(a);}$/;"	f
fl_set_object_lcol	/usr/include/FL/forms.H	/^inline void fl_set_object_lcol(Fl_Widget* o, unsigned a) {o->labelcolor(a);}$/;"	f
fl_set_object_lcolor	/usr/include/FL/forms.H	214;"	d
fl_set_object_lsize	/usr/include/FL/forms.H	/^inline void fl_set_object_lsize(Fl_Widget* o,int s) {o->labelsize(s);}$/;"	f
fl_set_object_lstyle	/usr/include/FL/forms.H	/^inline void fl_set_object_lstyle(Fl_Widget* o,int a) {$/;"	f
fl_set_object_position	/usr/include/FL/forms.H	/^inline void fl_set_object_position(Fl_Widget*o,int x,int y) {o->position(x,y);}$/;"	f
fl_set_object_return	/usr/include/FL/forms.H	/^inline void fl_set_object_return(Fl_Widget* o, int v) {$/;"	f
fl_set_object_size	/usr/include/FL/forms.H	/^inline void fl_set_object_size(Fl_Widget* o, int w, int h) {o->size(w,h);}$/;"	f
fl_set_pixmap_align	/usr/include/FL/forms.H	/^inline void fl_set_pixmap_align(Fl_Widget* o,Fl_Align a,int,int) {o->align(a);}$/;"	f
fl_set_pixmap_data	/usr/include/FL/forms.H	/^inline void fl_set_pixmap_data(Fl_Widget* o, char*const* b) {$/;"	f
fl_set_pixmapbutton_data	/usr/include/FL/forms.H	/^inline void fl_set_pixmapbutton_data(Fl_Widget* o, const char*const* c) {$/;"	f
fl_set_positioner_return	/usr/include/FL/forms.H	/^inline void fl_set_positioner_return(Fl_Widget* o, int v) {$/;"	f
fl_set_positioner_xbounds	/usr/include/FL/forms.H	/^inline void fl_set_positioner_xbounds(Fl_Widget* o, double a, double b) {$/;"	f
fl_set_positioner_xstep	/usr/include/FL/forms.H	/^inline void fl_set_positioner_xstep(Fl_Widget* o, double v) {$/;"	f
fl_set_positioner_xvalue	/usr/include/FL/forms.H	/^inline void fl_set_positioner_xvalue(Fl_Widget* o, double v) {$/;"	f
fl_set_positioner_ybounds	/usr/include/FL/forms.H	/^inline void fl_set_positioner_ybounds(Fl_Widget* o, double a, double b) {$/;"	f
fl_set_positioner_ystep	/usr/include/FL/forms.H	/^inline void fl_set_positioner_ystep(Fl_Widget* o, double v) {$/;"	f
fl_set_positioner_yvalue	/usr/include/FL/forms.H	/^inline void fl_set_positioner_yvalue(Fl_Widget* o, double v) {$/;"	f
fl_set_slider_bounds	/usr/include/FL/forms.H	/^inline void fl_set_slider_bounds(Fl_Widget* o, double a, double b) {$/;"	f
fl_set_slider_precision	/usr/include/FL/forms.H	/^inline void fl_set_slider_precision(Fl_Widget* o, int i) {$/;"	f
fl_set_slider_return	/usr/include/FL/forms.H	/^inline void fl_set_slider_return(Fl_Widget* o, int i) {$/;"	f
fl_set_slider_size	/usr/include/FL/forms.H	/^inline void fl_set_slider_size(Fl_Widget* o, double v) {$/;"	f
fl_set_slider_step	/usr/include/FL/forms.H	/^inline void fl_set_slider_step(Fl_Widget* o, double v) {$/;"	f
fl_set_slider_value	/usr/include/FL/forms.H	/^inline void fl_set_slider_value(Fl_Widget* o, double v) {$/;"	f
fl_set_timer	/usr/include/FL/forms.H	/^inline void fl_set_timer(Fl_Widget* o, double v) {((Fl_Timer*)o)->value(v);}$/;"	f
fl_set_timer_countup	/usr/include/FL/forms.H	/^inline void fl_set_timer_countup(Fl_Widget* o,char d) {((Fl_Timer*)o)->direction(d);}$/;"	f
fl_setdisplayed_browser_line	/usr/include/FL/forms.H	/^inline void fl_setdisplayed_browser_line(Fl_Widget* o, int n, int i) {$/;"	f
fl_show_choices	/usr/include/FL/forms.H	/^inline int fl_show_choices(const char* c,int n,const char* b1,const char* b2,$/;"	f
fl_show_colormap_H	/usr/include/FL/fl_show_colormap.H	29;"	d
fl_show_form_window	/usr/include/FL/forms.H	/^inline void fl_show_form_window(Fl_Window*) {}$/;"	f
fl_show_input	/usr/include/FL/forms.H	/^inline const char *fl_show_input(const char *l,const char*d=0) {return fl_input("%s",l,d);}$/;"	f
fl_show_menu_symbol	/usr/include/FL/forms.H	/^inline void fl_show_menu_symbol(Fl_Widget*, int ) {$/;"	f
fl_show_messages	/usr/include/FL/forms.H	666;"	d
fl_show_object	/usr/include/FL/forms.H	/^inline void fl_show_object(Fl_Widget* o) {o->show();}$/;"	f
fl_show_question	/usr/include/FL/forms.H	/^inline int fl_show_question(const char* c, int = 0) {return fl_choice("%s",fl_no,fl_yes,0L,c);}$/;"	f
fl_size	/usr/include/FL/fl_draw.H	/^inline int fl_size() {return fl_size_;}$/;"	f
fl_suspend_timer	/usr/include/FL/forms.H	/^inline void fl_suspend_timer(Fl_Widget* o) {((Fl_Timer*)o)->suspended(1);}$/;"	f
fl_title_form	/usr/include/FL/forms.H	/^inline void fl_title_form(Fl_Window* f, const char* s) {f->label(s);}$/;"	f
fl_trigger_object	/usr/include/FL/forms.H	/^inline void fl_trigger_object(Fl_Widget* o) {o->do_callback();}$/;"	f
fl_unfreeze_all_forms	/usr/include/FL/forms.H	/^inline void fl_unfreeze_all_forms() {}$/;"	f
fl_unfreeze_form	/usr/include/FL/forms.H	/^inline void fl_unfreeze_form(Fl_Window*) {}$/;"	f
fl_unfreeze_object	/usr/include/FL/forms.H	/^inline void fl_unfreeze_object(Fl_Widget*) {}$/;"	f
fl_unset_clipping	/usr/include/FL/forms.H	378;"	d
fl_xid	/usr/include/FL/mac.H	/^inline Window fl_xid(const Fl_Window*w) $/;"	f
fl_xid	/usr/include/FL/win32.H	/^inline Window fl_xid(const Fl_Window*w) {Fl_X *temp = Fl_X::i(w); return temp ? temp->xid : 0;}$/;"	f
fl_xid	/usr/include/FL/x.H	/^inline Window fl_xid(const Fl_Window*w) {return Fl_X::i(w)->xid;}$/;"	f
flags	/usr/include/FL/Fl_Menu_Item.H	/^  int flags;$/;"	m	struct:Fl_Menu_Item
flags	/usr/include/FL/Fl_Widget.H	/^  int flags() const {return flags_;}$/;"	f	class:Fl_Widget
flags_	/usr/include/FL/Fl_Widget.H	/^  int flags_;$/;"	m	class:Fl_Widget
flush	/usr/include/FL/win32.H	/^  void flush() {w->flush();}$/;"	f	class:Fl_X
flush	/usr/include/FL/x.H	/^  void flush() {w->flush();}$/;"	f	class:Fl_X
fmprstr	/usr/include/FL/gl2opengl.h	24;"	d
focus	/usr/include/FL/Fl.H	/^  static Fl_Widget* focus()	{return focus_;}$/;"	f	class:Fl
focus	/usr/include/FL/Fl_Group.H	/^  void focus(Fl_Widget* o) {o->take_focus();}$/;"	f	class:Fl_Group
focus_	/usr/include/FL/Fl.H	/^  static Fl_Widget* focus_;$/;"	m	class:Fl
font	/usr/include/FL/Fl_Text_Display.H	/^      Fl_Font	font;$/;"	m	struct:Fl_Text_Display::Style_Table_Entry
font	/usr/include/FL/Fl_Tooltip.H	/^  static int font() { return font_; }$/;"	f	class:Fl_Tooltip
font	/usr/include/FL/Fl_Tooltip.H	/^  static void font(int i) { font_ = i; }$/;"	f	class:Fl_Tooltip
font	/usr/include/FL/Fl_Widget.H	/^  uchar font;$/;"	m	struct:Fl_Label
font	/usr/include/FL/glut.H	/^extern FL_EXPORT struct Fl_Glut_Bitmap_Font {uchar font; int size;}$/;"	m	struct:Fl_Glut_Bitmap_Font
font_	/usr/include/FL/Fl_Tooltip.H	/^  static int font_;$/;"	m	class:Fl_Tooltip
fonts_	/usr/include/FL/Fl_Help_View.H	/^  uchar		fonts_[100][2];		\/\/ Font stack$/;"	m	class:Fl_Help_View
force_doublebuffering_	/usr/include/FL/Fl_Double_Window.H	/^  char force_doublebuffering_; \/\/ force db, even if the OS already buffers windows (overlays need that on MacOS and Windows2000)$/;"	m	class:Fl_Double_Window
format	/usr/include/FL/Fl_Spinner.H	/^  const char	*format() { return (format_); }$/;"	f	class:Fl_Spinner
format	/usr/include/FL/Fl_Spinner.H	/^  void		format(const char *f) { format_ = f; update(); }$/;"	f	class:Fl_Spinner
format_	/usr/include/FL/Fl_Spinner.H	/^  const char	*format_;		\/\/ Format string$/;"	m	class:Fl_Spinner
format_char	/usr/include/FL/Fl_Browser.H	/^  char format_char() const {return format_char_;}$/;"	f	class:Fl_Browser
format_char	/usr/include/FL/Fl_Browser.H	/^  void format_char(char c) {format_char_ = c;}$/;"	f	class:Fl_Browser
format_char_	/usr/include/FL/Fl_Browser.H	/^  char format_char_;		\/\/ alternative to @-sign$/;"	m	class:Fl_Browser
forms_constructor	/usr/include/FL/forms.H	386;"	d
forms_constructorb	/usr/include/FL/forms.H	392;"	d
forms_constructort	/usr/include/FL/forms.H	389;"	d
forward_	/usr/include/FL/Fl_Help_Dialog.H	/^  Fl_Button *forward_;$/;"	m	class:Fl_Help_Dialog
frame	/usr/include/FL/Enumerations.H	448;"	d
free_position	/usr/include/FL/Fl_Window.H	/^  void free_position()	{clear_flag(FL_FORCE_POSITION);}$/;"	f	class:Fl_Window
fromRotatedBasis	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::fromRotatedBasis( const Vector3f& x, const Vector3f& y, const Vector3f& z )$/;"	f	class:Quat4f
fromRotationMatrix	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::fromRotationMatrix( const Matrix3f& m )$/;"	f	class:Quat4f
full_height_	/usr/include/FL/Fl_Browser.H	/^  int full_height_;$/;"	m	class:Fl_Browser
function	/usr/include/FL/Fl_Text_Editor.H	/^      Key_Func     function;$/;"	m	struct:Fl_Text_Editor::Key_Binding
g	/usr/include/FL/Fl_Color_Chooser.H	/^  double g() const {return g_;}$/;"	f	class:Fl_Color_Chooser
g	/usr/include/FL/Fl_Gl_Window.H	/^  Fl_Gl_Choice *g;$/;"	m	class:Fl_Gl_Window
g_	/usr/include/FL/Fl_Color_Chooser.H	/^  double r_, g_, b_;$/;"	m	class:Fl_Color_Chooser
gc	/usr/include/FL/mac.H	/^  CGContextRef gc;                 \/\/ graphics context (NULL when using QD)$/;"	m	class:Fl_X
getAxisAngle	./vecmath/src/Quat4f.cpp	/^Vector3f Quat4f::getAxisAngle( float* radiansOut )$/;"	f	class:Quat4f
getCol	./vecmath/src/Matrix2f.cpp	/^Vector2f Matrix2f::getCol( int j ) const$/;"	f	class:Matrix2f
getCol	./vecmath/src/Matrix3f.cpp	/^Vector3f Matrix3f::getCol( int j ) const$/;"	f	class:Matrix3f
getCol	./vecmath/src/Matrix4f.cpp	/^Vector4f Matrix4f::getCol( int j ) const$/;"	f	class:Matrix4f
getRow	./vecmath/src/Matrix2f.cpp	/^Vector2f Matrix2f::getRow( int i ) const$/;"	f	class:Matrix2f
getRow	./vecmath/src/Matrix3f.cpp	/^Vector3f Matrix3f::getRow( int i ) const$/;"	f	class:Matrix3f
getRow	./vecmath/src/Matrix4f.cpp	/^Vector4f Matrix4f::getRow( int i ) const$/;"	f	class:Matrix4f
getSubmatrix2x2	./vecmath/src/Matrix3f.cpp	/^Matrix2f Matrix3f::getSubmatrix2x2( int i0, int j0 ) const$/;"	f	class:Matrix3f
getSubmatrix2x2	./vecmath/src/Matrix4f.cpp	/^Matrix2f Matrix4f::getSubmatrix2x2( int i0, int j0 ) const$/;"	f	class:Matrix4f
getSubmatrix3x3	./vecmath/src/Matrix4f.cpp	/^Matrix3f Matrix4f::getSubmatrix3x3( int i0, int j0 ) const$/;"	f	class:Matrix4f
gl_color	/usr/include/FL/gl.h	/^inline void gl_color(int c) {gl_color((Fl_Color)c);} \/\/ back compatability$/;"	f
gl_rectf	/usr/include/FL/gl.h	/^inline void gl_rectf(int x,int y,int w,int h) {glRecti(x,y,x+w,y+h);}$/;"	f
global_key_bindings	/usr/include/FL/Fl_Text_Editor.H	/^    static Key_Binding* global_key_bindings;$/;"	m	class:Fl_Text_Editor
glutAttachMenu	/usr/include/FL/glut.H	/^inline void glutAttachMenu(int b) {glut_window->menu[b] = glut_menu;}$/;"	f
glutDetachMenu	/usr/include/FL/glut.H	/^inline void glutDetachMenu(int b) {glut_window->menu[b] = 0;}$/;"	f
glutDisplayFunc	/usr/include/FL/glut.H	/^inline void glutDisplayFunc(void (*f)()) {glut_window->display = f;}$/;"	f
glutEntryFunc	/usr/include/FL/glut.H	/^inline void glutEntryFunc(void (*f)(int s)) {glut_window->entry = f;}$/;"	f
glutEstablishOverlay	/usr/include/FL/glut.H	/^inline void glutEstablishOverlay() {glut_window->make_overlay_current();}$/;"	f
glutFullScreen	/usr/include/FL/glut.H	/^inline void glutFullScreen() {glut_window->fullscreen();}$/;"	f
glutGetMenu	/usr/include/FL/glut.H	/^inline int glutGetMenu() {return glut_menu;}$/;"	f
glutGetModifiers	/usr/include/FL/glut.H	/^inline int glutGetModifiers() {return Fl::event_state() & (GLUT_ACTIVE_SHIFT | GLUT_ACTIVE_CTRL | GLUT_ACTIVE_ALT);}$/;"	f
glutGetWindow	/usr/include/FL/glut.H	/^inline int glutGetWindow() {return glut_window->number;}$/;"	f
glutHideOverlay	/usr/include/FL/glut.H	/^inline void glutHideOverlay() {glut_window->hide_overlay();}$/;"	f
glutHideWindow	/usr/include/FL/glut.H	/^inline void glutHideWindow() {glut_window->hide();}$/;"	f
glutIconifyWindow	/usr/include/FL/glut.H	/^inline void glutIconifyWindow() {glut_window->iconize();}$/;"	f
glutIdleFunc	/usr/include/FL/glut.H	/^inline void glutIdleFunc(void (*f)()) {Fl::set_idle(f);}$/;"	f
glutKeyboardFunc	/usr/include/FL/glut.H	/^inline void glutKeyboardFunc(void (*f)(uchar key, int x, int y)) {$/;"	f
glutMenuStateFunc	/usr/include/FL/glut.H	/^inline void glutMenuStateFunc(void (*f)(int state)) {$/;"	f
glutMenuStatusFunc	/usr/include/FL/glut.H	/^inline void glutMenuStatusFunc(void (*f)(int status, int x, int y)) {$/;"	f
glutMotionFunc	/usr/include/FL/glut.H	/^inline void glutMotionFunc(void (*f)(int x, int y)) {glut_window->motion= f;}$/;"	f
glutMouseFunc	/usr/include/FL/glut.H	/^inline void glutMouseFunc(void (*f)(int b, int state, int x, int y)) {$/;"	f
glutOverlayDisplayFunc	/usr/include/FL/glut.H	/^inline void glutOverlayDisplayFunc(void (*f)()) {$/;"	f
glutPassiveMotionFunc	/usr/include/FL/glut.H	/^inline void glutPassiveMotionFunc(void (*f)(int x, int y)) {$/;"	f
glutPopWindow	/usr/include/FL/glut.H	/^inline void glutPopWindow() {glut_window->show();}$/;"	f
glutPositionWindow	/usr/include/FL/glut.H	/^inline void glutPositionWindow(int x, int y) {glut_window->position(x,y);}$/;"	f
glutPostOverlayRedisplay	/usr/include/FL/glut.H	/^inline void glutPostOverlayRedisplay() {glut_window->redraw_overlay();}$/;"	f
glutPostRedisplay	/usr/include/FL/glut.H	/^inline void glutPostRedisplay() {glut_window->redraw();}$/;"	f
glutPushWindow	/usr/include/FL/glut.H	/^inline void glutPushWindow() { \/* do nothing *\/ }$/;"	f
glutRemoveOverlay	/usr/include/FL/glut.H	/^inline void glutRemoveOverlay() {glut_window->hide_overlay();}$/;"	f
glutReshapeFunc	/usr/include/FL/glut.H	/^inline void glutReshapeFunc(void (*f)(int w, int h)) {glut_window->reshape=f;}$/;"	f
glutReshapeWindow	/usr/include/FL/glut.H	/^inline void glutReshapeWindow(int w, int h) {glut_window->size(w,h);}$/;"	f
glutSetCursor	/usr/include/FL/glut.H	/^inline void glutSetCursor(Fl_Cursor cursor) {glut_window->cursor(cursor);}$/;"	f
glutSetIconTitle	/usr/include/FL/glut.H	/^inline void glutSetIconTitle(char *t) {glut_window->iconlabel(t);}$/;"	f
glutSetMenu	/usr/include/FL/glut.H	/^inline void glutSetMenu(int m) {glut_menu = m;}$/;"	f
glutSetWindowTitle	/usr/include/FL/glut.H	/^inline void glutSetWindowTitle(char *t) {glut_window->label(t);}$/;"	f
glutShowOverlay	/usr/include/FL/glut.H	/^inline void glutShowOverlay() {glut_window->redraw_overlay();}$/;"	f
glutShowWindow	/usr/include/FL/glut.H	/^inline void glutShowWindow() {glut_window->show();}$/;"	f
glutSpecialFunc	/usr/include/FL/glut.H	/^inline void glutSpecialFunc(void (*f)(int key, int x, int y)) {$/;"	f
glutTimerFunc	/usr/include/FL/glut.H	/^inline void glutTimerFunc(unsigned int msec, void (*f)(int), int value) {$/;"	f
glutUseLayer	/usr/include/FL/glut.H	/^inline void glutUseLayer(GLenum layer) {$/;"	f
glutVisibilityFunc	/usr/include/FL/glut.H	/^inline void glutVisibilityFunc(void (*f)(int s)) {glut_window->visibility=f;}$/;"	f
glutWarpPointer	/usr/include/FL/glut.H	/^inline void glutWarpPointer(int, int) { \/* do nothing *\/ }$/;"	f
grab	/usr/include/FL/Fl.H	/^  static Fl_Window* grab() {return grab_;}$/;"	f	class:Fl
grab	/usr/include/FL/Fl.H	/^  static void grab(Fl_Window&win) {grab(&win);}$/;"	f	class:Fl
grab_	/usr/include/FL/Fl.H	/^  static Fl_Window* grab_;$/;"	m	class:Fl
gvalue	/usr/include/FL/Fl_Color_Chooser.H	/^  Flcc_Value_Input gvalue;$/;"	m	class:Fl_Color_Chooser
h	/usr/include/FL/Fl_Help_View.H	/^		h;		\/\/ Height of link text$/;"	m	struct:Fl_Help_Link
h	/usr/include/FL/Fl_Help_View.H	/^		h;		\/\/ Height$/;"	m	struct:Fl_Help_Block
h	/usr/include/FL/Fl_Image.H	/^  int h() const {return h_;}$/;"	f	class:Fl_Image
h	/usr/include/FL/Fl_Image.H	/^  void h(int H) {h_ = H;}$/;"	f	class:Fl_Image
h	/usr/include/FL/Fl_Text_Display.H	/^    struct { int x, y, w, h; } text_area;$/;"	m	struct:Fl_Text_Display::__anon24
h	/usr/include/FL/Fl_Widget.H	/^  int h() const {return h_;}$/;"	f	class:Fl_Widget
h	/usr/include/FL/Fl_Widget.H	/^  void h(int v) {h_ = (short)v;}$/;"	f	class:Fl_Widget
h_	/usr/include/FL/Fl_Image.H	/^  int w_, h_, d_, ld_, count_;$/;"	m	class:Fl_Image
h_	/usr/include/FL/Fl_Widget.H	/^  short x_,y_,w_,h_;$/;"	m	class:Fl_Widget
handle	/usr/include/FL/Fl_Spinner.H	/^  int		handle(int event) {$/;"	f	class:Fl_Spinner
handle	ModelerView.cpp	/^int ModelerView::handle( int event )$/;"	f	class:ModelerView
handle_push	/usr/include/FL/Fl_Valuator.H	/^  void handle_push() {previous_value_ = value_;}$/;"	f	class:Fl_Valuator
handlers_	/usr/include/FL/Fl_Shared_Image.H	/^  static Fl_Shared_Handler *handlers_;	\/\/ Additional format handlers$/;"	m	class:Fl_Shared_Image
has_scrollbar	/usr/include/FL/Fl_Browser_.H	/^  uchar has_scrollbar() const {return has_scrollbar_;}$/;"	f	class:Fl_Browser_
has_scrollbar	/usr/include/FL/Fl_Browser_.H	/^  void has_scrollbar(uchar i) {has_scrollbar_ = i;}$/;"	f	class:Fl_Browser_
has_scrollbar_	/usr/include/FL/Fl_Browser_.H	/^  uchar has_scrollbar_;	\/\/ which scrollbars are enabled$/;"	m	class:Fl_Browser_
height	/usr/include/FL/mac.H	/^struct XRectangle {int x, y, width, height;};$/;"	m	struct:XRectangle
height	/usr/include/FL/win32.H	/^struct XRectangle {int x, y, width, height;};$/;"	m	struct:XRectangle
height_	/usr/include/FL/Fl_Scroll.H	/^  int width_, height_;$/;"	m	class:Fl_Scroll
help	/usr/include/FL/Fl.H	/^  static const char* const help;$/;"	m	class:Fl
hfunc	/usr/include/FL/Fl_Free.H	/^    FL_HANDLEPTR hfunc;$/;"	m	class:Fl_Free
hide	/usr/include/FL/Fl_Browser.H	/^  void hide() {Fl_Widget::hide();}$/;"	f	class:Fl_Browser
hide	/usr/include/FL/Fl_Menu_Item.H	/^  void hide() {flags |= FL_MENU_INVISIBLE;}$/;"	f	struct:Fl_Menu_Item
hide_cursor	/usr/include/FL/Fl_Text_Display.H	/^    void hide_cursor() { show_cursor(0); }$/;"	f	class:Fl_Text_Display
highlight	/usr/include/FL/Fl_Text_Buffer.H	/^    int highlight() { return mHighlight.selected(); }$/;"	f	class:Fl_Text_Buffer
highlight_selection	/usr/include/FL/Fl_Text_Buffer.H	/^    Fl_Text_Selection* highlight_selection() { return &mHighlight; }$/;"	f	class:Fl_Text_Buffer
homogenize	./vecmath/src/Vector4f.cpp	/^void Vector4f::homogenize()$/;"	f	class:Vector4f
homogenized	./vecmath/src/Vector3f.cpp	/^Vector2f Vector3f::homogenized() const$/;"	f	class:Vector3f
homogenized	./vecmath/src/Vector4f.cpp	/^Vector4f Vector4f::homogenized() const$/;"	f	class:Vector4f
horizontal	/usr/include/FL/Fl_Pack.H	/^  uchar horizontal() const {return type();}$/;"	f	class:Fl_Pack
horizontal	/usr/include/FL/Fl_Valuator.H	/^  int horizontal() const {return type()&1;}$/;"	f	class:Fl_Valuator
hotspot	/usr/include/FL/Fl_Window.H	/^  void hotspot(const Fl_Widget& p, int offscreen = 0) {hotspot(&p,offscreen);}$/;"	f	class:Fl_Window
hour	/usr/include/FL/Fl_Clock.H	/^  int hour() const {return hour_;}$/;"	f	class:Fl_Clock_Output
hour_	/usr/include/FL/Fl_Clock.H	/^  int hour_, minute_, second_;$/;"	m	class:Fl_Clock_Output
hoverdelay	/usr/include/FL/Fl_Tooltip.H	/^  static float hoverdelay() { return hoverdelay_; }$/;"	f	class:Fl_Tooltip
hoverdelay	/usr/include/FL/Fl_Tooltip.H	/^  static void hoverdelay(float f) { hoverdelay_ = f; }$/;"	f	class:Fl_Tooltip
hoverdelay_	/usr/include/FL/Fl_Tooltip.H	/^  static float hoverdelay_;$/;"	m	class:Fl_Tooltip
hposition	/usr/include/FL/Fl_Browser_.H	/^  int hposition() const {return hposition_;}$/;"	f	class:Fl_Browser_
hposition_	/usr/include/FL/Fl_Browser_.H	/^  int hposition_;	\/\/ where user wants it panned to$/;"	m	class:Fl_Browser_
hscrollbar	/usr/include/FL/Fl_Browser_.H	/^  Fl_Scrollbar hscrollbar;		\/\/ Horizontal scrollbar$/;"	m	class:Fl_Browser_
hscrollbar	/usr/include/FL/Fl_Scroll.H	/^  Fl_Scrollbar hscrollbar;$/;"	m	class:Fl_Scroll
hscrollbar_	/usr/include/FL/Fl_Help_View.H	/^		hscrollbar_;		\/\/ Horizontal scrollbar$/;"	m	class:Fl_Help_View
hsize_	/usr/include/FL/Fl_Help_View.H	/^		hsize_;			\/\/ Maximum document width$/;"	m	class:Fl_Help_View
hue	/usr/include/FL/Fl_Color_Chooser.H	/^  double hue() const {return hue_;}$/;"	f	class:Fl_Color_Chooser
hue_	/usr/include/FL/Fl_Color_Chooser.H	/^  double hue_, saturation_, value_;$/;"	m	class:Fl_Color_Chooser
huebox	/usr/include/FL/Fl_Color_Chooser.H	/^  Flcc_HueBox huebox;$/;"	m	class:Fl_Color_Chooser
hv_selection_color	/usr/include/FL/Fl_Help_View.H	/^  static Fl_Color hv_selection_color;$/;"	m	class:Fl_Help_View
hv_selection_text_color	/usr/include/FL/Fl_Help_View.H	/^  static Fl_Color hv_selection_text_color;$/;"	m	class:Fl_Help_View
i	/usr/include/FL/Fl_Window.H	/^  Fl_X *i; \/\/ points at the system-specific stuff$/;"	m	class:Fl_Window
i	/usr/include/FL/mac.H	/^  static Fl_X* i(const Fl_Window* w) {return w->i;}$/;"	f	class:Fl_X
i	/usr/include/FL/win32.H	/^  static Fl_X* i(const Fl_Window* w) {return w->i;}$/;"	f	class:Fl_X
i	/usr/include/FL/x.H	/^  static Fl_X* i(const Fl_Window* wi) {return wi->i;}$/;"	f	class:Fl_X
icon	/usr/include/FL/Fl_Window.H	/^  const void* icon() const	{return icon_;}$/;"	f	class:Fl_Window
icon	/usr/include/FL/Fl_Window.H	/^  void icon(const void * ic)	{icon_ = ic;}$/;"	f	class:Fl_Window
icon_	/usr/include/FL/Fl_Window.H	/^  const void* icon_;$/;"	m	class:Fl_Window
iconlabel	/usr/include/FL/Fl_Window.H	/^  const char* iconlabel() const	{return iconlabel_;}$/;"	f	class:Fl_Window
iconlabel_	/usr/include/FL/Fl_Window.H	/^  const char* iconlabel_;$/;"	m	class:Fl_Window
iconsize	/usr/include/FL/Fl_File_Browser.H	/^  uchar		iconsize() const { return (iconsize_); };$/;"	f	class:Fl_File_Browser
iconsize	/usr/include/FL/Fl_File_Browser.H	/^  void		iconsize(uchar s) { iconsize_ = s; redraw(); };$/;"	f	class:Fl_File_Browser
iconsize_	/usr/include/FL/Fl_File_Browser.H	/^  uchar		iconsize_;$/;"	m	class:Fl_File_Browser
id	/usr/include/FL/Fl_Bitmap.H	/^  unsigned id; \/\/ for internal use$/;"	m	class:Fl_Bitmap
id	/usr/include/FL/Fl_Bitmap.H	/^  void *id; \/\/ for internal use$/;"	m	class:Fl_Bitmap
id	/usr/include/FL/Fl_Image.H	/^  unsigned id; \/\/ for internal use$/;"	m	class:Fl_RGB_Image
id	/usr/include/FL/Fl_Image.H	/^  void *id; \/\/ for internal use$/;"	m	class:Fl_RGB_Image
id	/usr/include/FL/Fl_Pixmap.H	/^  unsigned id; \/\/ for internal use$/;"	m	class:Fl_Pixmap
id	/usr/include/FL/Fl_Pixmap.H	/^  void *id; \/\/ for internal use$/;"	m	class:Fl_Pixmap
identity	./vecmath/src/Matrix2f.cpp	/^Matrix2f Matrix2f::identity()$/;"	f	class:Matrix2f
identity	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::identity()$/;"	f	class:Matrix3f
identity	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::identity()$/;"	f	class:Matrix4f
idle	/usr/include/FL/Fl.H	/^  static void (*idle)();$/;"	m	class:Fl
image	/usr/include/FL/Fl_Menu_Item.H	/^  void image(Fl_Image& a) {a.label(this);}$/;"	f	struct:Fl_Menu_Item
image	/usr/include/FL/Fl_Menu_Item.H	/^  void image(Fl_Image* a) {a->label(this);}$/;"	f	struct:Fl_Menu_Item
image	/usr/include/FL/Fl_Tiled_Image.H	/^  Fl_Image *image() { return image_; }$/;"	f	class:Fl_Tiled_Image
image	/usr/include/FL/Fl_Widget.H	/^  Fl_Image* image() {return label_.image;}$/;"	f	class:Fl_Widget
image	/usr/include/FL/Fl_Widget.H	/^  Fl_Image* image;$/;"	m	struct:Fl_Label
image	/usr/include/FL/Fl_Widget.H	/^  void image(Fl_Image& a) {label_.image=&a;}$/;"	f	class:Fl_Widget
image	/usr/include/FL/Fl_Widget.H	/^  void image(Fl_Image* a) {label_.image=a;}$/;"	f	class:Fl_Widget
image_	/usr/include/FL/Fl_Shared_Image.H	/^  Fl_Image	*image_;		\/\/ The image that is shared$/;"	m	class:Fl_Shared_Image
image_	/usr/include/FL/Fl_Tiled_Image.H	/^  Fl_Image	*image_;		\/\/ The image that is shared$/;"	m	class:Fl_Tiled_Image
images_	/usr/include/FL/Fl_Shared_Image.H	/^  static Fl_Shared_Image **images_;	\/\/ Shared images$/;"	m	class:Fl_Shared_Image
inactive	/usr/include/FL/Enumerations.H	449;"	d
inactive	/usr/include/FL/Fl_Image.H	/^  void inactive() { color_average(FL_GRAY, .33f); }$/;"	f	class:Fl_Image
incr_height	/usr/include/FL/Fl_File_Browser.H	/^  int		incr_height() const { return (item_height(0)); }$/;"	f	class:Fl_File_Browser
index	/usr/include/FL/Fl_Input_.H	/^  char index(int i) const {return value_[i];}$/;"	f	class:Fl_Input_
index_	/usr/include/FL/Fl_Help_Dialog.H	/^  int index_; $/;"	m	class:Fl_Help_Dialog
infinitePerspectiveProjection	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::infinitePerspectiveProjection( float fLeft, float fRight,$/;"	f	class:Matrix4f
initfont	/usr/include/FL/Fl_Help_View.H	/^  void		initfont(uchar &f, uchar &s) { nfonts_ = 0;$/;"	f	class:Fl_Help_View
inp_	/usr/include/FL/Fl_Input_Choice.H	/^  Fl_Input *inp_;$/;"	m	class:Fl_Input_Choice
inp_cb	/usr/include/FL/Fl_Input_Choice.H	/^  static void inp_cb(Fl_Widget*, void *data) { $/;"	f	class:Fl_Input_Choice
inp_h	/usr/include/FL/Fl_Input_Choice.H	/^  inline int inp_h() { return(h() - Fl::box_dh(box())); }$/;"	f	class:Fl_Input_Choice
inp_w	/usr/include/FL/Fl_Input_Choice.H	/^  inline int inp_w() { return(w() - Fl::box_dw(box()) - 20); }$/;"	f	class:Fl_Input_Choice
inp_x	/usr/include/FL/Fl_Input_Choice.H	/^  inline int inp_x() { return(x() + Fl::box_dx(box())); }$/;"	f	class:Fl_Input_Choice
inp_y	/usr/include/FL/Fl_Input_Choice.H	/^  inline int inp_y() { return(y() + Fl::box_dy(box())); }$/;"	f	class:Fl_Input_Choice
input	/usr/include/FL/Fl_Input_Choice.H	/^  Fl_Input *input() { return inp_; }$/;"	f	class:Fl_Input_Choice
input	/usr/include/FL/Fl_Value_Input.H	/^  Fl_Input input;$/;"	m	class:Fl_Value_Input
input_	/usr/include/FL/Fl_Spinner.H	/^  Fl_Input	input_;			\/\/ Input field for the value$/;"	m	class:Fl_Spinner
input_type	/usr/include/FL/Fl_Input_.H	/^  int input_type() const {return type() & FL_INPUT_TYPE; }$/;"	f	class:Fl_Input_
input_type	/usr/include/FL/Fl_Input_.H	/^  void input_type(int t) { type((uchar)(t | readonly())); }$/;"	f	class:Fl_Input_
insert	/usr/include/FL/Fl_Group.H	/^  void insert(Fl_Widget& o, Fl_Widget* before) {insert(o,find(before));}$/;"	f	class:Fl_Group
insert	/usr/include/FL/Fl_Input_.H	/^  int insert(const char* t, int l=0){return replace(position_, mark_, t, l);}$/;"	f	class:Fl_Input_
insert_mode	/usr/include/FL/Fl_Text_Editor.H	/^    int insert_mode() { return insert_mode_; }$/;"	f	class:Fl_Text_Editor
insert_mode	/usr/include/FL/Fl_Text_Editor.H	/^    void insert_mode(int b) { insert_mode_ = b; }$/;"	f	class:Fl_Text_Editor
insert_mode_	/usr/include/FL/Fl_Text_Editor.H	/^    int insert_mode_;$/;"	m	class:Fl_Text_Editor
insert_position	/usr/include/FL/Fl_Text_Display.H	/^    int insert_position() { return mCursorPos; }$/;"	f	class:Fl_Text_Display
inside	/usr/include/FL/Fl_Widget.H	/^  int inside(const Fl_Widget* o) const {return o ? o->contains(this) : 0;}$/;"	f	class:Fl_Widget
inverse	./vecmath/src/Matrix2f.cpp	/^Matrix2f Matrix2f::inverse( bool* pbIsSingular, float epsilon )$/;"	f	class:Matrix2f
inverse	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::inverse( bool* pbIsSingular, float epsilon ) const$/;"	f	class:Matrix3f
inverse	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::inverse( bool* pbIsSingular, float epsilon ) const$/;"	f	class:Matrix4f
inverse	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::inverse() const$/;"	f	class:Quat4f
invert	./vecmath/src/Quat4f.cpp	/^void Quat4f::invert()$/;"	f	class:Quat4f
ix	/usr/include/FL/Fl_Adjuster.H	/^  int ix;$/;"	m	class:Fl_Adjuster
key	/usr/include/FL/Fl_Text_Editor.H	/^      int          key;$/;"	m	struct:Fl_Text_Editor::Key_Binding
key_bindings	/usr/include/FL/Fl_Text_Editor.H	/^    Key_Binding* key_bindings;$/;"	m	class:Fl_Text_Editor
keyboard	/usr/include/FL/glut.H	/^  void (*keyboard)(uchar, int x, int y);$/;"	m	class:Fl_Glut_Window
label	/usr/include/FL/Fl_Menu_Item.H	/^  const char* label() const {return text;}$/;"	f	struct:Fl_Menu_Item
label	/usr/include/FL/Fl_Menu_Item.H	/^  void label(Fl_Labeltype a,const char* b) {labeltype_ = a; text = b;}$/;"	f	struct:Fl_Menu_Item
label	/usr/include/FL/Fl_Menu_Item.H	/^  void label(const char* a) {text=a;}$/;"	f	struct:Fl_Menu_Item
label	/usr/include/FL/Fl_Widget.H	/^  const char* label() const {return label_.value;}$/;"	f	class:Fl_Widget
label	/usr/include/FL/Fl_Widget.H	/^  void label(Fl_Labeltype a,const char* b) {label_.type = a; label_.value = b;}$/;"	f	class:Fl_Widget
label	/usr/include/FL/Fl_Window.H	/^  const char* label() const	{return Fl_Widget::label();}$/;"	f	class:Fl_Window
label_	/usr/include/FL/Fl_Widget.H	/^  Fl_Label label_;$/;"	m	class:Fl_Widget
labela	/usr/include/FL/Fl_Multi_Label.H	/^  const char* labela;$/;"	m	struct:Fl_Multi_Label
labelb	/usr/include/FL/Fl_Multi_Label.H	/^  const char* labelb;$/;"	m	struct:Fl_Multi_Label
labelcolor	/usr/include/FL/Fl_Menu_Item.H	/^  Fl_Color labelcolor() const {return (Fl_Color)labelcolor_;}$/;"	f	struct:Fl_Menu_Item
labelcolor	/usr/include/FL/Fl_Menu_Item.H	/^  void labelcolor(unsigned a) {labelcolor_ = a;}$/;"	f	struct:Fl_Menu_Item
labelcolor	/usr/include/FL/Fl_Widget.H	/^  Fl_Color labelcolor() const {return (Fl_Color)label_.color;}$/;"	f	class:Fl_Widget
labelcolor	/usr/include/FL/Fl_Widget.H	/^  void labelcolor(unsigned a) {label_.color=a;}$/;"	f	class:Fl_Widget
labelcolor_	/usr/include/FL/Fl_Menu_Item.H	/^  unsigned labelcolor_;$/;"	m	struct:Fl_Menu_Item
labelfont	/usr/include/FL/Fl_Menu_Item.H	/^  Fl_Font labelfont() const {return (Fl_Font)labelfont_;}$/;"	f	struct:Fl_Menu_Item
labelfont	/usr/include/FL/Fl_Menu_Item.H	/^  void labelfont(uchar a) {labelfont_ = a;}$/;"	f	struct:Fl_Menu_Item
labelfont	/usr/include/FL/Fl_Widget.H	/^  Fl_Font labelfont() const {return (Fl_Font)label_.font;}$/;"	f	class:Fl_Widget
labelfont	/usr/include/FL/Fl_Widget.H	/^  void labelfont(uchar a) {label_.font=a;}$/;"	f	class:Fl_Widget
labelfont_	/usr/include/FL/Fl_Menu_Item.H	/^  uchar labelfont_;$/;"	m	struct:Fl_Menu_Item
labelsize	/usr/include/FL/Fl_Menu_Item.H	/^  uchar labelsize() const {return labelsize_;}$/;"	f	struct:Fl_Menu_Item
labelsize	/usr/include/FL/Fl_Menu_Item.H	/^  void labelsize(uchar a) {labelsize_ = a;}$/;"	f	struct:Fl_Menu_Item
labelsize	/usr/include/FL/Fl_Widget.H	/^  uchar labelsize() const {return label_.size;}$/;"	f	class:Fl_Widget
labelsize	/usr/include/FL/Fl_Widget.H	/^  void labelsize(uchar a) {label_.size=a;}$/;"	f	class:Fl_Widget
labelsize_	/usr/include/FL/Fl_Menu_Item.H	/^  uchar labelsize_;$/;"	m	struct:Fl_Menu_Item
labeltype	/usr/include/FL/Fl_Menu_Item.H	/^  Fl_Labeltype labeltype() const {return (Fl_Labeltype)labeltype_;}$/;"	f	struct:Fl_Menu_Item
labeltype	/usr/include/FL/Fl_Menu_Item.H	/^  void labeltype(Fl_Labeltype a) {labeltype_ = a;}$/;"	f	struct:Fl_Menu_Item
labeltype	/usr/include/FL/Fl_Widget.H	/^  Fl_Labeltype labeltype() const {return (Fl_Labeltype)label_.type;}$/;"	f	class:Fl_Widget
labeltype	/usr/include/FL/Fl_Widget.H	/^  void labeltype(Fl_Labeltype a) {label_.type = a;}$/;"	f	class:Fl_Widget
labeltype_	/usr/include/FL/Fl_Menu_Item.H	/^  uchar labeltype_;$/;"	m	struct:Fl_Menu_Item
larger_	/usr/include/FL/Fl_Help_Dialog.H	/^  Fl_Button *larger_;$/;"	m	class:Fl_Help_Dialog
last	/usr/include/FL/Fl_Browser.H	/^  FL_BLINE *last;$/;"	m	class:Fl_Browser
last	/usr/include/FL/Fl_Check_Browser.H	/^  cb_item *last;$/;"	m	class:Fl_Check_Browser
lastEntrySet	/usr/include/FL/Fl_Preferences.H	/^    static int lastEntrySet;$/;"	m	class:Fl_Preferences::Node
lastsec	/usr/include/FL/Fl_Timer.H	/^  long lastsec,lastusec;$/;"	m	class:Fl_Timer
lastusec	/usr/include/FL/Fl_Timer.H	/^  long lastsec,lastusec;$/;"	m	class:Fl_Timer
ld	/usr/include/FL/Fl_Image.H	/^  int ld() const {return ld_;}$/;"	f	class:Fl_Image
ld	/usr/include/FL/Fl_Image.H	/^  void ld(int LD) {ld_ = LD;}$/;"	f	class:Fl_Image
ld_	/usr/include/FL/Fl_Image.H	/^  int w_, h_, d_, ld_, count_;$/;"	m	class:Fl_Image
leftline	/usr/include/FL/Fl_Help_View.H	/^  int		leftline() const { return (leftline_); }$/;"	f	class:Fl_Help_View
leftline_	/usr/include/FL/Fl_Help_View.H	/^		leftline_,		\/\/ Lefthand position$/;"	m	class:Fl_Help_View
length	/usr/include/FL/Fl_Text_Buffer.H	/^    int length() { return mLength; }$/;"	f	class:Fl_Text_Buffer
lerp	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::lerp( const Quat4f& q0, const Quat4f& q1, float alpha )$/;"	f	class:Quat4f
lerp	./vecmath/src/Vector2f.cpp	/^Vector2f Vector2f::lerp( const Vector2f& v0, const Vector2f& v1, float alpha )$/;"	f	class:Vector2f
lerp	./vecmath/src/Vector3f.cpp	/^Vector3f Vector3f::lerp( const Vector3f& v0, const Vector3f& v1, float alpha )$/;"	f	class:Vector3f
lerp	./vecmath/src/Vector4f.cpp	/^Vector4f Vector4f::lerp( const Vector4f& v0, const Vector4f& v1, float alpha )$/;"	f	class:Vector4f
line	/usr/include/FL/Fl_Help_View.H	/^  int		line[32];	\/\/ Left starting position for each line$/;"	m	struct:Fl_Help_Block
line_	/usr/include/FL/Fl_Help_Dialog.H	/^  int line_[100]; $/;"	m	class:Fl_Help_Dialog
lines	/usr/include/FL/Fl_Browser.H	/^  int lines;                	\/\/ Number of lines$/;"	m	class:Fl_Browser
linesize	/usr/include/FL/Fl_Scrollbar.H	/^  int linesize() const {return linesize_;}$/;"	f	class:Fl_Scrollbar
linesize	/usr/include/FL/Fl_Scrollbar.H	/^  void linesize(int i) {linesize_ = i;}$/;"	f	class:Fl_Scrollbar
linesize_	/usr/include/FL/Fl_Scrollbar.H	/^  int linesize_;$/;"	m	class:Fl_Scrollbar
link	/usr/include/FL/Fl_Help_View.H	/^  void		link(Fl_Help_Func *fn) { link_ = fn; }$/;"	f	class:Fl_Help_View
link_	/usr/include/FL/Fl_Help_View.H	/^  Fl_Help_Func	*link_;			\/\/ Link transform function$/;"	m	class:Fl_Help_View
linkcolor_	/usr/include/FL/Fl_Help_View.H	/^		linkcolor_;		\/\/ Link color$/;"	m	class:Fl_Help_View
links_	/usr/include/FL/Fl_Help_View.H	/^  Fl_Help_Link	*links_;		\/\/ Links$/;"	m	class:Fl_Help_View
load	Mesh.cpp	/^void Mesh::load( const char* filename )$/;"	f	class:Mesh
load	SkeletalModel.cpp	/^void SkeletalModel::load(const char *skeletonFile, const char *meshFile, const char *attachmentsFile)$/;"	f	class:SkeletalModel
loadAttachments	Mesh.cpp	/^void Mesh::loadAttachments( const char* filename, int numJoints )$/;"	f	class:Mesh
loadModel	ModelerView.cpp	/^void ModelerView::loadModel(int argc, char* argv[])$/;"	f	class:ModelerView
loadSkeleton	SkeletalModel.cpp	/^void SkeletalModel::loadSkeleton( const char* filename )$/;"	f	class:SkeletalModel
loadfile	/usr/include/FL/Fl_Text_Buffer.H	/^    int loadfile(const char *file, int buflen = 128*1024)$/;"	f	class:Fl_Text_Buffer
log	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::log() const$/;"	f	class:Quat4f
logDifference	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::logDifference( const Quat4f& a, const Quat4f& b )$/;"	f	class:Quat4f
lookAt	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::lookAt( const Vector3f& eye, const Vector3f& center, const Vector3f& up )$/;"	f	class:Matrix4f
lstep	/usr/include/FL/Fl_Counter.H	/^  void lstep(double a) {lstep_ = a;}$/;"	f	class:Fl_Counter
lstep_	/usr/include/FL/Fl_Counter.H	/^  double lstep_;$/;"	m	class:Fl_Counter
mAbsTopLineNum	/usr/include/FL/Fl_Text_Display.H	/^    int mAbsTopLineNum;			\/* In continuous wrap mode, the line$/;"	m	class:Fl_Text_Display
mBuf	/usr/include/FL/Fl_Text_Buffer.H	/^    char* mBuf;                 \/* allocated memory where the text is stored *\/$/;"	m	class:Fl_Text_Buffer
mBuffer	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Text_Buffer* mBuffer;    \/* Contains text to be displayed *\/$/;"	m	class:Fl_Text_Display
mButtonState	camera.h	/^    Button  mButtonState;$/;"	m	class:Camera
mCanUndo	/usr/include/FL/Fl_Text_Buffer.H	/^    char mCanUndo;		\/* if this buffer is used for attributes, it must$/;"	m	class:Fl_Text_Buffer
mCbArgs	/usr/include/FL/Fl_Text_Buffer.H	/^    void** mCbArgs;             \/* caller arguments for modifyProcs above *\/$/;"	m	class:Fl_Text_Buffer
mContinuousWrap	/usr/include/FL/Fl_Text_Display.H	/^    int mContinuousWrap;     	  \/* Wrap long lines when displaying *\/$/;"	m	class:Fl_Text_Display
mCurrentCenter	camera.h	/^    Vector3f mCurrentCenter;$/;"	m	class:Camera
mCurrentDistance	camera.h	/^    float   mCurrentDistance;$/;"	m	class:Camera
mCurrentRot	camera.h	/^    Matrix4f mCurrentRot;$/;"	m	class:Camera
mCursorOldY	/usr/include/FL/Fl_Text_Display.H	/^    int mCursorOldY;		\/* Y pos. of cursor for blanking *\/$/;"	m	class:Fl_Text_Display
mCursorOn	/usr/include/FL/Fl_Text_Display.H	/^    int mCursorOn;$/;"	m	class:Fl_Text_Display
mCursorPos	/usr/include/FL/Fl_Text_Display.H	/^    int mCursorPos;$/;"	m	class:Fl_Text_Display
mCursorPosHint	/usr/include/FL/Fl_Text_Buffer.H	/^    int mCursorPosHint;         \/* hint for reasonable cursor position after$/;"	m	class:Fl_Text_Buffer
mCursorPreferredCol	/usr/include/FL/Fl_Text_Display.H	/^    int mCursorPreferredCol;    \/* Column for vert. cursor movement *\/$/;"	m	class:Fl_Text_Display
mCursorStyle	/usr/include/FL/Fl_Text_Display.H	/^    int mCursorStyle;           \/* One of enum cursorStyles above *\/$/;"	m	class:Fl_Text_Display
mCursorToHint	/usr/include/FL/Fl_Text_Display.H	/^    int mCursorToHint;		\/* Tells the buffer modified callback$/;"	m	class:Fl_Text_Display
mCursor_color	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Color mCursor_color;$/;"	m	class:Fl_Text_Display
mDimensions	camera.h	/^    int     mDimensions[2];$/;"	m	class:Camera
mEnd	/usr/include/FL/Fl_Text_Buffer.H	/^    int mEnd;$/;"	m	class:Fl_Text_Selection
mFirstChar	/usr/include/FL/Fl_Text_Display.H	/^    int mFirstChar, mLastChar;  \/* Buffer positions of first and last$/;"	m	class:Fl_Text_Display
mFixedFontWidth	/usr/include/FL/Fl_Text_Display.H	/^    int mFixedFontWidth;        \/* Font width if all current fonts are$/;"	m	class:Fl_Text_Display
mGapEnd	/usr/include/FL/Fl_Text_Buffer.H	/^    int mGapEnd;                \/* points to the first char after the gap *\/$/;"	m	class:Fl_Text_Buffer
mGapStart	/usr/include/FL/Fl_Text_Buffer.H	/^    int mGapStart;              \/* points to the first character of the gap *\/$/;"	m	class:Fl_Text_Buffer
mHScrollBar	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Scrollbar* mHScrollBar;$/;"	m	class:Fl_Text_Display
mHighlight	/usr/include/FL/Fl_Text_Buffer.H	/^    Fl_Text_Selection mHighlight;$/;"	m	class:Fl_Text_Buffer
mHighlightCBArg	/usr/include/FL/Fl_Text_Display.H	/^    void* mHighlightCBArg;      \/* Arg to unfinishedHighlightCB *\/$/;"	m	class:Fl_Text_Display
mHorizOffset	/usr/include/FL/Fl_Text_Display.H	/^    int mHorizOffset;           \/* Horizontal scroll pos. in pixels *\/$/;"	m	class:Fl_Text_Display
mHorizOffsetHint	/usr/include/FL/Fl_Text_Display.H	/^    int mHorizOffsetHint;       \/* Horizontal scroll pos. in pixels *\/$/;"	m	class:Fl_Text_Display
mLastChar	/usr/include/FL/Fl_Text_Display.H	/^    int mFirstChar, mLastChar;  \/* Buffer positions of first and last$/;"	m	class:Fl_Text_Display
mLength	/usr/include/FL/Fl_Text_Buffer.H	/^    int mLength;                \/* length of the text in the buffer (the length$/;"	m	class:Fl_Text_Buffer
mLineNumLeft	/usr/include/FL/Fl_Text_Display.H	/^    int mLineNumLeft, mLineNumWidth;$/;"	m	class:Fl_Text_Display
mLineNumWidth	/usr/include/FL/Fl_Text_Display.H	/^    int mLineNumLeft, mLineNumWidth;$/;"	m	class:Fl_Text_Display
mLineStarts	/usr/include/FL/Fl_Text_Display.H	/^    int* mLineStarts;$/;"	m	class:Fl_Text_Display
mMaxsize	/usr/include/FL/Fl_Text_Display.H	/^    int mMaxsize;$/;"	m	class:Fl_Text_Display
mModifyingTabDistance	/usr/include/FL/Fl_Text_Display.H	/^    int mModifyingTabDistance;	\/* Whether tab distance is being$/;"	m	class:Fl_Text_Display
mNBufferLines	/usr/include/FL/Fl_Text_Display.H	/^    int mNBufferLines;          \/* # of newlines in the buffer *\/$/;"	m	class:Fl_Text_Display
mNLinesDeleted	/usr/include/FL/Fl_Text_Display.H	/^    int mNLinesDeleted;			\/* Number of lines deleted during$/;"	m	class:Fl_Text_Display
mNModifyProcs	/usr/include/FL/Fl_Text_Buffer.H	/^    int mNModifyProcs;          \/* number of modify-redisplay procs attached *\/$/;"	m	class:Fl_Text_Buffer
mNPredeleteProcs	/usr/include/FL/Fl_Text_Buffer.H	/^    int mNPredeleteProcs;	\/* number of pre-delete procs attached *\/$/;"	m	class:Fl_Text_Buffer
mNStyles	/usr/include/FL/Fl_Text_Display.H	/^    int mNStyles;               \/* Number of entries in styleTable *\/$/;"	m	class:Fl_Text_Display
mNVisibleLines	/usr/include/FL/Fl_Text_Display.H	/^    int mNVisibleLines;         \/* # of visible (displayed) lines *\/$/;"	m	class:Fl_Text_Display
mNeedAbsTopLineNum	/usr/include/FL/Fl_Text_Display.H	/^    int mNeedAbsTopLineNum;	\/* Externally settable flag to continue$/;"	m	class:Fl_Text_Display
mNodifyProcs	/usr/include/FL/Fl_Text_Buffer.H	/^    mNodifyProcs;               \/* modified to redisplay contents *\/$/;"	m	class:Fl_Text_Buffer
mNullSubsChar	/usr/include/FL/Fl_Text_Buffer.H	/^    char mNullSubsChar;         \/* NEdit is based on C null-terminated strings,$/;"	m	class:Fl_Text_Buffer
mPerspective	camera.h	/^    float   mPerspective[2];$/;"	m	class:Camera
mPredeleteCbArgs	/usr/include/FL/Fl_Text_Buffer.H	/^    void **mPredeleteCbArgs;	\/* caller argument for pre-delete proc above *\/$/;"	m	class:Fl_Text_Buffer
mPredeleteProcs	/usr/include/FL/Fl_Text_Buffer.H	/^	 mPredeleteProcs;	\/* from the buffer; at most one is supported. *\/$/;"	m	class:Fl_Text_Buffer
mPrimary	/usr/include/FL/Fl_Text_Buffer.H	/^    Fl_Text_Selection mPrimary; \/* highlighted areas *\/$/;"	m	class:Fl_Text_Buffer
mRectEnd	/usr/include/FL/Fl_Text_Buffer.H	/^    int mRectEnd;$/;"	m	class:Fl_Text_Selection
mRectStart	/usr/include/FL/Fl_Text_Buffer.H	/^    int mRectStart;$/;"	m	class:Fl_Text_Selection
mRectangular	/usr/include/FL/Fl_Text_Buffer.H	/^    char mRectangular;$/;"	m	class:Fl_Text_Selection
mSecondary	/usr/include/FL/Fl_Text_Buffer.H	/^    Fl_Text_Selection mSecondary;$/;"	m	class:Fl_Text_Buffer
mSelected	/usr/include/FL/Fl_Text_Buffer.H	/^    char mSelected;$/;"	m	class:Fl_Text_Selection
mStart	/usr/include/FL/Fl_Text_Buffer.H	/^    int mStart;$/;"	m	class:Fl_Text_Selection
mStartCenter	camera.h	/^    Vector3f mStartCenter;$/;"	m	class:Camera
mStartClick	camera.h	/^    int     mStartClick[2];$/;"	m	class:Camera
mStartDistance	camera.h	/^    float   mStartDistance;$/;"	m	class:Camera
mStartRot	camera.h	/^    Matrix4f mStartRot;$/;"	m	class:Camera
mStyleBuffer	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Text_Buffer* mStyleBuffer; \/* Optional parallel buffer containing$/;"	m	class:Fl_Text_Display
mStyleTable	/usr/include/FL/Fl_Text_Display.H	/^    const Style_Table_Entry *mStyleTable; \/* Table of fonts and colors for$/;"	m	class:Fl_Text_Display
mSuppressResync	/usr/include/FL/Fl_Text_Display.H	/^    int mSuppressResync;		\/* Suppress resynchronization of line$/;"	m	class:Fl_Text_Display
mTabDist	/usr/include/FL/Fl_Text_Buffer.H	/^    int mTabDist;               \/* equiv. number of characters in a tab *\/$/;"	m	class:Fl_Text_Buffer
mTopLineNum	/usr/include/FL/Fl_Text_Display.H	/^    int mTopLineNum;            \/* Line number of top displayed line$/;"	m	class:Fl_Text_Display
mTopLineNumHint	/usr/include/FL/Fl_Text_Display.H	/^    int mTopLineNumHint;        \/* Line number of top displayed line$/;"	m	class:Fl_Text_Display
mUnfinishedHighlightCB	/usr/include/FL/Fl_Text_Display.H	/^    Unfinished_Style_Cb mUnfinishedHighlightCB; \/* Callback to parse "unfinished" *\/$/;"	m	class:Fl_Text_Display
mUnfinishedStyle	/usr/include/FL/Fl_Text_Display.H	/^    char mUnfinishedStyle;      \/* Style buffer entry which triggers$/;"	m	class:Fl_Text_Display
mUseTabs	/usr/include/FL/Fl_Text_Buffer.H	/^    int mUseTabs;               \/* True if buffer routines are allowed to use$/;"	m	class:Fl_Text_Buffer
mVScrollBar	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Scrollbar* mVScrollBar;$/;"	m	class:Fl_Text_Display
mViewport	camera.h	/^    int     mViewport[4];$/;"	m	class:Camera
mWrapMargin	/usr/include/FL/Fl_Text_Display.H	/^    int mWrapMargin; 	    	  \/* Margin in # of char positions for$/;"	m	class:Fl_Text_Display
m_animating	modelerapp.h	/^    bool m_animating;$/;"	m	class:ModelerApplication
m_camera	ModelerView.h	/^    Camera *m_camera;$/;"	m	class:ModelerView
m_controlLabelBoxes	modelerapp.h	/^    Fl_Box ** m_controlLabelBoxes;$/;"	m	class:ModelerApplication
m_controlValueSliders	modelerapp.h	/^    Fl_Value_Slider ** m_controlValueSliders;$/;"	m	class:ModelerApplication
m_controlsAnimOnMenu	modelerui.cpp	/^Fl_Menu_Item* ModelerUserInterface::m_controlsAnimOnMenu = ModelerUserInterface::menu_m_controlsMenuBar + 7;$/;"	m	class:ModelerUserInterface	file:
m_controlsAnimOnMenu	modelerui.h	/^  static Fl_Menu_Item *m_controlsAnimOnMenu;$/;"	m	class:ModelerUserInterface
m_controlsBrowser	modelerui.h	/^  Fl_Browser *m_controlsBrowser;$/;"	m	class:ModelerUserInterface
m_controlsMenuBar	modelerui.h	/^  Fl_Menu_Bar *m_controlsMenuBar;$/;"	m	class:ModelerUserInterface
m_controlsPack	modelerui.h	/^  Fl_Pack *m_controlsPack;$/;"	m	class:ModelerUserInterface
m_controlsScroll	modelerui.h	/^  Fl_Scroll *m_controlsScroll;$/;"	m	class:ModelerUserInterface
m_controlsWindow	modelerui.h	/^  Fl_Double_Window *m_controlsWindow;$/;"	m	class:ModelerUserInterface
m_drawAxes	ModelerView.h	/^	bool m_drawAxes;$/;"	m	class:ModelerView
m_drawSkeleton	ModelerView.h	/^	bool m_drawSkeleton;		\/\/ if false, the mesh is drawn instead.$/;"	m	class:ModelerView
m_elements	./vecmath/include/Matrix2f.h	/^	float m_elements[ 4 ];$/;"	m	class:Matrix2f
m_elements	./vecmath/include/Matrix3f.h	/^	float m_elements[ 9 ];$/;"	m	class:Matrix3f
m_elements	./vecmath/include/Matrix4f.h	/^	float m_elements[ 16 ];$/;"	m	class:Matrix4f
m_elements	./vecmath/include/Quat4f.h	/^	float m_elements[ 4 ];$/;"	m	class:Quat4f
m_elements	./vecmath/include/Vector2f.h	/^	float m_elements[2];$/;"	m	class:Vector2f
m_elements	./vecmath/include/Vector3f.h	/^	float m_elements[ 3 ];$/;"	m	class:Vector3f
m_elements	./vecmath/include/Vector4f.h	/^	float m_elements[ 4 ];$/;"	m	class:Vector4f
m_instance	modelerapp.cpp	/^ModelerApplication *ModelerApplication::m_instance = NULL;$/;"	m	class:ModelerApplication	file:
m_instance	modelerapp.h	/^    static ModelerApplication *m_instance;$/;"	m	class:ModelerApplication
m_joints	SkeletalModel.h	/^	std::vector< Joint* > m_joints;$/;"	m	class:SkeletalModel
m_matrices	MatrixStack.h	/^	std::vector< Matrix4f > m_matrices;$/;"	m	class:MatrixStack
m_matrixStack	SkeletalModel.h	/^	MatrixStack m_matrixStack;$/;"	m	class:SkeletalModel
m_maximum	modelerapp.h	/^    float m_maximum;$/;"	m	struct:ModelerControl
m_mesh	SkeletalModel.h	/^	Mesh m_mesh;$/;"	m	class:SkeletalModel
m_minimum	modelerapp.h	/^    float m_minimum;$/;"	m	struct:ModelerControl
m_modelerView	modelerui.h	/^  ModelerView *m_modelerView;$/;"	m	class:ModelerUserInterface
m_modelerWindow	modelerui.h	/^  Fl_Double_Window *m_modelerWindow;$/;"	m	class:ModelerUserInterface
m_name	modelerapp.h	/^    char m_name[128];$/;"	m	struct:ModelerControl
m_numControls	modelerapp.h	/^    int m_numControls;$/;"	m	class:ModelerApplication
m_rootJoint	SkeletalModel.h	/^	Joint* m_rootJoint;$/;"	m	class:SkeletalModel
m_stepsize	modelerapp.h	/^    float m_stepsize;$/;"	m	struct:ModelerControl
m_ui	modelerapp.h	/^    ModelerUserInterface * m_ui;$/;"	m	class:ModelerApplication
m_value	modelerapp.h	/^    float m_value;$/;"	m	struct:ModelerControl
main	main.cpp	/^int main( int argc, char* argv[] )$/;"	f
make_visible	/usr/include/FL/Fl_Browser.H	/^  void make_visible(int n) {$/;"	f	class:Fl_Browser
manage_favorites_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *manage_favorites_label; $/;"	m	class:Fl_File_Chooser
manage_favorites_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *manage_favorites_label; $/;"	m	class:Fl_File_Chooser
mark	/usr/include/FL/Fl_Input_.H	/^  int mark() const {return mark_;}$/;"	f	class:Fl_Input_
mark	/usr/include/FL/Fl_Input_.H	/^  int mark(int m) {return position(position(), m);}$/;"	f	class:Fl_Input_
mark_	/usr/include/FL/Fl_Input_.H	/^  int mark_;$/;"	m	class:Fl_Input_
mask	/usr/include/FL/Fl_Image.H	/^  unsigned mask; \/\/ for internal use (mask bitmap)$/;"	m	class:Fl_RGB_Image
mask	/usr/include/FL/Fl_Image.H	/^  void *mask; \/\/ for internal use (mask bitmap)$/;"	m	class:Fl_RGB_Image
mask	/usr/include/FL/Fl_Pixmap.H	/^  unsigned mask; \/\/ for internal use (mask bitmap)$/;"	m	class:Fl_Pixmap
mask	/usr/include/FL/Fl_Pixmap.H	/^  void *mask; \/\/ for internal use (mask bitmap)$/;"	m	class:Fl_Pixmap
max	/usr/include/FL/Fl_Chart.H	/^    double min,max;$/;"	m	class:Fl_Chart
max	/usr/include/FL/Fl_Valuator.H	/^  double min, max; \/\/ truncates to this range *after* rounding$/;"	m	class:Fl_Valuator
max_	/usr/include/FL/Fl_Help_Dialog.H	/^  int max_; $/;"	m	class:Fl_Help_Dialog
max_width	/usr/include/FL/Fl_Browser_.H	/^  int max_width;	\/\/ widest object seen so far$/;"	m	class:Fl_Browser_
max_width_item	/usr/include/FL/Fl_Browser_.H	/^  void* max_width_item;	\/\/ which item has max_width_$/;"	m	class:Fl_Browser_
maxh	/usr/include/FL/Fl_Window.H	/^  short minw, minh, maxw, maxh;$/;"	m	class:Fl_Window
maximum	/usr/include/FL/Fl_Progress.H	/^  float	maximum() const { return (maximum_); }$/;"	f	class:Fl_Progress
maximum	/usr/include/FL/Fl_Progress.H	/^  void	maximum(float v) { maximum_ = v; redraw(); }$/;"	f	class:Fl_Progress
maximum	/usr/include/FL/Fl_Spinner.H	/^  double	maximum() const { return (maximum_); }$/;"	f	class:Fl_Spinner
maximum	/usr/include/FL/Fl_Spinner.H	/^  void		maximum(double m) { maximum_ = m; }$/;"	f	class:Fl_Spinner
maximum	/usr/include/FL/Fl_Valuator.H	/^  double maximum() const {return max;}$/;"	f	class:Fl_Valuator
maximum	/usr/include/FL/Fl_Valuator.H	/^  void maximum(double a) {max = a;}$/;"	f	class:Fl_Valuator
maximum_	/usr/include/FL/Fl_Progress.H	/^	maximum_;$/;"	m	class:Fl_Progress
maximum_	/usr/include/FL/Fl_Spinner.H	/^  double	maximum_;		\/\/ Maximum value$/;"	m	class:Fl_Spinner
maximum_size	/usr/include/FL/Fl_Input_.H	/^  int maximum_size() const {return maximum_size_;}$/;"	f	class:Fl_Input_
maximum_size	/usr/include/FL/Fl_Input_.H	/^  void maximum_size(int m) {maximum_size_ = m;}$/;"	f	class:Fl_Input_
maximum_size_	/usr/include/FL/Fl_Input_.H	/^  int maximum_size_;$/;"	m	class:Fl_Input_
maxinum	/usr/include/FL/Fl_Spinner.H	/^  double	maxinum() const { return (maximum_); }$/;"	f	class:Fl_Spinner
maxnumb	/usr/include/FL/Fl_Chart.H	/^    int maxnumb;$/;"	m	class:Fl_Chart
maxsize	/usr/include/FL/Fl_Chart.H	/^    int maxsize() const {return maxnumb;}$/;"	f	class:Fl_Chart
maxw	/usr/include/FL/Fl_Window.H	/^  short minw, minh, maxw, maxh;$/;"	m	class:Fl_Window
measure_label	/usr/include/FL/Fl_Widget.H	/^  void measure_label(int& xx, int& yy) {label_.measure(xx,yy);}$/;"	f	class:Fl_Widget
menu	/usr/include/FL/Fl_Input_Choice.H	/^  const Fl_Menu_Item *menu() {$/;"	f	class:Fl_Input_Choice
menu	/usr/include/FL/Fl_Input_Choice.H	/^  void menu(const Fl_Menu_Item *m) {$/;"	f	class:Fl_Input_Choice
menu	/usr/include/FL/Fl_Menu_.H	/^  const Fl_Menu_Item *menu() const {return menu_;}$/;"	f	class:Fl_Menu_
menu	/usr/include/FL/glut.H	/^  int menu[3];$/;"	m	class:Fl_Glut_Window
menu_	/usr/include/FL/Fl_Input_Choice.H	/^  InputMenuButton *menu_;$/;"	m	class:Fl_Input_Choice
menu_	/usr/include/FL/Fl_Menu_.H	/^  Fl_Menu_Item *menu_;$/;"	m	class:Fl_Menu_
menu_cb	/usr/include/FL/Fl_Input_Choice.H	/^  static void menu_cb(Fl_Widget*, void *data) { $/;"	f	class:Fl_Input_Choice
menu_h	/usr/include/FL/Fl_Input_Choice.H	/^  inline int menu_h() { return(h() - Fl::box_dh(box())); }$/;"	f	class:Fl_Input_Choice
menu_m_controlsMenuBar	modelerui.cpp	/^Fl_Menu_Item ModelerUserInterface::menu_m_controlsMenuBar[] = {$/;"	m	class:ModelerUserInterface	file:
menu_m_controlsMenuBar	modelerui.h	/^  static Fl_Menu_Item menu_m_controlsMenuBar[];$/;"	m	class:ModelerUserInterface
menu_w	/usr/include/FL/Fl_Input_Choice.H	/^  inline int menu_w() { return(20); }$/;"	f	class:Fl_Input_Choice
menu_x	/usr/include/FL/Fl_Input_Choice.H	/^  inline int menu_x() { return(x() + w() - 20 - Fl::box_dx(box())); }$/;"	f	class:Fl_Input_Choice
menu_y	/usr/include/FL/Fl_Input_Choice.H	/^  inline int menu_y() { return(y() + Fl::box_dy(box())); }$/;"	f	class:Fl_Input_Choice
menubutton	/usr/include/FL/Fl_Input_Choice.H	/^  Fl_Menu_Button *menubutton() { return menu_; }$/;"	f	class:Fl_Input_Choice
middleline	/usr/include/FL/Fl_Browser.H	/^  void middleline(int l) { lineposition(l, MIDDLE); }$/;"	f	class:Fl_Browser
min	/usr/include/FL/Fl_Chart.H	/^    double min,max;$/;"	m	class:Fl_Chart
min	/usr/include/FL/Fl_Valuator.H	/^  double min, max; \/\/ truncates to this range *after* rounding$/;"	m	class:Fl_Valuator
minh	/usr/include/FL/Fl_Window.H	/^  short minw, minh, maxw, maxh;$/;"	m	class:Fl_Window
minimum	/usr/include/FL/Fl_Progress.H	/^  float	minimum() const { return (minimum_); }$/;"	f	class:Fl_Progress
minimum	/usr/include/FL/Fl_Progress.H	/^  void	minimum(float v) { minimum_ = v; redraw(); }$/;"	f	class:Fl_Progress
minimum	/usr/include/FL/Fl_Spinner.H	/^  double	minimum() const { return (minimum_); }$/;"	f	class:Fl_Spinner
minimum	/usr/include/FL/Fl_Spinner.H	/^  void		minimum(double m) { minimum_ = m; }$/;"	f	class:Fl_Spinner
minimum	/usr/include/FL/Fl_Valuator.H	/^  double minimum() const {return min;}$/;"	f	class:Fl_Valuator
minimum	/usr/include/FL/Fl_Valuator.H	/^  void minimum(double a) {min = a;}$/;"	f	class:Fl_Valuator
minimum_	/usr/include/FL/Fl_Progress.H	/^	minimum_,$/;"	m	class:Fl_Progress
minimum_	/usr/include/FL/Fl_Spinner.H	/^  double	minimum_;		\/\/ Minimum value$/;"	m	class:Fl_Spinner
mininum	/usr/include/FL/Fl_Spinner.H	/^  double	mininum() const { return (minimum_); }$/;"	f	class:Fl_Spinner
minute	/usr/include/FL/Fl_Clock.H	/^  int minute() const {return minute_;}$/;"	f	class:Fl_Clock_Output
minute_	/usr/include/FL/Fl_Clock.H	/^  int hour_, minute_, second_;$/;"	m	class:Fl_Clock_Output
minw	/usr/include/FL/Fl_Window.H	/^  short minw, minh, maxw, maxh;$/;"	m	class:Fl_Window
modal	/usr/include/FL/Fl.H	/^  static Fl_Window* modal() {return modal_;}$/;"	f	class:Fl
modal	/usr/include/FL/Fl_Window.H	/^  int modal() const	{return flags() & FL_MODAL;}$/;"	f	class:Fl_Window
modal_	/usr/include/FL/Fl.H	/^  static Fl_Window* modal_;$/;"	m	class:Fl
mode	/usr/include/FL/Fl_Color_Chooser.H	/^  int mode() {return choice.value();}$/;"	f	class:Fl_Color_Chooser
mode	/usr/include/FL/Fl_Gl_Window.H	/^  Fl_Mode mode() const {return (Fl_Mode)mode_;}$/;"	f	class:Fl_Gl_Window
mode	/usr/include/FL/Fl_Gl_Window.H	/^  int mode(const int *a) {return mode(0, a);}$/;"	f	class:Fl_Gl_Window
mode	/usr/include/FL/Fl_Gl_Window.H	/^  int mode(int a) {return mode(a,0);}$/;"	f	class:Fl_Gl_Window
mode	/usr/include/FL/Fl_Menu_.H	/^  int  mode(int i) const {return menu_[i].flags;}$/;"	f	class:Fl_Menu_
mode	/usr/include/FL/Fl_Menu_.H	/^  void mode(int i,int fl) {menu_[i].flags = fl;}$/;"	f	class:Fl_Menu_
mode_	/usr/include/FL/Fl_Gl_Window.H	/^  int mode_;$/;"	m	class:Fl_Gl_Window
model	ModelerView.h	/^	SkeletalModel model;$/;"	m	class:ModelerView
modelerui_h	modelerui.h	4;"	d
motion	/usr/include/FL/glut.H	/^  void (*motion)(int x, int y);$/;"	m	class:Fl_Glut_Window
mouse	/usr/include/FL/glut.H	/^  void (*mouse)(int b, int state, int x, int y);$/;"	m	class:Fl_Glut_Window
mouse_down	/usr/include/FL/glut.H	/^  int mouse_down;$/;"	m	class:Fl_Glut_Window
mouse_x	/usr/include/FL/Fl_Help_View.H	/^  static int    mouse_x;$/;"	m	class:Fl_Help_View
mouse_y	/usr/include/FL/Fl_Help_View.H	/^  static int    mouse_y;$/;"	m	class:Fl_Help_View
mouseobj	/usr/include/FL/Fl_Counter.H	/^  uchar mouseobj;$/;"	m	class:Fl_Counter
mu_p	/usr/include/FL/Fl_Input_.H	/^  int mu_p;$/;"	m	class:Fl_Input_
multmatrix	/usr/include/FL/gl2opengl.h	/^inline void multmatrix(Matrix m) {glMultMatrixf((float *)m);}$/;"	f
mvalue	/usr/include/FL/Fl_Menu_.H	/^  const Fl_Menu_Item *mvalue() const {return value_;}$/;"	f	class:Fl_Menu_
nEntry	/usr/include/FL/Fl_Preferences.H	/^    int nEntry, NEntry;$/;"	m	class:Fl_Preferences::Node
name	/usr/include/FL/Fl_Help_View.H	/^		name[32];	\/\/ Link target (blank if none)$/;"	m	struct:Fl_Help_Link
name	/usr/include/FL/Fl_Help_View.H	/^  char		name[32];	\/\/ Target name$/;"	m	struct:Fl_Help_Target
name	/usr/include/FL/Fl_Preferences.H	/^    char *name, *value;$/;"	m	struct:Fl_Preferences::Entry
name	/usr/include/FL/Fl_Shared_Image.H	/^  const char	*name() { return name_; }$/;"	f	class:Fl_Shared_Image
nameBuffer	/usr/include/FL/Fl_Preferences.H	/^  static char nameBuffer[128];$/;"	m	class:Fl_Preferences
name_	/usr/include/FL/Fl_Shared_Image.H	/^  const char	*name_;			\/\/ Name of image file$/;"	m	class:Fl_Shared_Image
nblocks_	/usr/include/FL/Fl_Help_View.H	/^  int		nblocks_,		\/\/ Number of blocks\/paragraphs$/;"	m	class:Fl_Help_View
nchecked	/usr/include/FL/Fl_Check_Browser.H	/^  int nchecked() const { return nchecked_; }$/;"	f	class:Fl_Check_Browser
nchecked_	/usr/include/FL/Fl_Check_Browser.H	/^  int nchecked_;$/;"	m	class:Fl_Check_Browser
negate	./vecmath/src/Vector2f.cpp	/^void Vector2f::negate()$/;"	f	class:Vector2f
negate	./vecmath/src/Vector3f.cpp	/^void Vector3f::negate()$/;"	f	class:Vector3f
negate	./vecmath/src/Vector4f.cpp	/^void Vector4f::negate()$/;"	f	class:Vector4f
newButton	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Button *newButton;$/;"	m	class:Fl_File_Chooser
newButton	/usr/include/FL/fl_file_chooser.H	/^  Fl_Button *newButton;$/;"	m	class:Fl_File_Chooser
new_directory_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *new_directory_label; $/;"	m	class:Fl_File_Chooser
new_directory_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *new_directory_label; $/;"	m	class:Fl_File_Chooser
new_directory_tooltip	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *new_directory_tooltip; $/;"	m	class:Fl_File_Chooser
new_directory_tooltip	/usr/include/FL/fl_file_chooser.H	/^  static const char *new_directory_tooltip; $/;"	m	class:Fl_File_Chooser
next	/usr/include/FL/Fl_Check_Browser.H	/^	  cb_item *next;$/;"	m	struct:Fl_Check_Browser::cb_item
next	/usr/include/FL/Fl_File_Icon.H	/^  Fl_File_Icon	*next() { return (next_); }$/;"	f	class:Fl_File_Icon
next	/usr/include/FL/Fl_Menu_Item.H	/^  Fl_Menu_Item *next(int i=1) {$/;"	f	struct:Fl_Menu_Item
next	/usr/include/FL/Fl_Text_Editor.H	/^      Key_Binding* next;$/;"	m	struct:Fl_Text_Editor::Key_Binding
next	/usr/include/FL/mac.H	/^  Fl_X *next;              \/\/ linked tree to support subwindows$/;"	m	class:Fl_X
next	/usr/include/FL/win32.H	/^  Fl_X *next;$/;"	m	class:Fl_X
next	/usr/include/FL/x.H	/^  Fl_X *next;$/;"	m	class:Fl_X
next_	/usr/include/FL/Fl_File_Icon.H	/^  Fl_File_Icon	*next_;		\/\/ Pointer to next icon\/filetype$/;"	m	class:Fl_File_Icon
next_	/usr/include/FL/Fl_Preferences.H	/^    Node *child_, *next_, *parent_;$/;"	m	class:Fl_Preferences::Node
nfonts_	/usr/include/FL/Fl_Help_View.H	/^  int		nfonts_;		\/\/ Number of fonts in stack$/;"	m	class:Fl_Help_View
nitems	/usr/include/FL/Fl_Check_Browser.H	/^  int nitems() const { return nitems_; }$/;"	f	class:Fl_Check_Browser
nitems_	/usr/include/FL/Fl_Check_Browser.H	/^  int nitems_;$/;"	m	class:Fl_Check_Browser
nlinks_	/usr/include/FL/Fl_Help_View.H	/^  int		nlinks_,		\/\/ Number of links$/;"	m	class:Fl_Help_View
node	/usr/include/FL/Fl_Preferences.H	/^  Node *node;$/;"	m	class:Fl_Preferences
non_modal	/usr/include/FL/Fl_Window.H	/^  int non_modal() const {return flags() & (FL_NON_MODAL|FL_MODAL);}$/;"	f	class:Fl_Window
normal	./vecmath/src/Vector2f.cpp	/^Vector2f Vector2f::normal() const$/;"	f	class:Vector2f
normalize	./vecmath/src/Quat4f.cpp	/^void Quat4f::normalize()$/;"	f	class:Quat4f
normalize	./vecmath/src/Vector2f.cpp	/^void Vector2f::normalize()$/;"	f	class:Vector2f
normalize	./vecmath/src/Vector3f.cpp	/^void Vector3f::normalize()$/;"	f	class:Vector3f
normalize	./vecmath/src/Vector4f.cpp	/^void Vector4f::normalize()$/;"	f	class:Vector4f
normalized	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::normalized() const$/;"	f	class:Quat4f
normalized	./vecmath/src/Vector2f.cpp	/^Vector2f Vector2f::normalized() const$/;"	f	class:Vector2f
normalized	./vecmath/src/Vector3f.cpp	/^Vector3f Vector3f::normalized() const$/;"	f	class:Vector3f
normalized	./vecmath/src/Vector4f.cpp	/^Vector4f Vector4f::normalized() const$/;"	f	class:Vector4f
ntargets_	/usr/include/FL/Fl_Help_View.H	/^  int		ntargets_,		\/\/ Number of targets$/;"	m	class:Fl_Help_View
null_substitution_character	/usr/include/FL/Fl_Text_Buffer.H	/^    char null_substitution_character() { return mNullSubsChar; }$/;"	f	class:Fl_Text_Buffer
num_data_	/usr/include/FL/Fl_File_Icon.H	/^  int		num_data_;	\/\/ Number of data elements$/;"	m	class:Fl_File_Icon
num_handlers_	/usr/include/FL/Fl_Shared_Image.H	/^  static int	num_handlers_;		\/\/ Number of format handlers$/;"	m	class:Fl_Shared_Image
num_images_	/usr/include/FL/Fl_Shared_Image.H	/^  static int	num_images_;		\/\/ Number of shared images$/;"	m	class:Fl_Shared_Image
numb	/usr/include/FL/Fl_Chart.H	/^    int numb;$/;"	m	class:Fl_Chart
number	/usr/include/FL/glut.H	/^  int number;$/;"	m	class:Fl_Glut_Window
numericsort	/usr/include/FL/filename.H	148;"	d
offset_	/usr/include/FL/Fl_Browser_.H	/^  int offset_;		\/\/ how far down top_ item the real_position is$/;"	m	class:Fl_Browser_
okButton	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Return_Button *okButton;$/;"	m	class:Fl_File_Chooser
okButton	/usr/include/FL/fl_file_chooser.H	/^  Fl_Return_Button *okButton;$/;"	m	class:Fl_File_Chooser
ok_entry_	/usr/include/FL/Fl_File_Input.H	/^  char		ok_entry_;$/;"	m	class:Fl_File_Input
oldval	/usr/include/FL/Fl_Button.H	/^  char oldval;$/;"	m	class:Fl_Button
oldx	/usr/include/FL/Fl_Scroll.H	/^  int oldx, oldy;$/;"	m	class:Fl_Scroll
oldy	/usr/include/FL/Fl_Scroll.H	/^  int oldx, oldy;$/;"	m	class:Fl_Scroll
on	/usr/include/FL/Fl_Timer.H	/^  char on, direction_;$/;"	m	class:Fl_Timer
ones	./vecmath/src/Matrix2f.cpp	/^Matrix2f Matrix2f::ones()$/;"	f	class:Matrix2f
ones	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::ones()$/;"	f	class:Matrix3f
ones	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::ones()$/;"	f	class:Matrix4f
operator !=	./vecmath/src/Vector2f.cpp	/^bool operator != ( const Vector2f& v0, const Vector2f& v1 )$/;"	f
operator !=	./vecmath/src/Vector3f.cpp	/^bool operator != ( const Vector3f& v0, const Vector3f& v1 )$/;"	f
operator !=	./vecmath/src/Vector4f.cpp	/^bool operator != ( const Vector4f& v0, const Vector4f& v1 )$/;"	f
operator !=	/usr/include/FL/x.H	/^  bool operator!=(const Fl_XFont_On_Demand& x) { return ptr != x.ptr; }$/;"	f	class:Fl_XFont_On_Demand
operator ()	./vecmath/src/Matrix2f.cpp	/^const float& Matrix2f::operator () ( int i, int j ) const$/;"	f	class:Matrix2f
operator ()	./vecmath/src/Matrix2f.cpp	/^float& Matrix2f::operator () ( int i, int j )$/;"	f	class:Matrix2f
operator ()	./vecmath/src/Matrix3f.cpp	/^const float& Matrix3f::operator () ( int i, int j ) const$/;"	f	class:Matrix3f
operator ()	./vecmath/src/Matrix3f.cpp	/^float& Matrix3f::operator () ( int i, int j )$/;"	f	class:Matrix3f
operator ()	./vecmath/src/Matrix4f.cpp	/^const float& Matrix4f::operator () ( int i, int j ) const$/;"	f	class:Matrix4f
operator ()	./vecmath/src/Matrix4f.cpp	/^float& Matrix4f::operator () ( int i, int j )$/;"	f	class:Matrix4f
operator *	./vecmath/src/Matrix2f.cpp	/^Matrix2f operator * ( const Matrix2f& m, float f )$/;"	f
operator *	./vecmath/src/Matrix2f.cpp	/^Matrix2f operator * ( const Matrix2f& x, const Matrix2f& y )$/;"	f
operator *	./vecmath/src/Matrix2f.cpp	/^Matrix2f operator * ( float f, const Matrix2f& m )$/;"	f
operator *	./vecmath/src/Matrix2f.cpp	/^Vector2f operator * ( const Matrix2f& m, const Vector2f& v )$/;"	f
operator *	./vecmath/src/Matrix3f.cpp	/^Matrix3f operator * ( const Matrix3f& x, const Matrix3f& y )$/;"	f
operator *	./vecmath/src/Matrix3f.cpp	/^Vector3f operator * ( const Matrix3f& m, const Vector3f& v )$/;"	f
operator *	./vecmath/src/Matrix4f.cpp	/^Matrix4f operator * ( const Matrix4f& x, const Matrix4f& y )$/;"	f
operator *	./vecmath/src/Matrix4f.cpp	/^Vector4f operator * ( const Matrix4f& m, const Vector4f& v )$/;"	f
operator *	./vecmath/src/Quat4f.cpp	/^Quat4f operator * ( const Quat4f& q, float f )$/;"	f
operator *	./vecmath/src/Quat4f.cpp	/^Quat4f operator * ( const Quat4f& q0, const Quat4f& q1 )$/;"	f
operator *	./vecmath/src/Quat4f.cpp	/^Quat4f operator * ( float f, const Quat4f& q )$/;"	f
operator *	./vecmath/src/Vector2f.cpp	/^Vector2f operator * ( const Vector2f& v, float f )$/;"	f
operator *	./vecmath/src/Vector2f.cpp	/^Vector2f operator * ( const Vector2f& v0, const Vector2f& v1 )$/;"	f
operator *	./vecmath/src/Vector2f.cpp	/^Vector2f operator * ( float f, const Vector2f& v )$/;"	f
operator *	./vecmath/src/Vector3f.cpp	/^Vector3f operator * ( const Vector3f& v, float f )$/;"	f
operator *	./vecmath/src/Vector3f.cpp	/^Vector3f operator * ( const Vector3f& v0, const Vector3f& v1 )$/;"	f
operator *	./vecmath/src/Vector3f.cpp	/^Vector3f operator * ( float f, const Vector3f& v )$/;"	f
operator *	./vecmath/src/Vector4f.cpp	/^Vector4f operator * ( const Vector4f& v, float f )$/;"	f
operator *	./vecmath/src/Vector4f.cpp	/^Vector4f operator * ( const Vector4f& v0, const Vector4f& v1 )$/;"	f
operator *	./vecmath/src/Vector4f.cpp	/^Vector4f operator * ( float f, const Vector4f& v )$/;"	f
operator *	/usr/include/FL/x.H	/^  XFontStruct& operator*() { return *value(); }$/;"	f	class:Fl_XFont_On_Demand
operator *=	./vecmath/src/Vector2f.cpp	/^Vector2f& Vector2f::operator *= ( float f )$/;"	f	class:Vector2f
operator *=	./vecmath/src/Vector3f.cpp	/^Vector3f& Vector3f::operator *= ( float f )$/;"	f	class:Vector3f
operator +	./vecmath/src/Quat4f.cpp	/^Quat4f operator + ( const Quat4f& q0, const Quat4f& q1 )$/;"	f
operator +	./vecmath/src/Vector2f.cpp	/^Vector2f operator + ( const Vector2f& v0, const Vector2f& v1 )$/;"	f
operator +	./vecmath/src/Vector3f.cpp	/^Vector3f operator + ( const Vector3f& v0, const Vector3f& v1 )$/;"	f
operator +	./vecmath/src/Vector4f.cpp	/^Vector4f operator + ( const Vector4f& v0, const Vector4f& v1 )$/;"	f
operator +=	./vecmath/src/Vector2f.cpp	/^Vector2f& Vector2f::operator += ( const Vector2f& v )$/;"	f	class:Vector2f
operator +=	./vecmath/src/Vector3f.cpp	/^Vector3f& Vector3f::operator += ( const Vector3f& v )$/;"	f	class:Vector3f
operator -	./vecmath/src/Quat4f.cpp	/^Quat4f operator - ( const Quat4f& q0, const Quat4f& q1 )$/;"	f
operator -	./vecmath/src/Vector2f.cpp	/^Vector2f operator - ( const Vector2f& v )$/;"	f
operator -	./vecmath/src/Vector2f.cpp	/^Vector2f operator - ( const Vector2f& v0, const Vector2f& v1 )$/;"	f
operator -	./vecmath/src/Vector3f.cpp	/^Vector3f operator - ( const Vector3f& v )$/;"	f
operator -	./vecmath/src/Vector3f.cpp	/^Vector3f operator - ( const Vector3f& v0, const Vector3f& v1 )$/;"	f
operator -	./vecmath/src/Vector4f.cpp	/^Vector4f operator - ( const Vector4f& v )$/;"	f
operator -	./vecmath/src/Vector4f.cpp	/^Vector4f operator - ( const Vector4f& v0, const Vector4f& v1 )$/;"	f
operator -=	./vecmath/src/Vector2f.cpp	/^Vector2f& Vector2f::operator -= ( const Vector2f& v )$/;"	f	class:Vector2f
operator -=	./vecmath/src/Vector3f.cpp	/^Vector3f& Vector3f::operator -= ( const Vector3f& v )$/;"	f	class:Vector3f
operator ->	/usr/include/FL/x.H	/^  XFontStruct* operator->() { return value(); }$/;"	f	class:Fl_XFont_On_Demand
operator /	./vecmath/src/Vector2f.cpp	/^Vector2f operator \/ ( const Vector2f& v, float f )$/;"	f
operator /	./vecmath/src/Vector2f.cpp	/^Vector2f operator \/ ( const Vector2f& v0, const Vector2f& v1 )$/;"	f
operator /	./vecmath/src/Vector3f.cpp	/^Vector3f operator \/ ( const Vector3f& v, float f )$/;"	f
operator /	./vecmath/src/Vector3f.cpp	/^Vector3f operator \/ ( const Vector3f& v0, const Vector3f& v1 )$/;"	f
operator /	./vecmath/src/Vector4f.cpp	/^Vector4f operator \/ ( const Vector4f& v, float f )$/;"	f
operator /	./vecmath/src/Vector4f.cpp	/^Vector4f operator \/ ( const Vector4f& v0, const Vector4f& v1 )$/;"	f
operator /=	./vecmath/src/Matrix4f.cpp	/^Matrix4f& Matrix4f::operator\/=(float d)$/;"	f	class:Matrix4f
operator <<	tuple.h	/^std::ostream& operator<<(std::ostream &out, const tuple<TYPE,SIZE> x)$/;"	f
operator =	./vecmath/src/Matrix2f.cpp	/^Matrix2f& Matrix2f::operator = ( const Matrix2f& rm )$/;"	f	class:Matrix2f
operator =	./vecmath/src/Matrix3f.cpp	/^Matrix3f& Matrix3f::operator = ( const Matrix3f& rm )$/;"	f	class:Matrix3f
operator =	./vecmath/src/Matrix4f.cpp	/^Matrix4f& Matrix4f::operator = ( const Matrix4f& rm )$/;"	f	class:Matrix4f
operator =	./vecmath/src/Quat4f.cpp	/^Quat4f& Quat4f::operator = ( const Quat4f& rq )$/;"	f	class:Quat4f
operator =	./vecmath/src/Vector2f.cpp	/^Vector2f& Vector2f::operator = ( const Vector2f& rv )$/;"	f	class:Vector2f
operator =	./vecmath/src/Vector3f.cpp	/^Vector3f& Vector3f::operator = ( const Vector3f& rv )$/;"	f	class:Vector3f
operator =	./vecmath/src/Vector4f.cpp	/^Vector4f& Vector4f::operator = ( const Vector4f& rv )$/;"	f	class:Vector4f
operator =	/usr/include/FL/x.H	/^  Fl_XFont_On_Demand& operator=(XFontStruct* p)$/;"	f	class:Fl_XFont_On_Demand
operator =	/usr/include/FL/x.H	/^  Fl_XFont_On_Demand& operator=(const Fl_XFont_On_Demand& x)$/;"	f	class:Fl_XFont_On_Demand
operator =	modelerapp.cpp	/^ModelerControl & ModelerControl::operator=(const ModelerControl & o)$/;"	f	class:ModelerControl
operator =	tuple.h	/^    tuple& operator=(const TYPE array[SIZE]) {$/;"	f	class:tuple
operator =	tuple.h	/^    tuple& operator=(const tuple& other) {$/;"	f	class:tuple
operator ==	./vecmath/src/Vector2f.cpp	/^bool operator == ( const Vector2f& v0, const Vector2f& v1 )$/;"	f
operator ==	./vecmath/src/Vector3f.cpp	/^bool operator == ( const Vector3f& v0, const Vector3f& v1 )$/;"	f
operator ==	./vecmath/src/Vector4f.cpp	/^bool operator == ( const Vector4f& v0, const Vector4f& v1 )$/;"	f
operator ==	/usr/include/FL/x.H	/^  bool operator==(const Fl_XFont_On_Demand& x) { return ptr == x.ptr; }$/;"	f	class:Fl_XFont_On_Demand
operator XFontStruct*	/usr/include/FL/x.H	/^  operator XFontStruct*() { return value(); }$/;"	f	class:Fl_XFont_On_Demand
operator []	./vecmath/src/Quat4f.cpp	/^const float& Quat4f::operator [] ( int i ) const$/;"	f	class:Quat4f
operator []	./vecmath/src/Quat4f.cpp	/^float& Quat4f::operator [] ( int i )$/;"	f	class:Quat4f
operator []	./vecmath/src/Vector2f.cpp	/^const float& Vector2f::operator [] ( int i ) const$/;"	f	class:Vector2f
operator []	./vecmath/src/Vector2f.cpp	/^float& Vector2f::operator [] ( int i )$/;"	f	class:Vector2f
operator []	./vecmath/src/Vector3f.cpp	/^const float& Vector3f::operator [] ( int i ) const$/;"	f	class:Vector3f
operator []	./vecmath/src/Vector3f.cpp	/^float& Vector3f::operator [] ( int i )$/;"	f	class:Vector3f
operator []	./vecmath/src/Vector4f.cpp	/^const float& Vector4f::operator [] ( int i ) const$/;"	f	class:Vector4f
operator []	./vecmath/src/Vector4f.cpp	/^float& Vector4f::operator [] ( int i )$/;"	f	class:Vector4f
operator []	tuple.h	/^    inline TYPE& operator[](unsigned i) {$/;"	f	class:tuple
operator []	tuple.h	/^    inline const TYPE& operator[](unsigned i) const {$/;"	f	class:tuple
operator const char *	/usr/include/FL/Fl_Preferences.H	/^    operator const char *() { return data_; }$/;"	f	class:Fl_Preferences::Name
operator const float*	./vecmath/src/Matrix4f.cpp	/^Matrix4f::operator const float* ()const$/;"	f	class:Matrix4f
operator const float*	./vecmath/src/Vector2f.cpp	/^Vector2f::operator const float* () const$/;"	f	class:Vector2f
operator const float*	./vecmath/src/Vector3f.cpp	/^Vector3f::operator const float* () const$/;"	f	class:Vector3f
operator const float*	./vecmath/src/Vector4f.cpp	/^Vector4f::operator const float* () const$/;"	f	class:Vector4f
operator float*	./vecmath/src/Matrix2f.cpp	/^Matrix2f::operator float* ()$/;"	f	class:Matrix2f
operator float*	./vecmath/src/Matrix3f.cpp	/^Matrix3f::operator float* ()$/;"	f	class:Matrix3f
operator float*	./vecmath/src/Matrix4f.cpp	/^Matrix4f::operator float* ()$/;"	f	class:Matrix4f
operator float*	./vecmath/src/Vector2f.cpp	/^Vector2f::operator float* ()$/;"	f	class:Vector2f
operator float*	./vecmath/src/Vector3f.cpp	/^Vector3f::operator float* ()$/;"	f	class:Vector3f
operator float*	./vecmath/src/Vector4f.cpp	/^Vector4f::operator float* ()$/;"	f	class:Vector4f
original_	/usr/include/FL/Fl_Shared_Image.H	/^  int		original_;		\/\/ Original image?$/;"	m	class:Fl_Shared_Image
orthographicProjection	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::orthographicProjection( float left, float right, float bottom, float top, float zNear, float zFar, bool directX )$/;"	f	class:Matrix4f
orthographicProjection	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::orthographicProjection( float width, float height, float zNear, float zFar, bool directX )$/;"	f	class:Matrix4f
other_xid	/usr/include/FL/mac.H	/^  GWorldPtr other_xid;     \/\/ pointer for offscreen bitmaps (doublebuffer)$/;"	m	class:Fl_X
other_xid	/usr/include/FL/win32.H	/^  HBITMAP other_xid; \/\/ for double-buffered windows$/;"	m	class:Fl_X
other_xid	/usr/include/FL/x.H	/^  Window other_xid;$/;"	m	class:Fl_X
output	/usr/include/FL/Fl_Widget.H	/^  int output() const {return (flags_&OUTPUT);}$/;"	f	class:Fl_Widget
overlay	/usr/include/FL/Fl_Gl_Window.H	/^  void *overlay;$/;"	m	class:Fl_Gl_Window
overlay	/usr/include/FL/Fl_Menu_Window.H	/^  int overlay() {return !(flags()&NO_OVERLAY);}$/;"	f	class:Fl_Menu_Window
overlay_	/usr/include/FL/Fl_Overlay_Window.H	/^  Fl_Window *overlay_;$/;"	m	class:Fl_Overlay_Window
overlaydisplay	/usr/include/FL/glut.H	/^  void (*overlaydisplay)();$/;"	m	class:Fl_Glut_Window
override	/usr/include/FL/Fl_Window.H	/^  int override() const  { return flags()&FL_OVERRIDE; }$/;"	f	class:Fl_Window
parent	/usr/include/FL/Fl_Preferences.H	/^    Node *parent() { return parent_; }$/;"	f	class:Fl_Preferences::Node
parent	/usr/include/FL/Fl_Widget.H	/^  Fl_Group* parent() const {return parent_;}$/;"	f	class:Fl_Widget
parent	/usr/include/FL/Fl_Widget.H	/^  void parent(Fl_Group* p) {parent_ = p;} \/\/ for hacks only, Fl_Group::add()$/;"	f	class:Fl_Widget
parent_	/usr/include/FL/Fl_Preferences.H	/^    Node *child_, *next_, *parent_;$/;"	m	class:Fl_Preferences::Node
parent_	/usr/include/FL/Fl_Widget.H	/^  Fl_Group* parent_;$/;"	m	class:Fl_Widget
passivemotion	/usr/include/FL/glut.H	/^  void (*passivemotion)(int x, int y);$/;"	m	class:Fl_Glut_Window
path_	/usr/include/FL/Fl_Preferences.H	/^    char *path_;$/;"	m	class:Fl_Preferences::Node
pattern	/usr/include/FL/Fl_File_Icon.H	/^  const char	*pattern() { return (pattern_); }$/;"	f	class:Fl_File_Icon
pattern_	/usr/include/FL/Fl_File_Browser.H	/^  const char	*pattern_;$/;"	m	class:Fl_File_Browser
pattern_	/usr/include/FL/Fl_File_Chooser.H	/^  char pattern_[1024]; $/;"	m	class:Fl_File_Chooser
pattern_	/usr/include/FL/Fl_File_Icon.H	/^  const char	*pattern_;	\/\/ Pattern string$/;"	m	class:Fl_File_Icon
pattern_	/usr/include/FL/fl_file_chooser.H	/^  char pattern_[1024]; $/;"	m	class:Fl_File_Chooser
pen	/usr/include/FL/mac.H	/^  ulong pen;$/;"	m	struct:Fl_XMap
pen	/usr/include/FL/win32.H	/^  HPEN pen;	\/\/ pen, 0 if none created yet$/;"	m	struct:Fl_XMap
perspectiveProjection	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::perspectiveProjection( float fLeft, float fRight,$/;"	f	class:Matrix4f
perspectiveProjection	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::perspectiveProjection( float fovYRadians, float aspect, float zNear, float zFar, bool directX )$/;"	f	class:Matrix4f
pop	MatrixStack.cpp	/^void MatrixStack::pop()$/;"	f	class:MatrixStack
popfont	/usr/include/FL/Fl_Help_View.H	/^  void		popfont(uchar &f, uchar &s) { if (nfonts_ > 0) nfonts_ --;$/;"	f	class:Fl_Help_View
popmatrix	/usr/include/FL/gl2opengl.h	/^inline void popmatrix() {glPopMatrix();}$/;"	f
position	/usr/include/FL/Fl_Browser_.H	/^  int position() const {return position_;}$/;"	f	class:Fl_Browser_
position	/usr/include/FL/Fl_Input_.H	/^  int position() const {return position_;}$/;"	f	class:Fl_Input_
position	/usr/include/FL/Fl_Input_.H	/^  int position(int p) {return position(p, p);}$/;"	f	class:Fl_Input_
position	/usr/include/FL/Fl_Widget.H	/^  void position(int X,int Y) {resize(X,Y,w_,h_);}$/;"	f	class:Fl_Widget
position_	/usr/include/FL/Fl_Browser_.H	/^  int position_;	\/\/ where user wants it scrolled to$/;"	m	class:Fl_Browser_
position_	/usr/include/FL/Fl_Input_.H	/^  int position_;$/;"	m	class:Fl_Input_
prefs_	/usr/include/FL/Fl_File_Chooser.H	/^  static Fl_Preferences prefs_; $/;"	m	class:Fl_File_Chooser
prefs_	/usr/include/FL/Fl_Preferences.H	/^    Fl_Preferences *prefs_;$/;"	m	class:Fl_Preferences::RootNode
prefs_	/usr/include/FL/fl_file_chooser.H	/^  static Fl_Preferences prefs_; $/;"	m	class:Fl_File_Chooser
pressed_	/usr/include/FL/Fl_File_Input.H	/^  short		pressed_;$/;"	m	class:Fl_File_Input
prev	/usr/include/FL/Fl_Check_Browser.H	/^	  cb_item *prev;$/;"	m	struct:Fl_Check_Browser::cb_item
preview	/usr/include/FL/Fl_File_Chooser.H	/^  int preview() const { return previewButton->value(); }; $/;"	f	class:Fl_File_Chooser
preview	/usr/include/FL/fl_file_chooser.H	/^  int preview() const { return previewButton->value(); }; $/;"	f	class:Fl_File_Chooser
previewBox	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Box *previewBox;$/;"	m	class:Fl_File_Chooser
previewBox	/usr/include/FL/fl_file_chooser.H	/^  Fl_Box *previewBox;$/;"	m	class:Fl_File_Chooser
previewButton	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Check_Button *previewButton;$/;"	m	class:Fl_File_Chooser
previewButton	/usr/include/FL/fl_file_chooser.H	/^  Fl_Check_Button *previewButton;$/;"	m	class:Fl_File_Chooser
preview_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *preview_label; $/;"	m	class:Fl_File_Chooser
preview_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *preview_label; $/;"	m	class:Fl_File_Chooser
preview_text_	/usr/include/FL/Fl_File_Chooser.H	/^  char preview_text_[2048]; $/;"	m	class:Fl_File_Chooser
preview_text_	/usr/include/FL/fl_file_chooser.H	/^  char preview_text_[2048]; $/;"	m	class:Fl_File_Chooser
previous_value	/usr/include/FL/Fl_Valuator.H	/^  double previous_value() const {return previous_value_;}$/;"	f	class:Fl_Valuator
previous_value_	/usr/include/FL/Fl_Valuator.H	/^  double previous_value_;$/;"	m	class:Fl_Valuator
primary_selection	/usr/include/FL/Fl_Text_Buffer.H	/^    Fl_Text_Selection* primary_selection() { return &mPrimary; }$/;"	f	class:Fl_Text_Buffer
print	./vecmath/src/Matrix2f.cpp	/^void Matrix2f::print()$/;"	f	class:Matrix2f
print	./vecmath/src/Matrix3f.cpp	/^void Matrix3f::print()$/;"	f	class:Matrix3f
print	./vecmath/src/Matrix4f.cpp	/^void Matrix4f::print()$/;"	f	class:Matrix4f
print	./vecmath/src/Quat4f.cpp	/^void Quat4f::print()$/;"	f	class:Quat4f
print	./vecmath/src/Vector2f.cpp	/^void Vector2f::print() const$/;"	f	class:Vector2f
print	./vecmath/src/Vector3f.cpp	/^void Vector3f::print() const$/;"	f	class:Vector3f
print	./vecmath/src/Vector4f.cpp	/^void Vector4f::print() const$/;"	f	class:Vector4f
private_dc	/usr/include/FL/win32.H	/^  HDC private_dc; \/\/ used for OpenGL$/;"	m	class:Fl_X
projectionMatrix	camera.cpp	/^Matrix4f Camera::projectionMatrix() const$/;"	f	class:Camera
ptr	/usr/include/FL/x.H	/^  XFontStruct* ptr;$/;"	m	class:Fl_XFont_On_Demand
push	/usr/include/FL/Fl_Tabs.H	/^  Fl_Widget *push() const {return push_;}$/;"	f	class:Fl_Tabs
push	MatrixStack.cpp	/^void MatrixStack::push( const Matrix4f& m )$/;"	f	class:MatrixStack
push_	/usr/include/FL/Fl_Tabs.H	/^  Fl_Widget *push_;$/;"	m	class:Fl_Tabs
pushed	/usr/include/FL/Fl.H	/^  static Fl_Widget* pushed()	{return pushed_;}$/;"	f	class:Fl
pushed_	/usr/include/FL/Fl.H	/^  static Fl_Widget* pushed_;$/;"	m	class:Fl
pushed_	/usr/include/FL/Fl_Scrollbar.H	/^  int pushed_;$/;"	m	class:Fl_Scrollbar
pushfont	/usr/include/FL/Fl_Help_View.H	/^  void		pushfont(uchar f, uchar s) { if (nfonts_ < 99) nfonts_ ++;$/;"	f	class:Fl_Help_View
pushmatrix	/usr/include/FL/gl2opengl.h	/^inline void pushmatrix() {glPushMatrix();}$/;"	f
px	/usr/include/FL/Fl_Color_Chooser.H	/^  int px, py;$/;"	m	class:Flcc_HueBox
py	/usr/include/FL/Fl_Color_Chooser.H	/^  int px, py;$/;"	m	class:Flcc_HueBox
py	/usr/include/FL/Fl_Color_Chooser.H	/^  int py;$/;"	m	class:Flcc_ValueBox
r	/usr/include/FL/Fl_Color_Chooser.H	/^  double r() const {return r_;}$/;"	f	class:Fl_Color_Chooser
r_	/usr/include/FL/Fl_Color_Chooser.H	/^  double r_, g_, b_;$/;"	m	class:Fl_Color_Chooser
radio	/usr/include/FL/Fl_Menu_Item.H	/^  int radio() const {return flags&FL_MENU_RADIO;}$/;"	f	struct:Fl_Menu_Item
randomRotation	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::randomRotation( float u0, float u1, float u2 )$/;"	f	class:Matrix4f
randomRotation	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::randomRotation( float u0, float u1, float u2 )$/;"	f	class:Quat4f
range	/usr/include/FL/Fl_Spinner.H	/^  void		range(double a, double b) { minimum_ = a; maximum_ = b; }$/;"	f	class:Fl_Spinner
range	/usr/include/FL/Fl_Valuator.H	/^  void range(double a, double b) {min = a; max = b;}$/;"	f	class:Fl_Valuator
readBMP	bitmap.cpp	/^unsigned char *readBMP(char *fname, int &width, int &height)$/;"	f
readonly	/usr/include/FL/Fl_Input_.H	/^  int readonly() const { return type() & FL_INPUT_READONLY; }$/;"	f	class:Fl_Input_
readonly	/usr/include/FL/Fl_Input_.H	/^  void readonly(int b) { if (b) type((uchar)(type() | FL_INPUT_READONLY));$/;"	f	class:Fl_Input_
real_hposition_	/usr/include/FL/Fl_Browser_.H	/^  int real_hposition_;	\/\/ the current horizontal scrolling position$/;"	m	class:Fl_Browser_
real_position_	/usr/include/FL/Fl_Browser_.H	/^  int real_position_;	\/\/ the current vertical scrolling position$/;"	m	class:Fl_Browser_
rect	/usr/include/FL/gl2opengl.h	/^inline void rect(int x,int y,int r,int t) {gl_rect(x,y,r-x,t-y);}$/;"	f
rect_end	/usr/include/FL/Fl_Text_Buffer.H	/^    int rect_end() { return mRectEnd; }$/;"	f	class:Fl_Text_Selection
rect_start	/usr/include/FL/Fl_Text_Buffer.H	/^    int rect_start() { return mRectStart; }$/;"	f	class:Fl_Text_Selection
rectangular	/usr/include/FL/Fl_Text_Buffer.H	/^    char rectangular() { return mRectangular; }$/;"	f	class:Fl_Text_Selection
rectf	/usr/include/FL/gl2opengl.h	/^inline void rectf(int x,int y,int r,int t) {glRectf(x,y,r+1,t+1);}$/;"	f
rectfi	/usr/include/FL/gl2opengl.h	/^inline void rectfi(int x,int y,int r,int t) {glRecti(x,y,r+1,t+1);}$/;"	f
rectfs	/usr/include/FL/gl2opengl.h	/^inline void rectfs(int x,int y,int r,int t) {glRects(x,y,r+1,t+1);}$/;"	f
recti	/usr/include/FL/gl2opengl.h	/^inline void recti(int x,int y,int r,int t) {gl_rect(x,y,r-x,t-y);}$/;"	f
rects	/usr/include/FL/gl2opengl.h	/^inline void rects(int x,int y,int r,int t) {gl_rect(x,y,r-x,t-y);}$/;"	f
redraw1	/usr/include/FL/Fl_Browser_.H	/^  void *redraw1,*redraw2; \/\/ minimal update pointers$/;"	m	class:Fl_Browser_
redraw2	/usr/include/FL/Fl_Browser_.H	/^  void *redraw1,*redraw2; \/\/ minimal update pointers$/;"	m	class:Fl_Browser_
redraw_lines	/usr/include/FL/Fl_Browser_.H	/^  void redraw_lines() {damage(FL_DAMAGE_SCROLL);} \/\/ redraw all of them$/;"	f	class:Fl_Browser_
refcount	/usr/include/FL/Fl_Shared_Image.H	/^  int		refcount() { return refcount_; }$/;"	f	class:Fl_Shared_Image
refcount_	/usr/include/FL/Fl_Shared_Image.H	/^  int		refcount_;		\/\/ Number of times this image has been used$/;"	m	class:Fl_Shared_Image
region	/usr/include/FL/mac.H	/^  Fl_Region region;$/;"	m	class:Fl_X
region	/usr/include/FL/win32.H	/^  Fl_Region region;$/;"	m	class:Fl_X
region	/usr/include/FL/x.H	/^  Fl_Region region;$/;"	m	class:Fl_X
release	/usr/include/FL/Fl.H	/^  static void release() {grab(0);}$/;"	f	class:Fl
remove	/usr/include/FL/Fl_Group.H	/^  void remove(Fl_Widget* o) {remove(*o);}$/;"	f	class:Fl_Group
remove_all_key_bindings	/usr/include/FL/Fl_Text_Editor.H	/^    void remove_all_key_bindings() { remove_all_key_bindings(&key_bindings); }$/;"	f	class:Fl_Text_Editor
remove_key_binding	/usr/include/FL/Fl_Text_Editor.H	/^    void remove_key_binding(int key, int state)$/;"	f	class:Fl_Text_Editor
replace	/usr/include/FL/Fl_Browser.H	/^  void replace(int a, const char* b) {text(a, b);}$/;"	f	class:Fl_Browser
reshape	/usr/include/FL/glut.H	/^  void (*reshape)(int w, int h);$/;"	m	class:Fl_Glut_Window
resizable	/usr/include/FL/Fl_Group.H	/^  Fl_Widget* resizable() const {return resizable_;}$/;"	f	class:Fl_Group
resizable	/usr/include/FL/Fl_Group.H	/^  void resizable(Fl_Widget& o) {resizable_ = &o;}$/;"	f	class:Fl_Group
resizable	/usr/include/FL/Fl_Group.H	/^  void resizable(Fl_Widget* o) {resizable_ = o;}$/;"	f	class:Fl_Group
resizable_	/usr/include/FL/Fl_Group.H	/^  Fl_Widget* resizable_;$/;"	m	class:Fl_Group
resize	/usr/include/FL/Fl_Input_Choice.H	/^  void resize(int X, int Y, int W, int H) {$/;"	f	class:Fl_Input_Choice
resize	/usr/include/FL/Fl_Spinner.H	/^  void		resize(int X, int Y, int W, int H) {$/;"	f	class:Fl_Spinner
resize_box	/usr/include/FL/Fl_Color_Chooser.H	/^  Fl_Box resize_box;$/;"	m	class:Fl_Color_Chooser
resizebox	/usr/include/FL/forms.H	275;"	d
rgb	/usr/include/FL/mac.H	/^  RGBColor rgb;$/;"	m	struct:Fl_XMap
rgb	/usr/include/FL/win32.H	/^  COLORREF rgb;	\/\/ this should be the type the RGB() macro returns$/;"	m	struct:Fl_XMap
rint	/usr/include/FL/math.h	/^inline double rint(double v) {return floor(v+.5);}$/;"	f
rootNode	/usr/include/FL/Fl_Preferences.H	/^  RootNode *rootNode;$/;"	m	class:Fl_Preferences
rotateX	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::rotateX( float radians )$/;"	f	class:Matrix3f
rotateX	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::rotateX( float radians )$/;"	f	class:Matrix4f
rotateY	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::rotateY( float radians )$/;"	f	class:Matrix3f
rotateY	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::rotateY( float radians )$/;"	f	class:Matrix4f
rotateZ	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::rotateZ( float radians )$/;"	f	class:Matrix3f
rotateZ	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::rotateZ( float radians )$/;"	f	class:Matrix4f
rotation	./vecmath/src/Matrix2f.cpp	/^Matrix2f Matrix2f::rotation( float degrees )$/;"	f	class:Matrix2f
rotation	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::rotation( const Quat4f& rq )$/;"	f	class:Matrix3f
rotation	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::rotation( const Vector3f& rDirection, float radians )$/;"	f	class:Matrix3f
rotation	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::rotation( const Quat4f& q )$/;"	f	class:Matrix4f
rotation	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::rotation( const Vector3f& rDirection, float radians )$/;"	f	class:Matrix4f
rvalue	/usr/include/FL/Fl_Color_Chooser.H	/^  Flcc_Value_Input rvalue;$/;"	m	class:Fl_Color_Chooser
saturation	/usr/include/FL/Fl_Color_Chooser.H	/^  double saturation() const {return saturation_;}$/;"	f	class:Fl_Color_Chooser
saturation_	/usr/include/FL/Fl_Color_Chooser.H	/^  double hue_, saturation_, value_;$/;"	m	class:Fl_Color_Chooser
save_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *save_label; $/;"	m	class:Fl_File_Chooser
save_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *save_label; $/;"	m	class:Fl_File_Chooser
saved_hdc	/usr/include/FL/win32.H	/^  HDC saved_hdc;  \/\/ saves the handle of the DC currently loaded$/;"	m	class:Fl_X
savedfocus_	/usr/include/FL/Fl_Group.H	/^  Fl_Widget* savedfocus_;$/;"	m	class:Fl_Group
savefile	/usr/include/FL/Fl_Text_Buffer.H	/^    int savefile(const char *file, int buflen = 128*1024)$/;"	f	class:Fl_Text_Buffer
sb_cb	/usr/include/FL/Fl_Spinner.H	/^  static void	sb_cb(Fl_Widget *w, Fl_Spinner *sb) {$/;"	f	class:Fl_Spinner
scaling	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::scaling( float sx, float sy, float sz )$/;"	f	class:Matrix3f
scaling	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::scaling( float sx, float sy, float sz )$/;"	f	class:Matrix4f
scheme	/usr/include/FL/Fl.H	/^  static const char* scheme() {return scheme_;}$/;"	f	class:Fl
scheme_	/usr/include/FL/Fl.H	/^  static const char* scheme_;$/;"	m	class:Fl
scheme_bg_	/usr/include/FL/Fl.H	/^  static Fl_Image* scheme_bg_;$/;"	m	class:Fl
screen_xywh	/usr/include/FL/Fl.H	/^  static void screen_xywh(int &X, int &Y, int &W, int &H) {$/;"	f	class:Fl
scrollbar	/usr/include/FL/Fl_Browser_.H	/^  Fl_Scrollbar scrollbar;		\/\/ Vertical scrollbar$/;"	m	class:Fl_Browser_
scrollbar	/usr/include/FL/Fl_Scroll.H	/^  Fl_Scrollbar scrollbar;$/;"	m	class:Fl_Scroll
scrollbar_	/usr/include/FL/Fl_Help_View.H	/^  Fl_Scrollbar	scrollbar_,		\/\/ Vertical scrollbar for document$/;"	m	class:Fl_Help_View
scrollbar_align	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Align scrollbar_align() { return scrollbar_align_; }$/;"	f	class:Fl_Text_Display
scrollbar_align	/usr/include/FL/Fl_Text_Display.H	/^    void scrollbar_align(Fl_Align a) { scrollbar_align_ = a; }$/;"	f	class:Fl_Text_Display
scrollbar_align_	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Align scrollbar_align_;$/;"	m	class:Fl_Text_Display
scrollbar_left	/usr/include/FL/Fl_Browser_.H	/^  void scrollbar_left() {scrollbar.align(FL_ALIGN_LEFT);}$/;"	f	class:Fl_Browser_
scrollbar_right	/usr/include/FL/Fl_Browser_.H	/^  void scrollbar_right() {scrollbar.align(FL_ALIGN_RIGHT);}$/;"	f	class:Fl_Browser_
scrollbar_width	/usr/include/FL/Fl_Browser_.H	/^  static int scrollbar_width() {return scrollbar_width_;}$/;"	f	class:Fl_Browser_
scrollbar_width	/usr/include/FL/Fl_Browser_.H	/^  static void scrollbar_width(int b) {scrollbar_width_ = b;}$/;"	f	class:Fl_Browser_
scrollbar_width	/usr/include/FL/Fl_Text_Display.H	/^    int scrollbar_width() { return scrollbar_width_; }$/;"	f	class:Fl_Text_Display
scrollbar_width	/usr/include/FL/Fl_Text_Display.H	/^    void scrollbar_width(int W) { scrollbar_width_ = W; }$/;"	f	class:Fl_Text_Display
scrollbar_width_	/usr/include/FL/Fl_Browser_.H	/^  static int scrollbar_width_;$/;"	m	class:Fl_Browser_
scrollbar_width_	/usr/include/FL/Fl_Text_Display.H	/^    int scrollbar_width_;$/;"	m	class:Fl_Text_Display
second	/usr/include/FL/Fl_Clock.H	/^  int second() const {return second_;}$/;"	f	class:Fl_Clock_Output
second_	/usr/include/FL/Fl_Clock.H	/^  int hour_, minute_, second_;$/;"	m	class:Fl_Clock_Output
secondary_selected	/usr/include/FL/Fl_Text_Buffer.H	/^    int secondary_selected() { return mSecondary.selected(); }$/;"	f	class:Fl_Text_Buffer
secondary_selection	/usr/include/FL/Fl_Text_Buffer.H	/^    Fl_Text_Selection* secondary_selection() { return &mSecondary; }$/;"	f	class:Fl_Text_Buffer
selected	/usr/include/FL/Fl_Check_Browser.H	/^	  char selected;$/;"	m	struct:Fl_Check_Browser::cb_item
selected	/usr/include/FL/Fl_Help_View.H	/^  static int    selected;$/;"	m	class:Fl_Help_View
selected	/usr/include/FL/Fl_Text_Buffer.H	/^    char selected() { return mSelected; }$/;"	f	class:Fl_Text_Selection
selected	/usr/include/FL/Fl_Text_Buffer.H	/^    int selected() { return mPrimary.selected(); }$/;"	f	class:Fl_Text_Buffer
selected	/usr/include/FL/Fl_Text_Buffer.H	/^    void selected(char b) { mSelected = b; }$/;"	f	class:Fl_Text_Selection
selection	/usr/include/FL/Fl_Browser_.H	/^  void *selection() const {return selection_;}$/;"	f	class:Fl_Browser_
selection_	/usr/include/FL/Fl_Browser_.H	/^  void* selection_;	\/\/ which is selected (except for FL_MULTI_BROWSER)$/;"	m	class:Fl_Browser_
selection_color	/usr/include/FL/Fl_Widget.H	/^  Fl_Color selection_color() const {return (Fl_Color)color2_;}$/;"	f	class:Fl_Widget
selection_color	/usr/include/FL/Fl_Widget.H	/^  void selection_color(unsigned a) {color2_ = a;}$/;"	f	class:Fl_Widget
selection_drag_first	/usr/include/FL/Fl_Help_View.H	/^  static int    selection_drag_first;$/;"	m	class:Fl_Help_View
selection_drag_last	/usr/include/FL/Fl_Help_View.H	/^  static int    selection_drag_last;$/;"	m	class:Fl_Help_View
selection_first	/usr/include/FL/Fl_Help_View.H	/^  static int    selection_first;$/;"	m	class:Fl_Help_View
selection_last	/usr/include/FL/Fl_Help_View.H	/^  static int    selection_last;$/;"	m	class:Fl_Help_View
selection_owner	/usr/include/FL/Fl.H	/^  static Fl_Widget* selection_owner() {return selection_owner_;}$/;"	f	class:Fl
selection_owner_	/usr/include/FL/Fl.H	/^  static Fl_Widget* selection_owner_;$/;"	m	class:Fl
selection_push_first	/usr/include/FL/Fl_Help_View.H	/^  static int    selection_push_first;$/;"	m	class:Fl_Help_View
selection_push_last	/usr/include/FL/Fl_Help_View.H	/^  static int    selection_push_last;$/;"	m	class:Fl_Help_View
set	/usr/include/FL/Fl_Button.H	/^  int set() {return value(1);}$/;"	f	class:Fl_Button
set	/usr/include/FL/Fl_Menu_Item.H	/^  void set() {flags |= FL_MENU_VALUE;}$/;"	f	struct:Fl_Menu_Item
setAxisAngle	./vecmath/src/Quat4f.cpp	/^void Quat4f::setAxisAngle( float radians, const Vector3f& axis )$/;"	f	class:Quat4f
setCol	./vecmath/src/Matrix2f.cpp	/^void Matrix2f::setCol( int j, const Vector2f& v )$/;"	f	class:Matrix2f
setCol	./vecmath/src/Matrix3f.cpp	/^void Matrix3f::setCol( int j, const Vector3f& v )$/;"	f	class:Matrix3f
setCol	./vecmath/src/Matrix4f.cpp	/^void Matrix4f::setCol( int j, const Vector4f& v )$/;"	f	class:Matrix4f
setJointTransform	SkeletalModel.cpp	/^void SkeletalModel::setJointTransform(int jointIndex, float rX, float rY, float rZ)$/;"	f	class:SkeletalModel
setRow	./vecmath/src/Matrix2f.cpp	/^void Matrix2f::setRow( int i, const Vector2f& v )$/;"	f	class:Matrix2f
setRow	./vecmath/src/Matrix3f.cpp	/^void Matrix3f::setRow( int i, const Vector3f& v )$/;"	f	class:Matrix3f
setRow	./vecmath/src/Matrix4f.cpp	/^void Matrix4f::setRow( int i, const Vector4f& v )$/;"	f	class:Matrix4f
setSubmatrix2x2	./vecmath/src/Matrix3f.cpp	/^void Matrix3f::setSubmatrix2x2( int i0, int j0, const Matrix2f& m )$/;"	f	class:Matrix3f
setSubmatrix2x2	./vecmath/src/Matrix4f.cpp	/^void Matrix4f::setSubmatrix2x2( int i0, int j0, const Matrix2f& m )$/;"	f	class:Matrix4f
setSubmatrix3x3	./vecmath/src/Matrix4f.cpp	/^void Matrix4f::setSubmatrix3x3( int i0, int j0, const Matrix3f& m )$/;"	f	class:Matrix4f
set_abort	/usr/include/FL/Fl.H	/^  static void set_abort(void (*f)(const char*,...)) {fatal = f;}$/;"	f	class:Fl
set_atclose	/usr/include/FL/Fl.H	/^  static void set_atclose(void (*f)(Fl_Window*,void*)) {atclose = f;}$/;"	f	class:Fl
set_changed	/usr/include/FL/Fl_Input_Choice.H	/^  void set_changed() { $/;"	f	class:Fl_Input_Choice
set_changed	/usr/include/FL/Fl_Widget.H	/^  void set_changed() {flags_ |= CHANGED;}$/;"	f	class:Fl_Widget
set_checked	/usr/include/FL/Fl_Check_Browser.H	/^  void set_checked(int item) { checked(item, 1); }$/;"	f	class:Fl_Check_Browser
set_flag	/usr/include/FL/Fl_Widget.H	/^  void set_flag(int c) {flags_ |= c;}$/;"	f	class:Fl_Widget
set_idle	/usr/include/FL/Fl.H	/^  static void set_idle(void (*cb)()) {idle = cb;}$/;"	f	class:Fl
set_modal	/usr/include/FL/Fl_Window.H	/^  void set_modal()	{set_flag(FL_MODAL);}$/;"	f	class:Fl_Window
set_non_modal	/usr/include/FL/Fl_Window.H	/^  void set_non_modal()	{set_flag(FL_NON_MODAL);}$/;"	f	class:Fl_Window
set_output	/usr/include/FL/Fl_Widget.H	/^  void set_output() {flags_ |= OUTPUT;}$/;"	f	class:Fl_Widget
set_overlay	/usr/include/FL/Fl_Menu_Window.H	/^  void set_overlay() {clear_flag(NO_OVERLAY);}$/;"	f	class:Fl_Menu_Window
set_override	/usr/include/FL/Fl_Window.H	/^  void set_override()	{set_flag(FL_NOBORDER|FL_OVERRIDE);}$/;"	f	class:Fl_Window
set_value	/usr/include/FL/Fl_Valuator.H	/^  void set_value(double v) {value_ = v;}$/;"	f	class:Fl_Valuator
set_visible	/usr/include/FL/Fl_Widget.H	/^  void set_visible() {flags_ &= ~INVISIBLE;}$/;"	f	class:Fl_Widget
set_visible_focus	/usr/include/FL/Fl_Widget.H	/^  void set_visible_focus() { flags_ |= VISIBLE_FOCUS; }$/;"	f	class:Fl_Widget
setwindow	/usr/include/FL/win32.H	/^  void setwindow(Fl_Window* wi) {w=wi; wi->i=this;}$/;"	f	class:Fl_X
setwindow	/usr/include/FL/x.H	/^  void setwindow(Fl_Window* wi) {w=wi; wi->i=this;}$/;"	f	class:Fl_X
shortcut	/usr/include/FL/Fl_Button.H	/^  int shortcut() const {return shortcut_;}$/;"	f	class:Fl_Button
shortcut	/usr/include/FL/Fl_Button.H	/^  void shortcut(const char *s) {shortcut(fl_old_shortcut(s));}$/;"	f	class:Fl_Button
shortcut	/usr/include/FL/Fl_Button.H	/^  void shortcut(int s) {shortcut_ = s;}$/;"	f	class:Fl_Button
shortcut	/usr/include/FL/Fl_Menu_.H	/^  void shortcut(int i, int s) {menu_[i].shortcut(s);}$/;"	f	class:Fl_Menu_
shortcut	/usr/include/FL/Fl_Menu_Item.H	/^  int shortcut() const {return shortcut_;}$/;"	f	struct:Fl_Menu_Item
shortcut	/usr/include/FL/Fl_Menu_Item.H	/^  void shortcut(int s) {shortcut_ = s;}$/;"	f	struct:Fl_Menu_Item
shortcut_	/usr/include/FL/Fl_Button.H	/^  int shortcut_;$/;"	m	class:Fl_Button
shortcut_	/usr/include/FL/Fl_Menu_Item.H	/^  int shortcut_;$/;"	m	struct:Fl_Menu_Item
show	/usr/include/FL/Fl_Browser.H	/^  void show() {Fl_Widget::show();}$/;"	f	class:Fl_Browser
show	/usr/include/FL/Fl_Double_Window.H	/^  void show(int a, char **b) {Fl_Window::show(a,b);}$/;"	f	class:Fl_Double_Window
show	/usr/include/FL/Fl_Gl_Window.H	/^  void show(int a, char **b) {Fl_Window::show(a,b);}$/;"	f	class:Fl_Gl_Window
show	/usr/include/FL/Fl_Menu_Item.H	/^  void show() {flags &= ~FL_MENU_INVISIBLE;}$/;"	f	struct:Fl_Menu_Item
show	/usr/include/FL/Fl_Overlay_Window.H	/^  void show(int a, char **b) {Fl_Double_Window::show(a,b);}$/;"	f	class:Fl_Overlay_Window
show	/usr/include/FL/Fl_Single_Window.H	/^  void show(int a, char **b) {Fl_Window::show(a,b);}$/;"	f	class:Fl_Single_Window
show	modelerui.cpp	/^void ModelerUserInterface::show() {$/;"	f	class:ModelerUserInterface
showChoice	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Choice *showChoice;$/;"	m	class:Fl_File_Chooser
showChoice	/usr/include/FL/fl_file_chooser.H	/^  Fl_Choice *showChoice;$/;"	m	class:Fl_File_Chooser
show_label	/usr/include/FL/Fl_File_Chooser.H	/^  static const char *show_label; $/;"	m	class:Fl_File_Chooser
show_label	/usr/include/FL/fl_file_chooser.H	/^  static const char *show_label; $/;"	m	class:Fl_File_Chooser
shown	/usr/include/FL/Fl_Window.H	/^  int shown() {return i != 0;}$/;"	f	class:Fl_Window
size	/usr/include/FL/Fl_Browser.H	/^  int size() const {return lines;}$/;"	f	class:Fl_Browser
size	/usr/include/FL/Fl_Browser.H	/^  void size(int W, int H) { Fl_Widget::size(W, H); }$/;"	f	class:Fl_Browser
size	/usr/include/FL/Fl_Chart.H	/^    int size() const {return numb;}$/;"	f	class:Fl_Chart
size	/usr/include/FL/Fl_Chart.H	/^    void size(int W, int H) { Fl_Widget::size(W, H); }$/;"	f	class:Fl_Chart
size	/usr/include/FL/Fl_File_Icon.H	/^  int		size() { return (num_data_); }$/;"	f	class:Fl_File_Icon
size	/usr/include/FL/Fl_Help_View.H	/^  int		size() const { return (size_); }$/;"	f	class:Fl_Help_View
size	/usr/include/FL/Fl_Help_View.H	/^  void		size(int W, int H) { Fl_Widget::size(W, H); }$/;"	f	class:Fl_Help_View
size	/usr/include/FL/Fl_Input_.H	/^  int size() const {return size_;}$/;"	f	class:Fl_Input_
size	/usr/include/FL/Fl_Input_.H	/^  void size(int W, int H) { Fl_Widget::size(W, H); }$/;"	f	class:Fl_Input_
size	/usr/include/FL/Fl_Menu_.H	/^  void size(int W, int H) { Fl_Widget::size(W, H); }$/;"	f	class:Fl_Menu_
size	/usr/include/FL/Fl_Text_Display.H	/^      int	size;$/;"	m	struct:Fl_Text_Display::Style_Table_Entry
size	/usr/include/FL/Fl_Tooltip.H	/^  static int size() { return size_; }$/;"	f	class:Fl_Tooltip
size	/usr/include/FL/Fl_Tooltip.H	/^  static void size(int s) { size_ = s; }$/;"	f	class:Fl_Tooltip
size	/usr/include/FL/Fl_Widget.H	/^  uchar size;$/;"	m	struct:Fl_Label
size	/usr/include/FL/Fl_Widget.H	/^  void size(int W,int H) {resize(x_,y_,W,H);}$/;"	f	class:Fl_Widget
size	/usr/include/FL/glut.H	/^extern FL_EXPORT struct Fl_Glut_Bitmap_Font {uchar font; int size;}$/;"	m	struct:Fl_Glut_Bitmap_Font
size_	/usr/include/FL/Fl_Help_View.H	/^		size_,			\/\/ Total document length$/;"	m	class:Fl_Help_View
size_	/usr/include/FL/Fl_Input_.H	/^  int size_;$/;"	m	class:Fl_Input_
size_	/usr/include/FL/Fl_Tooltip.H	/^  static int size_;$/;"	m	class:Fl_Tooltip
size_range	/usr/include/FL/Fl_Window.H	/^  void size_range(int a, int b, int c=0, int d=0, int e=0, int f=0, int g=0) {$/;"	f	class:Fl_Window
size_range_set	/usr/include/FL/Fl_Window.H	/^  uchar dw, dh, aspect, size_range_set;$/;"	m	class:Fl_Window
sizenumb	/usr/include/FL/Fl_Chart.H	/^    int sizenumb;$/;"	m	class:Fl_Chart
sizes_	/usr/include/FL/Fl_Group.H	/^  short *sizes_; \/\/ remembered initial sizes of children$/;"	m	class:Fl_Group
slerp	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::slerp( const Quat4f& a, const Quat4f& b, float t, bool allowFlip )$/;"	f	class:Quat4f
slider	/usr/include/FL/Fl_Slider.H	/^  Fl_Boxtype slider() const {return (Fl_Boxtype)slider_;}$/;"	f	class:Fl_Slider
slider	/usr/include/FL/Fl_Slider.H	/^  void slider(Fl_Boxtype c) {slider_ = c;}$/;"	f	class:Fl_Slider
slider_	/usr/include/FL/Fl_Slider.H	/^  uchar slider_;$/;"	m	class:Fl_Slider
slider_size	/usr/include/FL/Fl_Slider.H	/^  float slider_size() const {return slider_size_;}$/;"	f	class:Fl_Slider
slider_size_	/usr/include/FL/Fl_Slider.H	/^  float slider_size_;$/;"	m	class:Fl_Slider
smaller_	/usr/include/FL/Fl_Help_Dialog.H	/^  Fl_Button *smaller_;$/;"	m	class:Fl_Help_Dialog
soft	/usr/include/FL/Fl_Adjuster.H	/^  int soft() const {return soft_;}$/;"	f	class:Fl_Adjuster
soft	/usr/include/FL/Fl_Adjuster.H	/^  void soft(int s) {soft_ = s;}$/;"	f	class:Fl_Adjuster
soft	/usr/include/FL/Fl_Value_Input.H	/^  char soft() const {return soft_;}$/;"	f	class:Fl_Value_Input
soft	/usr/include/FL/Fl_Value_Input.H	/^  void soft(char s) {soft_ = s;}$/;"	f	class:Fl_Value_Input
soft	/usr/include/FL/Fl_Value_Output.H	/^  uchar soft() const {return soft_;}$/;"	f	class:Fl_Value_Output
soft	/usr/include/FL/Fl_Value_Output.H	/^  void soft(uchar s) {soft_ = s;}$/;"	f	class:Fl_Value_Output
soft_	/usr/include/FL/Fl_Adjuster.H	/^  int soft_;$/;"	m	class:Fl_Adjuster
soft_	/usr/include/FL/Fl_Value_Input.H	/^  char soft_;$/;"	m	class:Fl_Value_Input
soft_	/usr/include/FL/Fl_Value_Output.H	/^  uchar textfont_, textsize_, soft_;$/;"	m	class:Fl_Value_Output
sort	/usr/include/FL/Fl_File_Chooser.H	/^  static Fl_File_Sort_F *sort; $/;"	m	class:Fl_File_Chooser
sort	/usr/include/FL/fl_file_chooser.H	/^  static Fl_File_Sort_F *sort; $/;"	m	class:Fl_File_Chooser
spacing	/usr/include/FL/Fl_Pack.H	/^  int spacing() const {return spacing_;}$/;"	f	class:Fl_Pack
spacing	/usr/include/FL/Fl_Pack.H	/^  void spacing(int i) {spacing_ = i;}$/;"	f	class:Fl_Pack
spacing_	/usr/include/FL/Fl_Pack.H	/^  int spacing_;$/;"	m	class:Fl_Pack
special	/usr/include/FL/glut.H	/^  void (*special)(int, int x, int y);$/;"	m	class:Fl_Glut_Window
squad	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::squad( const Quat4f& a, const Quat4f& tanA, const Quat4f& tanB, const Quat4f& b, float t )$/;"	f	class:Quat4f
squadTangent	./vecmath/src/Quat4f.cpp	/^Quat4f Quat4f::squadTangent( const Quat4f& before, const Quat4f& center, const Quat4f& after )$/;"	f	class:Quat4f
start	/usr/include/FL/Fl_Help_View.H	/^  const char	*start,		\/\/ Start of text$/;"	m	struct:Fl_Help_Block
start	/usr/include/FL/Fl_Text_Buffer.H	/^    int start() { return mStart; }$/;"	f	class:Fl_Text_Selection
state	/usr/include/FL/Fl_Text_Editor.H	/^      int          state;$/;"	m	struct:Fl_Text_Editor::Key_Binding
step	/usr/include/FL/Fl_Counter.H	/^  void step(double a) {Fl_Valuator::step(a);}$/;"	f	class:Fl_Counter
step	/usr/include/FL/Fl_Counter.H	/^  void step(double a,double b) {Fl_Valuator::step(a); lstep_ = b;}$/;"	f	class:Fl_Counter
step	/usr/include/FL/Fl_Spinner.H	/^  double	step() const { return (step_); }$/;"	f	class:Fl_Spinner
step	/usr/include/FL/Fl_Spinner.H	/^  void		step(double s) {$/;"	f	class:Fl_Spinner
step	/usr/include/FL/Fl_Valuator.H	/^  double step() const {return A\/B;}$/;"	f	class:Fl_Valuator
step	/usr/include/FL/Fl_Valuator.H	/^  void step(double a, int b) {A = a; B = b;}$/;"	f	class:Fl_Valuator
step	/usr/include/FL/Fl_Valuator.H	/^  void step(int a) {A = a; B = 1;}$/;"	f	class:Fl_Valuator
step_	/usr/include/FL/Fl_Spinner.H	/^  double	step_;			\/\/ Amount to add\/subtract for up\/down$/;"	m	class:Fl_Spinner
str	/usr/include/FL/Fl_Chart.H	/^   char str[FL_CHART_LABEL_MAX+1];$/;"	m	struct:FL_CHART_ENTRY
subRegion	/usr/include/FL/mac.H	/^  Fl_Region subRegion;     \/\/ region for this specific subwindow$/;"	m	class:Fl_X
submenu	/usr/include/FL/Fl_Menu_Item.H	/^  int submenu() const {return flags&(FL_SUBMENU|FL_SUBMENU_POINTER);}$/;"	f	struct:Fl_Menu_Item
suspended	/usr/include/FL/Fl_Timer.H	/^  char suspended() const {return !on;}$/;"	f	class:Fl_Timer
tab_distance	/usr/include/FL/Fl_Text_Buffer.H	/^    int tab_distance() { return mTabDist; }$/;"	f	class:Fl_Text_Buffer
takesevents	/usr/include/FL/Fl_Widget.H	/^  int takesevents() const {return !(flags_&(INACTIVE|INVISIBLE|OUTPUT));}$/;"	f	class:Fl_Widget
targets_	/usr/include/FL/Fl_Help_View.H	/^  Fl_Help_Target *targets_;		\/\/ Targets$/;"	m	class:Fl_Help_View
test_shortcut	/usr/include/FL/Fl_Menu_.H	/^  const Fl_Menu_Item* test_shortcut() {return picked(menu()->test_shortcut());}$/;"	f	class:Fl_Menu_
text	/usr/include/FL/Fl_Check_Browser.H	/^	  char *text;$/;"	m	struct:Fl_Check_Browser::cb_item
text	/usr/include/FL/Fl_Menu_.H	/^  const char *text() const {return value_ ? value_->text : 0;}$/;"	f	class:Fl_Menu_
text	/usr/include/FL/Fl_Menu_.H	/^  const char *text(int i) const {return menu_[i].text;}$/;"	f	class:Fl_Menu_
text	/usr/include/FL/Fl_Menu_Item.H	/^  const char *text;	\/\/ label()$/;"	m	struct:Fl_Menu_Item
text_area	/usr/include/FL/Fl_Text_Display.H	/^    struct { int x, y, w, h; } text_area;$/;"	m	class:Fl_Text_Display	typeref:struct:Fl_Text_Display::__anon24
textcolor	/usr/include/FL/Fl_Browser_.H	/^  Fl_Color textcolor() const {return (Fl_Color)textcolor_;}$/;"	f	class:Fl_Browser_
textcolor	/usr/include/FL/Fl_Browser_.H	/^  void textcolor(unsigned n) {textcolor_ = n;}$/;"	f	class:Fl_Browser_
textcolor	/usr/include/FL/Fl_Chart.H	/^    Fl_Color textcolor() const {return (Fl_Color)textcolor_;}$/;"	f	class:Fl_Chart
textcolor	/usr/include/FL/Fl_Chart.H	/^    void textcolor(unsigned n) {textcolor_ = n;}$/;"	f	class:Fl_Chart
textcolor	/usr/include/FL/Fl_Counter.H	/^  Fl_Color textcolor() const {return (Fl_Color)textcolor_;}$/;"	f	class:Fl_Counter
textcolor	/usr/include/FL/Fl_Counter.H	/^  void textcolor(unsigned s) {textcolor_ = s;}$/;"	f	class:Fl_Counter
textcolor	/usr/include/FL/Fl_Help_View.H	/^  Fl_Color	textcolor() const { return (defcolor_); }$/;"	f	class:Fl_Help_View
textcolor	/usr/include/FL/Fl_Help_View.H	/^  void		textcolor(Fl_Color c) { if (textcolor_ == defcolor_) textcolor_ = c; defcolor_ = c; }$/;"	f	class:Fl_Help_View
textcolor	/usr/include/FL/Fl_Input_.H	/^  Fl_Color textcolor() const {return (Fl_Color)textcolor_;}$/;"	f	class:Fl_Input_
textcolor	/usr/include/FL/Fl_Input_.H	/^  void textcolor(unsigned n) {textcolor_ = n;}$/;"	f	class:Fl_Input_
textcolor	/usr/include/FL/Fl_Input_Choice.H	/^  Fl_Color textcolor() const {$/;"	f	class:Fl_Input_Choice
textcolor	/usr/include/FL/Fl_Input_Choice.H	/^  void textcolor(Fl_Color c) {$/;"	f	class:Fl_Input_Choice
textcolor	/usr/include/FL/Fl_Menu_.H	/^  Fl_Color textcolor() const {return (Fl_Color)textcolor_;}$/;"	f	class:Fl_Menu_
textcolor	/usr/include/FL/Fl_Menu_.H	/^  void textcolor(unsigned c) {textcolor_=c;}$/;"	f	class:Fl_Menu_
textcolor	/usr/include/FL/Fl_Spinner.H	/^  Fl_Color	textcolor() const {$/;"	f	class:Fl_Spinner
textcolor	/usr/include/FL/Fl_Spinner.H	/^  void		textcolor(Fl_Color c) {$/;"	f	class:Fl_Spinner
textcolor	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Color textcolor() const {return (Fl_Color)textcolor_;}$/;"	f	class:Fl_Text_Display
textcolor	/usr/include/FL/Fl_Text_Display.H	/^    void textcolor(unsigned n) {textcolor_ = n;}$/;"	f	class:Fl_Text_Display
textcolor	/usr/include/FL/Fl_Tooltip.H	/^  static Fl_Color textcolor() { return (Fl_Color)textcolor_; }$/;"	f	class:Fl_Tooltip
textcolor	/usr/include/FL/Fl_Tooltip.H	/^  static void textcolor(unsigned c) { textcolor_ = c; }$/;"	f	class:Fl_Tooltip
textcolor	/usr/include/FL/Fl_Value_Input.H	/^  Fl_Color textcolor() const {return input.textcolor();}$/;"	f	class:Fl_Value_Input
textcolor	/usr/include/FL/Fl_Value_Input.H	/^  void textcolor(unsigned n) {input.textcolor(n);}$/;"	f	class:Fl_Value_Input
textcolor	/usr/include/FL/Fl_Value_Output.H	/^  Fl_Color textcolor() const {return (Fl_Color)textcolor_;}$/;"	f	class:Fl_Value_Output
textcolor	/usr/include/FL/Fl_Value_Output.H	/^  void textcolor(unsigned s) {textcolor_ = s;}$/;"	f	class:Fl_Value_Output
textcolor	/usr/include/FL/Fl_Value_Slider.H	/^    Fl_Color textcolor() const {return (Fl_Color)textcolor_;}$/;"	f	class:Fl_Value_Slider
textcolor	/usr/include/FL/Fl_Value_Slider.H	/^    void textcolor(unsigned s) {textcolor_ = s;}$/;"	f	class:Fl_Value_Slider
textcolor_	/usr/include/FL/Fl_Browser_.H	/^  unsigned textcolor_;$/;"	m	class:Fl_Browser_
textcolor_	/usr/include/FL/Fl_Chart.H	/^    unsigned textcolor_;$/;"	m	class:Fl_Chart
textcolor_	/usr/include/FL/Fl_Counter.H	/^  unsigned textcolor_;$/;"	m	class:Fl_Counter
textcolor_	/usr/include/FL/Fl_Help_View.H	/^		textcolor_,		\/\/ Text color$/;"	m	class:Fl_Help_View
textcolor_	/usr/include/FL/Fl_Input_.H	/^  unsigned textcolor_;$/;"	m	class:Fl_Input_
textcolor_	/usr/include/FL/Fl_Menu_.H	/^  unsigned textcolor_;$/;"	m	class:Fl_Menu_
textcolor_	/usr/include/FL/Fl_Text_Display.H	/^    unsigned textcolor_;$/;"	m	class:Fl_Text_Display
textcolor_	/usr/include/FL/Fl_Tooltip.H	/^  static unsigned textcolor_;$/;"	m	class:Fl_Tooltip
textcolor_	/usr/include/FL/Fl_Value_Output.H	/^  unsigned textcolor_;$/;"	m	class:Fl_Value_Output
textcolor_	/usr/include/FL/Fl_Value_Slider.H	/^    unsigned textcolor_;$/;"	m	class:Fl_Value_Slider
textfont	/usr/include/FL/Fl_Browser_.H	/^  Fl_Font textfont() const {return (Fl_Font)textfont_;}$/;"	f	class:Fl_Browser_
textfont	/usr/include/FL/Fl_Browser_.H	/^  void textfont(uchar s) {textfont_ = s;}$/;"	f	class:Fl_Browser_
textfont	/usr/include/FL/Fl_Chart.H	/^    Fl_Font textfont() const {return (Fl_Font)textfont_;}$/;"	f	class:Fl_Chart
textfont	/usr/include/FL/Fl_Chart.H	/^    void textfont(uchar s) {textfont_ = s;}$/;"	f	class:Fl_Chart
textfont	/usr/include/FL/Fl_Counter.H	/^  Fl_Font textfont() const {return (Fl_Font)textfont_;}$/;"	f	class:Fl_Counter
textfont	/usr/include/FL/Fl_Counter.H	/^  void textfont(uchar s) {textfont_ = s;}$/;"	f	class:Fl_Counter
textfont	/usr/include/FL/Fl_Help_View.H	/^  uchar		textfont() const { return (textfont_); }$/;"	f	class:Fl_Help_View
textfont	/usr/include/FL/Fl_Help_View.H	/^  void		textfont(uchar f) { textfont_ = f; format(); }$/;"	f	class:Fl_Help_View
textfont	/usr/include/FL/Fl_Input_.H	/^  Fl_Font textfont() const {return (Fl_Font)textfont_;}$/;"	f	class:Fl_Input_
textfont	/usr/include/FL/Fl_Input_.H	/^  void textfont(uchar s) {textfont_ = s;}$/;"	f	class:Fl_Input_
textfont	/usr/include/FL/Fl_Input_Choice.H	/^  uchar textfont() const {$/;"	f	class:Fl_Input_Choice
textfont	/usr/include/FL/Fl_Input_Choice.H	/^  void textfont(uchar f) {$/;"	f	class:Fl_Input_Choice
textfont	/usr/include/FL/Fl_Menu_.H	/^  Fl_Font textfont() const {return (Fl_Font)textfont_;}$/;"	f	class:Fl_Menu_
textfont	/usr/include/FL/Fl_Menu_.H	/^  void textfont(uchar c) {textfont_=c;}$/;"	f	class:Fl_Menu_
textfont	/usr/include/FL/Fl_Spinner.H	/^  uchar		textfont() const {$/;"	f	class:Fl_Spinner
textfont	/usr/include/FL/Fl_Spinner.H	/^  void		textfont(uchar f) {$/;"	f	class:Fl_Spinner
textfont	/usr/include/FL/Fl_Text_Display.H	/^    Fl_Font textfont() const {return (Fl_Font)textfont_;}$/;"	f	class:Fl_Text_Display
textfont	/usr/include/FL/Fl_Text_Display.H	/^    void textfont(uchar s) {textfont_ = s;}$/;"	f	class:Fl_Text_Display
textfont	/usr/include/FL/Fl_Value_Input.H	/^  Fl_Font textfont() const {return input.textfont();}$/;"	f	class:Fl_Value_Input
textfont	/usr/include/FL/Fl_Value_Input.H	/^  void textfont(uchar s) {input.textfont(s);}$/;"	f	class:Fl_Value_Input
textfont	/usr/include/FL/Fl_Value_Output.H	/^  Fl_Font textfont() const {return (Fl_Font)textfont_;}$/;"	f	class:Fl_Value_Output
textfont	/usr/include/FL/Fl_Value_Output.H	/^  void textfont(uchar s) {textfont_ = s;}$/;"	f	class:Fl_Value_Output
textfont	/usr/include/FL/Fl_Value_Slider.H	/^    Fl_Font textfont() const {return (Fl_Font)textfont_;}$/;"	f	class:Fl_Value_Slider
textfont	/usr/include/FL/Fl_Value_Slider.H	/^    void textfont(uchar s) {textfont_ = s;}$/;"	f	class:Fl_Value_Slider
textfont_	/usr/include/FL/Fl_Browser_.H	/^  uchar textfont_, textsize_;$/;"	m	class:Fl_Browser_
textfont_	/usr/include/FL/Fl_Chart.H	/^    uchar textfont_,textsize_;$/;"	m	class:Fl_Chart
textfont_	/usr/include/FL/Fl_Counter.H	/^  uchar textfont_, textsize_;$/;"	m	class:Fl_Counter
textfont_	/usr/include/FL/Fl_Help_View.H	/^  uchar		textfont_,		\/\/ Default font for text$/;"	m	class:Fl_Help_View
textfont_	/usr/include/FL/Fl_Input_.H	/^  uchar textfont_;$/;"	m	class:Fl_Input_
textfont_	/usr/include/FL/Fl_Menu_.H	/^  uchar textfont_;$/;"	m	class:Fl_Menu_
textfont_	/usr/include/FL/Fl_Text_Display.H	/^    uchar textfont_;$/;"	m	class:Fl_Text_Display
textfont_	/usr/include/FL/Fl_Value_Output.H	/^  uchar textfont_, textsize_, soft_;$/;"	m	class:Fl_Value_Output
textfont_	/usr/include/FL/Fl_Value_Slider.H	/^    uchar textfont_, textsize_;$/;"	m	class:Fl_Value_Slider
textsize	/usr/include/FL/Fl_Browser_.H	/^  uchar textsize() const {return textsize_;}$/;"	f	class:Fl_Browser_
textsize	/usr/include/FL/Fl_Browser_.H	/^  void textsize(uchar s) {textsize_ = s;}$/;"	f	class:Fl_Browser_
textsize	/usr/include/FL/Fl_Chart.H	/^    uchar textsize() const {return textsize_;}$/;"	f	class:Fl_Chart
textsize	/usr/include/FL/Fl_Chart.H	/^    void textsize(uchar s) {textsize_ = s;}$/;"	f	class:Fl_Chart
textsize	/usr/include/FL/Fl_Counter.H	/^  uchar textsize() const {return textsize_;}$/;"	f	class:Fl_Counter
textsize	/usr/include/FL/Fl_Counter.H	/^  void textsize(uchar s) {textsize_ = s;}$/;"	f	class:Fl_Counter
textsize	/usr/include/FL/Fl_File_Browser.H	/^  uchar		textsize() const { return (Fl_Browser::textsize()); };$/;"	f	class:Fl_File_Browser
textsize	/usr/include/FL/Fl_File_Browser.H	/^  void		textsize(uchar s) { Fl_Browser::textsize(s); iconsize_ = (uchar)(3 * s \/ 2); };$/;"	f	class:Fl_File_Browser
textsize	/usr/include/FL/Fl_Help_View.H	/^  uchar		textsize() const { return (textsize_); }$/;"	f	class:Fl_Help_View
textsize	/usr/include/FL/Fl_Help_View.H	/^  void		textsize(uchar s) { textsize_ = s; format(); }$/;"	f	class:Fl_Help_View
textsize	/usr/include/FL/Fl_Input_.H	/^  uchar textsize() const {return textsize_;}$/;"	f	class:Fl_Input_
textsize	/usr/include/FL/Fl_Input_.H	/^  void textsize(uchar s) {textsize_ = s;}$/;"	f	class:Fl_Input_
textsize	/usr/include/FL/Fl_Input_Choice.H	/^  uchar textsize() const {$/;"	f	class:Fl_Input_Choice
textsize	/usr/include/FL/Fl_Input_Choice.H	/^  void textsize(uchar s) {$/;"	f	class:Fl_Input_Choice
textsize	/usr/include/FL/Fl_Menu_.H	/^  uchar textsize() const {return textsize_;}$/;"	f	class:Fl_Menu_
textsize	/usr/include/FL/Fl_Menu_.H	/^  void textsize(uchar c) {textsize_=c;}$/;"	f	class:Fl_Menu_
textsize	/usr/include/FL/Fl_Spinner.H	/^  uchar		textsize() const {$/;"	f	class:Fl_Spinner
textsize	/usr/include/FL/Fl_Spinner.H	/^  void		textsize(uchar s) {$/;"	f	class:Fl_Spinner
textsize	/usr/include/FL/Fl_Text_Display.H	/^    uchar textsize() const {return textsize_;}$/;"	f	class:Fl_Text_Display
textsize	/usr/include/FL/Fl_Text_Display.H	/^    void textsize(uchar s) {textsize_ = s;}$/;"	f	class:Fl_Text_Display
textsize	/usr/include/FL/Fl_Value_Input.H	/^  uchar textsize() const {return input.textsize();}$/;"	f	class:Fl_Value_Input
textsize	/usr/include/FL/Fl_Value_Input.H	/^  void textsize(uchar s) {input.textsize(s);}$/;"	f	class:Fl_Value_Input
textsize	/usr/include/FL/Fl_Value_Output.H	/^  uchar textsize() const {return textsize_;}$/;"	f	class:Fl_Value_Output
textsize	/usr/include/FL/Fl_Value_Output.H	/^  void textsize(uchar s) {textsize_ = s;}$/;"	f	class:Fl_Value_Output
textsize	/usr/include/FL/Fl_Value_Slider.H	/^    uchar textsize() const {return textsize_;}$/;"	f	class:Fl_Value_Slider
textsize	/usr/include/FL/Fl_Value_Slider.H	/^    void textsize(uchar s) {textsize_ = s;}$/;"	f	class:Fl_Value_Slider
textsize_	/usr/include/FL/Fl_Browser_.H	/^  uchar textfont_, textsize_;$/;"	m	class:Fl_Browser_
textsize_	/usr/include/FL/Fl_Chart.H	/^    uchar textfont_,textsize_;$/;"	m	class:Fl_Chart
textsize_	/usr/include/FL/Fl_Counter.H	/^  uchar textfont_, textsize_;$/;"	m	class:Fl_Counter
textsize_	/usr/include/FL/Fl_Help_View.H	/^		textsize_;		\/\/ Default font size$/;"	m	class:Fl_Help_View
textsize_	/usr/include/FL/Fl_Input_.H	/^  uchar textsize_;$/;"	m	class:Fl_Input_
textsize_	/usr/include/FL/Fl_Menu_.H	/^  uchar textsize_;$/;"	m	class:Fl_Menu_
textsize_	/usr/include/FL/Fl_Text_Display.H	/^    uchar textsize_;$/;"	m	class:Fl_Text_Display
textsize_	/usr/include/FL/Fl_Value_Output.H	/^  uchar textfont_, textsize_, soft_;$/;"	m	class:Fl_Value_Output
textsize_	/usr/include/FL/Fl_Value_Slider.H	/^    uchar textfont_, textsize_;$/;"	m	class:Fl_Value_Slider
title	/usr/include/FL/Fl_Help_View.H	/^  const char	*title() { return (title_); }$/;"	f	class:Fl_Help_View
title_	/usr/include/FL/Fl_Help_View.H	/^  char		title_[1024];		\/\/ Title string$/;"	m	class:Fl_Help_View
tooltip	/usr/include/FL/Fl_Widget.H	/^  const char *tooltip() const {return tooltip_;}$/;"	f	class:Fl_Widget
tooltip_	/usr/include/FL/Fl_Widget.H	/^  const char *tooltip_;$/;"	m	class:Fl_Widget
top	/usr/include/FL/Fl_Browser_.H	/^  void *top() const {return top_;}$/;"	f	class:Fl_Browser_
top	MatrixStack.cpp	/^Matrix4f MatrixStack::top()$/;"	f	class:MatrixStack
top_	/usr/include/FL/Fl_Browser_.H	/^  void* top_;		\/\/ which item scrolling position is in$/;"	m	class:Fl_Browser_
topline	/usr/include/FL/Fl_Browser.H	/^  void topline(int l) { lineposition(l, TOP); }$/;"	f	class:Fl_Browser
topline	/usr/include/FL/Fl_Help_View.H	/^  int		topline() const { return (topline_); }$/;"	f	class:Fl_Help_View
topline_	/usr/include/FL/Fl_Help_View.H	/^  int		topline_,		\/\/ Top line in document$/;"	m	class:Fl_Help_View
total	/usr/include/FL/Fl_Timer.H	/^  double delay, total;$/;"	m	class:Fl_Timer
transform	Joint.h	/^	Matrix4f transform; \/\/ transform relative to its parent$/;"	m	struct:Joint
translation	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::translation( const Vector3f& rTranslation )$/;"	f	class:Matrix4f
translation	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::translation( float x, float y, float z )$/;"	f	class:Matrix4f
transpose	./vecmath/src/Matrix2f.cpp	/^void Matrix2f::transpose()$/;"	f	class:Matrix2f
transpose	./vecmath/src/Matrix3f.cpp	/^void Matrix3f::transpose()$/;"	f	class:Matrix3f
transpose	./vecmath/src/Matrix4f.cpp	/^void Matrix4f::transpose()$/;"	f	class:Matrix4f
transposed	./vecmath/src/Matrix2f.cpp	/^Matrix2f Matrix2f::transposed() const$/;"	f	class:Matrix2f
transposed	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::transposed() const$/;"	f	class:Matrix3f
transposed	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::transposed() const$/;"	f	class:Matrix4f
tuple	tuple.h	/^    tuple() { }$/;"	f	class:tuple
tuple	tuple.h	/^    tuple(TYPE first, ...)$/;"	f	class:tuple
tuple	tuple.h	/^    tuple(const TYPE array[SIZE]) {$/;"	f	class:tuple
tuple	tuple.h	/^    tuple(const tuple& other) {$/;"	f	class:tuple
tuple	tuple.h	/^class tuple$/;"	c
type	/usr/include/FL/Fl_File_Icon.H	/^  int		type() { return (type_); }$/;"	f	class:Fl_File_Icon
type	/usr/include/FL/Fl_Spinner.H	/^  uchar		type() const { return (input_.type()); }$/;"	f	class:Fl_Spinner
type	/usr/include/FL/Fl_Spinner.H	/^  void		type(uchar v) { $/;"	f	class:Fl_Spinner
type	/usr/include/FL/Fl_Widget.H	/^  uchar type() const {return type_;}$/;"	f	class:Fl_Widget
type	/usr/include/FL/Fl_Widget.H	/^  uchar type;$/;"	m	struct:Fl_Label
type	/usr/include/FL/Fl_Widget.H	/^  void type(uchar t) {type_ = t;}$/;"	f	class:Fl_Widget
type_	/usr/include/FL/Fl_File_Chooser.H	/^  int type_; $/;"	m	class:Fl_File_Chooser
type_	/usr/include/FL/Fl_File_Icon.H	/^  int		type_;		\/\/ Match only if directory or file?$/;"	m	class:Fl_File_Icon
type_	/usr/include/FL/Fl_Widget.H	/^  uchar type_;$/;"	m	class:Fl_Widget
type_	/usr/include/FL/fl_file_chooser.H	/^  int type_; $/;"	m	class:Fl_File_Chooser
typea	/usr/include/FL/Fl_Multi_Label.H	/^  uchar typea;$/;"	m	struct:Fl_Multi_Label
typeb	/usr/include/FL/Fl_Multi_Label.H	/^  uchar typeb;$/;"	m	struct:Fl_Multi_Label
uchar	/usr/include/FL/Enumerations.H	/^typedef unsigned char uchar;$/;"	t
ulong	/usr/include/FL/Enumerations.H	/^typedef unsigned long ulong;$/;"	t
uncheck	/usr/include/FL/Fl_Menu_Item.H	/^  void uncheck() {flags &= ~FL_MENU_VALUE;}$/;"	f	struct:Fl_Menu_Item
uniformScaling	./vecmath/src/Matrix3f.cpp	/^Matrix3f Matrix3f::uniformScaling( float s )$/;"	f	class:Matrix3f
uniformScaling	./vecmath/src/Matrix4f.cpp	/^Matrix4f Matrix4f::uniformScaling( float s )$/;"	f	class:Matrix4f
up_button_	/usr/include/FL/Fl_Spinner.H	/^		up_button_,		\/\/ Up button$/;"	m	class:Fl_Spinner
update	/usr/include/FL/Fl_Spinner.H	/^  void		update() {$/;"	f	class:Fl_Spinner
update	ModelerView.cpp	/^void ModelerView::update()$/;"	f	class:ModelerView
updateCurrentJointToWorldTransforms	SkeletalModel.cpp	/^void SkeletalModel::updateCurrentJointToWorldTransforms()$/;"	f	class:SkeletalModel
updateJoints	ModelerView.cpp	/^void ModelerView::updateJoints()$/;"	f	class:ModelerView
updateMesh	SkeletalModel.cpp	/^void SkeletalModel::updateMesh()$/;"	f	class:SkeletalModel
user_data	/usr/include/FL/Fl_Menu_Item.H	/^  void user_data(void* v) {user_data_ = v;}$/;"	f	struct:Fl_Menu_Item
user_data	/usr/include/FL/Fl_Menu_Item.H	/^  void* user_data() const {return user_data_;}$/;"	f	struct:Fl_Menu_Item
user_data	/usr/include/FL/Fl_Widget.H	/^  void user_data(void* v) {user_data_ = v;}$/;"	f	class:Fl_Widget
user_data	/usr/include/FL/Fl_Widget.H	/^  void* user_data() const {return user_data_;}$/;"	f	class:Fl_Widget
user_data_	/usr/include/FL/Fl_Menu_Item.H	/^  void *user_data_;$/;"	m	struct:Fl_Menu_Item
user_data_	/usr/include/FL/Fl_Widget.H	/^  void* user_data_;$/;"	m	class:Fl_Widget
v2f	/usr/include/FL/gl2opengl.h	20;"	d
v2s	/usr/include/FL/gl2opengl.h	21;"	d
val	/usr/include/FL/Fl_Chart.H	/^   float val;$/;"	m	struct:FL_CHART_ENTRY
valid	/usr/include/FL/Fl_Gl_Window.H	/^  char valid() const {return valid_f_ & 1;}$/;"	f	class:Fl_Gl_Window
valid	/usr/include/FL/Fl_Gl_Window.H	/^  void valid(char v) {if (v) valid_f_ |= 1; else valid_f_ &= 0xfe;}$/;"	f	class:Fl_Gl_Window
valid_f_	/usr/include/FL/Fl_Gl_Window.H	/^  char valid_f_;$/;"	m	class:Fl_Gl_Window
value	/usr/include/FL/Fl_Browser.H	/^  void value(int v) {select(v);}$/;"	f	class:Fl_Browser
value	/usr/include/FL/Fl_Button.H	/^  char value() const {return value_;}$/;"	f	class:Fl_Button
value	/usr/include/FL/Fl_Choice.H	/^  int value() const {return Fl_Menu_::value();}$/;"	f	class:Fl_Choice
value	/usr/include/FL/Fl_Clock.H	/^  ulong value() const {return value_;}$/;"	f	class:Fl_Clock_Output
value	/usr/include/FL/Fl_Color_Chooser.H	/^  double value() const {return value_;}$/;"	f	class:Fl_Color_Chooser
value	/usr/include/FL/Fl_File_Icon.H	/^  short		*value() { return (data_); }$/;"	f	class:Fl_File_Icon
value	/usr/include/FL/Fl_File_Input.H	/^  const char	*value() { return Fl_Input_::value(); }$/;"	f	class:Fl_File_Input
value	/usr/include/FL/Fl_Help_View.H	/^  const char	*value() const { return (value_); }$/;"	f	class:Fl_Help_View
value	/usr/include/FL/Fl_Input_.H	/^  const char* value() const {return value_;}$/;"	f	class:Fl_Input_
value	/usr/include/FL/Fl_Input_Choice.H	/^  const char* value() const {$/;"	f	class:Fl_Input_Choice
value	/usr/include/FL/Fl_Input_Choice.H	/^  void value(const char *val) {$/;"	f	class:Fl_Input_Choice
value	/usr/include/FL/Fl_Input_Choice.H	/^  void value(int val) {$/;"	f	class:Fl_Input_Choice
value	/usr/include/FL/Fl_Menu_.H	/^  int value() const {return value_ ? (int)(value_-menu_) : -1;}$/;"	f	class:Fl_Menu_
value	/usr/include/FL/Fl_Menu_.H	/^  int value(int i) {return value(menu_+i);}$/;"	f	class:Fl_Menu_
value	/usr/include/FL/Fl_Menu_Item.H	/^  int value() const {return flags&FL_MENU_VALUE;}$/;"	f	struct:Fl_Menu_Item
value	/usr/include/FL/Fl_Preferences.H	/^    char *name, *value;$/;"	m	struct:Fl_Preferences::Entry
value	/usr/include/FL/Fl_Progress.H	/^  float	value() const { return (value_); }$/;"	f	class:Fl_Progress
value	/usr/include/FL/Fl_Progress.H	/^  void	value(float v) { value_ = v; redraw(); }$/;"	f	class:Fl_Progress
value	/usr/include/FL/Fl_Scrollbar.H	/^  int value() {return int(Fl_Slider::value());}$/;"	f	class:Fl_Scrollbar
value	/usr/include/FL/Fl_Scrollbar.H	/^  int value(int p, int s, int top, int total) {$/;"	f	class:Fl_Scrollbar
value	/usr/include/FL/Fl_Spinner.H	/^  double	value() const { return (value_); }$/;"	f	class:Fl_Spinner
value	/usr/include/FL/Fl_Spinner.H	/^  void		value(double v) { value_ = v; update(); }$/;"	f	class:Fl_Spinner
value	/usr/include/FL/Fl_Timer.H	/^  double value() const {return delay>0.0?delay:0.0;}$/;"	f	class:Fl_Timer
value	/usr/include/FL/Fl_Valuator.H	/^  double value() const {return value_;}$/;"	f	class:Fl_Valuator
value	/usr/include/FL/Fl_Widget.H	/^  const char* value;$/;"	m	struct:Fl_Label
value	/usr/include/FL/x.H	/^  XFontStruct* value() { if (!ptr) { ptr = fl_xxfont(); }  return ptr; }$/;"	f	class:Fl_XFont_On_Demand
value_	/usr/include/FL/Fl_Button.H	/^  char value_;$/;"	m	class:Fl_Button
value_	/usr/include/FL/Fl_Clock.H	/^  ulong value_;$/;"	m	class:Fl_Clock_Output
value_	/usr/include/FL/Fl_Color_Chooser.H	/^  double hue_, saturation_, value_;$/;"	m	class:Fl_Color_Chooser
value_	/usr/include/FL/Fl_Help_View.H	/^  const char	*value_;		\/\/ HTML text value$/;"	m	class:Fl_Help_View
value_	/usr/include/FL/Fl_Input_.H	/^  const char* value_;$/;"	m	class:Fl_Input_
value_	/usr/include/FL/Fl_Menu_.H	/^  const Fl_Menu_Item *value_;$/;"	m	class:Fl_Menu_
value_	/usr/include/FL/Fl_Progress.H	/^  float	value_,$/;"	m	class:Fl_Progress
value_	/usr/include/FL/Fl_Spinner.H	/^  double	value_;			\/\/ Current value$/;"	m	class:Fl_Spinner
value_	/usr/include/FL/Fl_Tabs.H	/^  Fl_Widget *value_;$/;"	m	class:Fl_Tabs
value_	/usr/include/FL/Fl_Valuator.H	/^  double value_;$/;"	m	class:Fl_Valuator
value_	/usr/include/FL/Fl_Wizard.H	/^  Fl_Widget *value_;$/;"	m	class:Fl_Wizard
valuebox	/usr/include/FL/Fl_Color_Chooser.H	/^  Flcc_ValueBox valuebox;$/;"	m	class:Fl_Color_Chooser
vendor_	/usr/include/FL/Fl_Preferences.H	/^    char *vendor_, *application_;$/;"	m	class:Fl_Preferences::RootNode
viewMatrix	camera.cpp	/^Matrix4f Camera::viewMatrix() const$/;"	f	class:Camera
view_	/usr/include/FL/Fl_Help_Dialog.H	/^  Fl_Help_View *view_;$/;"	m	class:Fl_Help_Dialog
visibility	/usr/include/FL/glut.H	/^  void (*visibility)(int);$/;"	m	class:Fl_Glut_Window
visible	/usr/include/FL/Fl_Menu_Item.H	/^  int visible() const {return !(flags&FL_MENU_INVISIBLE);}$/;"	f	struct:Fl_Menu_Item
visible	/usr/include/FL/Fl_Widget.H	/^  int visible() const {return !(flags_&INVISIBLE);}$/;"	f	class:Fl_Widget
visible_focus	/usr/include/FL/Fl.H	/^  static int  visible_focus() { return visible_focus_; }$/;"	f	class:Fl
visible_focus	/usr/include/FL/Fl.H	/^  static void visible_focus(int v) { visible_focus_ = v; }$/;"	f	class:Fl
visible_focus	/usr/include/FL/Fl_Widget.H	/^  int  visible_focus() { return flags_ & VISIBLE_FOCUS; }$/;"	f	class:Fl_Widget
visible_focus	/usr/include/FL/Fl_Widget.H	/^  void visible_focus(int v) { if (v) set_visible_focus(); else clear_visible_focus(); }$/;"	f	class:Fl_Widget
visible_focus_	/usr/include/FL/Fl.H	/^  static int visible_focus_;$/;"	m	class:Fl
w	./vecmath/src/Quat4f.cpp	/^float Quat4f::w() const$/;"	f	class:Quat4f
w	./vecmath/src/Vector4f.cpp	/^float Vector4f::w() const$/;"	f	class:Vector4f
w	./vecmath/src/Vector4f.cpp	/^float& Vector4f::w()$/;"	f	class:Vector4f
w	/usr/include/FL/Fl_Help_View.H	/^		w,		\/\/ Width of link text$/;"	m	struct:Fl_Help_Link
w	/usr/include/FL/Fl_Help_View.H	/^		w,		\/\/ Width$/;"	m	struct:Fl_Help_Block
w	/usr/include/FL/Fl_Image.H	/^  int w() const {return w_;}$/;"	f	class:Fl_Image
w	/usr/include/FL/Fl_Image.H	/^  void w(int W) {w_ = W;}$/;"	f	class:Fl_Image
w	/usr/include/FL/Fl_Text_Display.H	/^    struct { int x, y, w, h; } text_area;$/;"	m	struct:Fl_Text_Display::__anon24
w	/usr/include/FL/Fl_Widget.H	/^  int w() const {return w_;}$/;"	f	class:Fl_Widget
w	/usr/include/FL/Fl_Widget.H	/^  void w(int v) {w_ = (short)v;}$/;"	f	class:Fl_Widget
w	/usr/include/FL/mac.H	/^  Fl_Window *w;            \/\/ FLTK window for $/;"	m	class:Fl_X
w	/usr/include/FL/win32.H	/^  Fl_Window* w;$/;"	m	class:Fl_X
w	/usr/include/FL/x.H	/^  Fl_Window *w;$/;"	m	class:Fl_X
w_	/usr/include/FL/Fl_Image.H	/^  int w_, h_, d_, ld_, count_;$/;"	m	class:Fl_Image
w_	/usr/include/FL/Fl_Widget.H	/^  short x_,y_,w_,h_;$/;"	m	class:Fl_Widget
wait_for_expose	/usr/include/FL/mac.H	/^  int wait_for_expose;$/;"	m	class:Fl_X
wait_for_expose	/usr/include/FL/win32.H	/^  int wait_for_expose;$/;"	m	class:Fl_X
wait_for_expose	/usr/include/FL/x.H	/^  char wait_for_expose;$/;"	m	class:Fl_X
warning	/usr/include/FL/Fl.H	/^  static void (*warning)(const char*, ...);$/;"	m	class:Fl
when	/usr/include/FL/Fl_Widget.H	/^  Fl_When when() const {return (Fl_When)when_;}$/;"	f	class:Fl_Widget
when	/usr/include/FL/Fl_Widget.H	/^  void when(uchar i) {when_ = i;}$/;"	f	class:Fl_Widget
when_	/usr/include/FL/Fl_Widget.H	/^  uchar when_;$/;"	m	class:Fl_Widget
widget_	/usr/include/FL/Fl_Tooltip.H	/^  static Fl_Widget* widget_;$/;"	m	class:Fl_Tooltip
width	/usr/include/FL/mac.H	/^struct XRectangle {int x, y, width, height;};$/;"	m	struct:XRectangle
width	/usr/include/FL/win32.H	/^struct XRectangle {int x, y, width, height;};$/;"	m	struct:XRectangle
width_	/usr/include/FL/Fl_Scroll.H	/^  int width_, height_;$/;"	m	class:Fl_Scroll
window	/usr/include/FL/Fl_File_Chooser.H	/^  Fl_Double_Window *window;$/;"	m	class:Fl_File_Chooser
window	/usr/include/FL/fl_file_chooser.H	/^  Fl_Double_Window *window;$/;"	m	class:Fl_File_Chooser
window_	/usr/include/FL/Fl_Help_Dialog.H	/^  Fl_Double_Window *window_;$/;"	m	class:Fl_Help_Dialog
word_end	/usr/include/FL/Fl_Text_Display.H	/^    int word_end(int pos) { return buffer()->word_end(pos); }$/;"	f	class:Fl_Text_Display
word_start	/usr/include/FL/Fl_Text_Display.H	/^    int word_start(int pos) { return buffer()->word_start(pos); }$/;"	f	class:Fl_Text_Display
wrap	/usr/include/FL/Fl_Input_.H	/^  int wrap() const { return type() & FL_INPUT_WRAP; }$/;"	f	class:Fl_Input_
wrap	/usr/include/FL/Fl_Input_.H	/^  void wrap(int b) { if (b) type((uchar)(type() | FL_INPUT_WRAP));$/;"	f	class:Fl_Input_
writeBMP	bitmap.cpp	/^void writeBMP(char *iname, int width, int height, unsigned char *data)$/;"	f
wx	./vecmath/src/Vector4f.cpp	/^Vector2f Vector4f::wx() const$/;"	f	class:Vector4f
wxy	./vecmath/src/Vector4f.cpp	/^Vector3f Vector4f::wxy() const$/;"	f	class:Vector4f
wxyz	./vecmath/src/Quat4f.cpp	/^Vector4f Quat4f::wxyz() const$/;"	f	class:Quat4f
wxz	./vecmath/src/Vector4f.cpp	/^Vector3f Vector4f::wxz() const$/;"	f	class:Vector4f
x	./vecmath/src/Quat4f.cpp	/^float Quat4f::x() const$/;"	f	class:Quat4f
x	./vecmath/src/Vector2f.cpp	/^float Vector2f::x() const$/;"	f	class:Vector2f
x	./vecmath/src/Vector2f.cpp	/^float& Vector2f::x()$/;"	f	class:Vector2f
x	./vecmath/src/Vector3f.cpp	/^float Vector3f::x() const$/;"	f	class:Vector3f
x	./vecmath/src/Vector3f.cpp	/^float& Vector3f::x()$/;"	f	class:Vector3f
x	./vecmath/src/Vector4f.cpp	/^float Vector4f::x() const$/;"	f	class:Vector4f
x	./vecmath/src/Vector4f.cpp	/^float& Vector4f::x()$/;"	f	class:Vector4f
x	/usr/include/FL/Fl_Help_View.H	/^  int		x,		\/\/ Indentation\/starting X coordinate$/;"	m	struct:Fl_Help_Block
x	/usr/include/FL/Fl_Help_View.H	/^  int		x,		\/\/ X offset of link text$/;"	m	struct:Fl_Help_Link
x	/usr/include/FL/Fl_Text_Display.H	/^    struct { int x, y, w, h; } text_area;$/;"	m	struct:Fl_Text_Display::__anon24
x	/usr/include/FL/Fl_Widget.H	/^  int x() const {return x_;}$/;"	f	class:Fl_Widget
x	/usr/include/FL/Fl_Widget.H	/^  void x(int v) {x_ = (short)v;}$/;"	f	class:Fl_Widget
x	/usr/include/FL/mac.H	/^struct XPoint { int x, y; };$/;"	m	struct:XPoint
x	/usr/include/FL/mac.H	/^struct XRectangle {int x, y, width, height;};$/;"	m	struct:XRectangle
x	/usr/include/FL/win32.H	/^struct XRectangle {int x, y, width, height;};$/;"	m	struct:XRectangle
x	/usr/include/FL/x.H	/^  static void x(Fl_Window* wi, int X) {wi->x(X);}$/;"	f	class:Fl_X
x_	/usr/include/FL/Fl_Widget.H	/^  short x_,y_,w_,h_;$/;"	m	class:Fl_Widget
xclass	/usr/include/FL/Fl_Window.H	/^  const char* xclass() const	{return xclass_;}$/;"	f	class:Fl_Window
xclass	/usr/include/FL/Fl_Window.H	/^  void xclass(const char* c)	{xclass_ = c;}$/;"	f	class:Fl_Window
xclass_	/usr/include/FL/Fl_Window.H	/^  const char* xclass_;$/;"	m	class:Fl_Window
xid	/usr/include/FL/mac.H	/^  Window xid;              \/\/ Mac WindowPtr$/;"	m	class:Fl_X
xid	/usr/include/FL/win32.H	/^  Window xid;$/;"	m	class:Fl_X
xid	/usr/include/FL/x.H	/^  Window xid;$/;"	m	class:Fl_X
xidChildren	/usr/include/FL/mac.H	/^  Fl_X *xidChildren, *xidNext; \/\/ more subwindow tree$/;"	m	class:Fl_X
xidNext	/usr/include/FL/mac.H	/^  Fl_X *xidChildren, *xidNext; \/\/ more subwindow tree$/;"	m	class:Fl_X
xmax	/usr/include/FL/Fl_Positioner.H	/^  double xmax, ymax;$/;"	m	class:Fl_Positioner
xmaximum	/usr/include/FL/Fl_Positioner.H	/^  double xmaximum() const {return xmax;}$/;"	f	class:Fl_Positioner
xmaximum	/usr/include/FL/Fl_Positioner.H	/^  void xmaximum(double a) {xbounds(xmin,a);}$/;"	f	class:Fl_Positioner
xmin	/usr/include/FL/Fl_Positioner.H	/^  double xmin, ymin;$/;"	m	class:Fl_Positioner
xminimum	/usr/include/FL/Fl_Positioner.H	/^  double xminimum() const {return xmin;}$/;"	f	class:Fl_Positioner
xminimum	/usr/include/FL/Fl_Positioner.H	/^  void xminimum(double a) {xbounds(a,xmax);}$/;"	f	class:Fl_Positioner
xposition	/usr/include/FL/Fl_Scroll.H	/^  int xposition() const {return xposition_;}$/;"	f	class:Fl_Scroll
xposition_	/usr/include/FL/Fl_Scroll.H	/^  int xposition_, yposition_;$/;"	m	class:Fl_Scroll
xscroll	/usr/include/FL/Fl_Input_.H	/^  int xscroll() const {return xscroll_;}$/;"	f	class:Fl_Input_
xscroll_	/usr/include/FL/Fl_Input_.H	/^  int xscroll_, yscroll_;$/;"	m	class:Fl_Input_
xstep	/usr/include/FL/Fl_Positioner.H	/^  void xstep(double a) {xstep_ = a;}$/;"	f	class:Fl_Positioner
xstep_	/usr/include/FL/Fl_Positioner.H	/^  double xstep_, ystep_;$/;"	m	class:Fl_Positioner
xvalue	/usr/include/FL/Fl_Positioner.H	/^  double xvalue() const {return xvalue_;}$/;"	f	class:Fl_Positioner
xvalue_	/usr/include/FL/Fl_Positioner.H	/^  double xvalue_, yvalue_;$/;"	m	class:Fl_Positioner
xx	./vecmath/src/Vector2f.cpp	/^Vector2f Vector2f::xx() const$/;"	f	class:Vector2f
xy	./vecmath/src/Vector2f.cpp	/^Vector2f Vector2f::xy() const$/;"	f	class:Vector2f
xy	./vecmath/src/Vector3f.cpp	/^Vector2f Vector3f::xy() const$/;"	f	class:Vector3f
xy	./vecmath/src/Vector4f.cpp	/^Vector2f Vector4f::xy() const$/;"	f	class:Vector4f
xyw	./vecmath/src/Vector4f.cpp	/^Vector3f Vector4f::xyw() const$/;"	f	class:Vector4f
xyz	./vecmath/src/Quat4f.cpp	/^Vector3f Quat4f::xyz() const$/;"	f	class:Quat4f
xyz	./vecmath/src/Vector3f.cpp	/^Vector3f Vector3f::xyz() const$/;"	f	class:Vector3f
xyz	./vecmath/src/Vector4f.cpp	/^Vector3f Vector4f::xyz() const$/;"	f	class:Vector4f
xz	./vecmath/src/Vector3f.cpp	/^Vector2f Vector3f::xz() const$/;"	f	class:Vector3f
y	./vecmath/src/Quat4f.cpp	/^float Quat4f::y() const$/;"	f	class:Quat4f
y	./vecmath/src/Vector2f.cpp	/^float Vector2f::y() const$/;"	f	class:Vector2f
y	./vecmath/src/Vector2f.cpp	/^float& Vector2f::y()$/;"	f	class:Vector2f
y	./vecmath/src/Vector3f.cpp	/^float Vector3f::y() const$/;"	f	class:Vector3f
y	./vecmath/src/Vector3f.cpp	/^float& Vector3f::y()$/;"	f	class:Vector3f
y	./vecmath/src/Vector4f.cpp	/^float Vector4f::y() const$/;"	f	class:Vector4f
y	./vecmath/src/Vector4f.cpp	/^float& Vector4f::y()$/;"	f	class:Vector4f
y	/usr/include/FL/Fl_Help_View.H	/^		y,		\/\/ Starting Y coordinate$/;"	m	struct:Fl_Help_Block
y	/usr/include/FL/Fl_Help_View.H	/^		y,		\/\/ Y offset of link text$/;"	m	struct:Fl_Help_Link
y	/usr/include/FL/Fl_Help_View.H	/^  int		y;		\/\/ Y offset of target$/;"	m	struct:Fl_Help_Target
y	/usr/include/FL/Fl_Text_Display.H	/^    struct { int x, y, w, h; } text_area;$/;"	m	struct:Fl_Text_Display::__anon24
y	/usr/include/FL/Fl_Widget.H	/^  int y() const {return y_;}$/;"	f	class:Fl_Widget
y	/usr/include/FL/Fl_Widget.H	/^  void y(int v) {y_ = (short)v;}$/;"	f	class:Fl_Widget
y	/usr/include/FL/mac.H	/^struct XPoint { int x, y; };$/;"	m	struct:XPoint
y	/usr/include/FL/mac.H	/^struct XRectangle {int x, y, width, height;};$/;"	m	struct:XRectangle
y	/usr/include/FL/win32.H	/^struct XRectangle {int x, y, width, height;};$/;"	m	struct:XRectangle
y	/usr/include/FL/x.H	/^  static void y(Fl_Window* wi, int Y) {wi->y(Y);}$/;"	f	class:Fl_X
y_	/usr/include/FL/Fl_Widget.H	/^  short x_,y_,w_,h_;$/;"	m	class:Fl_Widget
ymax	/usr/include/FL/Fl_Positioner.H	/^  double xmax, ymax;$/;"	m	class:Fl_Positioner
ymaximum	/usr/include/FL/Fl_Positioner.H	/^  double ymaximum() const {return ymax;}$/;"	f	class:Fl_Positioner
ymaximum	/usr/include/FL/Fl_Positioner.H	/^  void ymaximum(double a) {ybounds(ymin,a);}$/;"	f	class:Fl_Positioner
ymin	/usr/include/FL/Fl_Positioner.H	/^  double xmin, ymin;$/;"	m	class:Fl_Positioner
yminimum	/usr/include/FL/Fl_Positioner.H	/^  double yminimum() const {return ymin;}$/;"	f	class:Fl_Positioner
yminimum	/usr/include/FL/Fl_Positioner.H	/^  void yminimum(double a) {ybounds(a,ymax);}$/;"	f	class:Fl_Positioner
yposition	/usr/include/FL/Fl_Scroll.H	/^  int yposition() const {return yposition_;}$/;"	f	class:Fl_Scroll
yposition_	/usr/include/FL/Fl_Scroll.H	/^  int xposition_, yposition_;$/;"	m	class:Fl_Scroll
yscroll	/usr/include/FL/Fl_Input_.H	/^  int yscroll() const {return yscroll_;}$/;"	f	class:Fl_Input_
yscroll_	/usr/include/FL/Fl_Input_.H	/^  int xscroll_, yscroll_;$/;"	m	class:Fl_Input_
ystep	/usr/include/FL/Fl_Positioner.H	/^  void ystep(double a) {ystep_ = a;}$/;"	f	class:Fl_Positioner
ystep_	/usr/include/FL/Fl_Positioner.H	/^  double xstep_, ystep_;$/;"	m	class:Fl_Positioner
yvalue	/usr/include/FL/Fl_Positioner.H	/^  double yvalue() const {return yvalue_;}$/;"	f	class:Fl_Positioner
yvalue_	/usr/include/FL/Fl_Positioner.H	/^  double xvalue_, yvalue_;$/;"	m	class:Fl_Positioner
yx	./vecmath/src/Vector2f.cpp	/^Vector2f Vector2f::yx() const$/;"	f	class:Vector2f
yy	./vecmath/src/Vector2f.cpp	/^Vector2f Vector2f::yy() const$/;"	f	class:Vector2f
yz	./vecmath/src/Vector3f.cpp	/^Vector2f Vector3f::yz() const$/;"	f	class:Vector3f
yz	./vecmath/src/Vector4f.cpp	/^Vector2f Vector4f::yz() const$/;"	f	class:Vector4f
yzw	./vecmath/src/Vector4f.cpp	/^Vector3f Vector4f::yzw() const$/;"	f	class:Vector4f
yzx	./vecmath/src/Vector3f.cpp	/^Vector3f Vector3f::yzx() const$/;"	f	class:Vector3f
yzx	./vecmath/src/Vector4f.cpp	/^Vector3f Vector4f::yzx() const$/;"	f	class:Vector4f
z	./vecmath/src/Quat4f.cpp	/^float Quat4f::z() const$/;"	f	class:Quat4f
z	./vecmath/src/Vector3f.cpp	/^float Vector3f::z() const$/;"	f	class:Vector3f
z	./vecmath/src/Vector3f.cpp	/^float& Vector3f::z()$/;"	f	class:Vector3f
z	./vecmath/src/Vector4f.cpp	/^float Vector4f::z() const$/;"	f	class:Vector4f
z	./vecmath/src/Vector4f.cpp	/^float& Vector4f::z()$/;"	f	class:Vector4f
zw	./vecmath/src/Vector4f.cpp	/^Vector2f Vector4f::zw() const$/;"	f	class:Vector4f
zwx	./vecmath/src/Vector4f.cpp	/^Vector3f Vector4f::zwx() const$/;"	f	class:Vector4f
zwy	./vecmath/src/Vector4f.cpp	/^Vector3f Vector4f::zwy() const$/;"	f	class:Vector4f
zxy	./vecmath/src/Vector3f.cpp	/^Vector3f Vector3f::zxy() const$/;"	f	class:Vector3f
~Fl_Browser	/usr/include/FL/Fl_Browser.H	/^  ~Fl_Browser() { clear(); }$/;"	f	class:Fl_Browser
~Fl_Check_Browser	/usr/include/FL/Fl_Check_Browser.H	/^  ~Fl_Check_Browser() { clear(); }$/;"	f	class:Fl_Check_Browser
~Fl_Text_Editor	/usr/include/FL/Fl_Text_Editor.H	/^    ~Fl_Text_Editor() { remove_all_key_bindings(); }$/;"	f	class:Fl_Text_Editor
~ModelerApplication	modelerapp.cpp	/^ModelerApplication::~ModelerApplication()$/;"	f	class:ModelerApplication
~ModelerView	ModelerView.cpp	/^ModelerView::~ModelerView()$/;"	f	class:ModelerView
