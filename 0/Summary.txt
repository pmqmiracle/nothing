Assignment0 is not very difficult, but at the beginning, dealing with the string parsing cost me some time.

From this assignment, I know more about stringstream usage.

if char buffer[1024], contains{24 8 1924} seperated by spaces.
we can parse it by this way:
    int a,b,c;
    stringstream ss(buffer);
    ss >> a >> b >> c;
if it is a single string, we can parse it directly too:
    stringstream(str.substr(0,pos)) >> temp;

From this assignment, I know more about OpenGL knowledge.

openGL使用右手坐标
从左到右，x递增
从下到上，y递增
从远到近，z递增
--------------------------------------------------------------------------------
OPENGL坐标系可分为：世界坐标系和当前绘图坐标系。
世界坐标系以屏幕中心为原点(0, 0, 0)。你面对屏幕，你的右边是x正轴，上面是y正轴，屏幕指向你的为z正轴。长度单位这样来定： 窗口范围按此单位恰好是(-1,-1)到(1,1)。
当前绘图坐标系是 绘制物体时的坐标系。程序刚初始化时，世界坐标系和当前绘图坐标系是重合的。当用glTranslatef()，glScalef(), glRotatef()对当前绘图坐标系进行平移、伸缩、旋转变换之后， 世界坐标系和当前绘图坐标系不再重合。改变以后，再用glVertex3f()等绘图函数绘图时，都是在当前绘图坐标系进行绘图，所有的函数参数也都是相 对当前绘图坐标系来讲的。

OpenGL中的6种坐标系
OpenGL中存在6种坐标系，
1. Object or model coordinates
2. World coordinates
3. Eye (or Camera) coordinates
4. Clip coordinates
5. Normalized device coordinates
6. Window (or screen) coordinates

从object coordainates到world coordinates再到camera coordinate的变换，在OPENGL中统一称为model-view转换，初始化的时候，object coordinates和world coordinates还有camera coordinates坐标重合在原点，变换矩阵都为Identity。model-view matix转换points,vectorsd到camera坐标系。

在opengl编程中，有个困惑的问题，就是那个坐标系是不动的，我想是你想参考坐标系是不动的。比如我想建立了一个object，放到 camera坐标系中，这时，我以camera的原点为参考点。当然，我想看这个物体的时候，我就以object的原点为参考点，移动camera坐标系的原点，就可以看到object了。好像写了一堆废话，呵呵。

其中四种坐标经常要在程序中用到：世界坐标，物体坐标，设备坐标和眼坐标。

世界坐标是OpenGL中用来描述场景的坐标，Z+轴垂直屏幕向外，X+从左到右，Y+轴从下到上，是右手笛卡尔坐标系统。我们用这个坐标系来描述物体及光源的位置。
将物体放到场景中也就是将物体平移到特定位置、旋转一定角度，这些操作就是坐标变换。OpenGL中提供了glTranslate*/glRotate*/glScale*三条坐标变换命令，利用OpenGL的矩阵运算命令，则可以实现任意复杂的坐标变换。

非常重要：OpenGL 中有一个坐标变换矩阵栈(ModelView)，栈顶就是当前坐标变换矩阵，进入OpenGL管道的每个坐标(齐次坐标)都会先乘上这个矩阵，结果才是对应点在场景中的世界坐标。OpenGL中的坐标变换都是通过矩阵运算完成的，与图形学课本的描述完全一致。要注意的是变换中的矩阵乘法是左乘，而矩阵乘法与算术乘法不同，不符合交换律(万一不明白去看矩阵代数书好了)。

glTranslate*(x,y,z)：平移，参数为各轴向的移动量。
glRotate(d,x,y,z)：旋转，第一个参数为转动的度数，后三个参数表明是否绕该轴旋转。通常x,y,z中只有一个为1，其余为0，用连续几条旋转命令完成复杂旋转。由于矩阵运算的左乘特点，旋转命令的顺序与旋转动作的顺序正好相反。

物体坐标是以物体某一点为原点而建立的“世界坐标”，该坐标系仅对该物体适用，用来简化对物体各部分坐标的描述。物体放到场景中时，各部分经历的坐标变换相同，相对位置不变，所以可视为一个整体，与人类的思维习惯一致。

眼坐标是以视点为原点，以视线的方向为Z+轴正方向的坐标系中的方向。OpenGL管道会将世界坐标先变换到眼坐标，然后进行裁剪，只有在视线范围(视见体)之内的场景才会进入下一阶段的计算。

同样的，有投影变换矩阵栈(Projection)，栈顶矩阵就是当前投影变换矩阵，负责将场景各坐标变换到眼坐标，由所得到的结果是裁剪后的场景部分，称为裁剪坐标。前面提到过的视见体设定其实就是在建立该矩阵。

设备坐标：OpenGL 的重要功能之一就是将三维的世界坐标经过变换、投影等计算，最终算出它在显示设备上对应的位置，这个位置就称为设备坐标。在屏幕、打印机等设备上的坐标是二维坐标。值得一提的是，OpenGL可以只使用设备的一部分进行绘制，这个部分称为视区或视口(viewport)。投影得到的是视区内的坐标(投影坐标)，从投影坐标到设备坐标的计算过程就是设备变换了。

矩阵栈切换：glMatrixMode(GL_MODELVIEWING或GL_PROJECTION);本命令执行后参数所指矩阵栈就成为当前矩阵栈，以后的矩阵栈操纵命令将作用于它。

矩阵栈操纵命令：
glPushMatrix(); 当前矩阵入栈，这时矩阵栈将栈顶值压入栈。
glPopMatrix(); 栈顶出栈，通常与上一条命令配合使用。
glLoadIdentity(); 将栈顶设为不变矩阵(就是对角线全为1其它为0的那个)。
glMultMatrix(M);将栈顶T设为M·T。

==============================================================================================
OpenGL中的矩阵变换：
1.视变换(View Transform)：将Camera指向物体，即确定视点位置与观察方向。
   void gluLookAt(GLdouble eyex, GLdouble exey, GLdouble eyez, ----视点
   GLdouble centrex, GLdouble centrey, GLdouble centrez, ----视线方向：从eye指向centre
   GLdouble upx, GLdouble upy, GLdouble upz) ----视平截头自下而上的方向 (右乘当前矩阵)
2.模型变换(Model Transformation)：确定模型的位置、方向与缩放信息。我们可以计算出位移矩阵、旋转矩阵和缩放矩阵。（右乘当前矩阵）
3.投影变换(Projection Transformation)：产生一个六面体的平截头体，把平截头体以外的场景裁剪掉，把平截头体内的物体、场景作为绘制对象。
两个投影函数:
glFrustum(left, right, bottom, top, near, far)
glOrtho(left, right, bottom, top, near, far)
它们生成ProjectionMatrix，并用该Matrix左乘当前矩阵。

OpenGL坐标系
图1. 顶点处理流水线
图1是顶点处理流水线，它展示了，顶点从世界空间位置到屏幕坐标的变化，包括Model与View变换，投影变换，透视变换和Viewport变换。
为了完成这些变换，首先需要进行View，Modeling和Projection变换，这项工作通过构建4x4的矩阵来完成。在顶点处理过程中，View和Modeling变换除了会被用于顶点外，还会被用于normal。这保证了normal相对于顶点之间的关系。当顶点发生变换时，normal会发生同样的变换(仅指View与Modeling变换)。将View与Modeling变换组成ModelViewMatrix，并对进入的对象进行变换，会将其转换到视坐标系。
然后为了将部分场景剔除不予显示，就需要定义平截头体。通过使用Projection矩阵进行变换，会将在平截头内的部分进行绘制。
之后的Perspective division就是用dividing coordinate除以w，以此产生一个normalized device coordinate。
最后，将坐标系通过Viewport变换转成屏幕坐标系。
模型经历各种变换后会被绘制在一个平面的坐标系上，模型的x,y值决定模型会被绘制在哪。而模型的z值同样经历了这些变换后会被作为深度信息进行保留。深度值可以帮助我们删除那些不必绘制的像素，当2个顶点在屏幕上的x,y值相同，但z值不同时。OpenGL可以使用这些信息来确定哪些面被遮挡了，然后就可以不对这些面进行绘制。
